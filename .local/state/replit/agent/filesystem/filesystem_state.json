{"file_contents":{"README.md":{"content":"# Temple Donation Management System\n\n## 📁 Clean Project Structure\n\n```\n📂 Temple Donation Management System\n├── 📂 frontend/          # ✨ All Frontend Files\n│   ├── 📂 client/        # React application\n│   │   ├── 📂 src/       # Components, pages, hooks, contexts\n│   │   └── index.html    # Main HTML file\n│   └── 📂 public/        # Static assets (icons, images)\n│\n├── 📂 backend/           # ⚙️ All Backend Files\n│   ├── 📂 server/        # Express server code\n│   │   ├── index.ts      # Main server entry point\n│   │   ├── routes.ts     # API endpoints\n│   │   ├── storage.ts    # Database operations\n│   │   └── models/       # MongoDB data models\n│   └── 📂 shared/        # Shared schemas and types\n│\n├── 📂 config/            # 🔧 Configuration Files\n│   ├── package.json      # Dependencies and scripts\n│   ├── vite.config.ts    # Build configuration\n│   ├── tailwind.config.ts # Styling configuration\n│   └── components.json   # UI components config\n│\n└── 📄 Documentation     # 📚 Project Documentation\n    ├── README.md         # Project overview\n    └── replit.md         # Technical documentation\n```\n\n## 🔧 Technology Stack\n\n### Frontend (frontend/ folder)\n- **React 18** with TypeScript\n- **Tailwind CSS** + shadcn/ui components\n- **TanStack Query** for state management\n- **Wouter** for routing\n\n### Backend (backend/ folder)\n- **Node.js** + **Express.js**\n- **MongoDB** with Mongoose\n- **PostgreSQL** with Drizzle ORM (fallback)\n- **TypeScript** for type safety\n\n## 🚀 Getting Started\n\n```bash\n# Install dependencies\nnpm install\n\n# Start the development server\nnpm run dev\n```\n\nThe application will be available at `http://localhost:5000`\n\n## 📋 Features\n\n- ✅ Bilingual support (English/Tamil)\n- ✅ Donation management with receipt generation\n- ✅ Donor lookup and history tracking\n- ✅ Admin panel with authentication\n- ✅ Dashboard analytics and reports\n- ✅ CSV/Excel import functionality\n- ✅ Google Forms integration\n- ✅ Mobile-responsive design\n\n---\n**Temple Donation Management System** - Organized folder structure for better development experience","size_bytes":2292},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Temple Donation Management System\n\n## Overview\nA comprehensive bilingual (English/Tamil) web application for managing temple donations. It focuses on efficient tracking, phone-based donor identification, real-time analytics, and seamless Google Forms integration. The system empowers temple administrators to manage donations, generate receipts, track donor history, and maintain detailed records via a standard web interface, aiming to streamline operations and enhance transparency.\n\n## User Preferences\n- Preferred communication style: Simple, everyday language (Tamil/English mix)\n- User confirmed app functionality working correctly (August 2, 2025)\n- Language preference: Both JavaScript and TypeScript available, user can choose either (August 5, 2025)\n- Codebase cleanup: Removed all unused JavaScript and TypeScript files (August 5, 2025)\n\n## Current Status (August 5, 2025)\n- **Issue Resolved**: App is successfully running on localhost:5000\n- **Build Status**: All build processes working successfully (frontend & backend)\n- **Server Configuration**: Using server/index.ts with simplified static file serving (removed complex vite middleware)\n- **Database**: PostgreSQL 16.9 connected and working perfectly\n- **Static Files**: Serving from dist/public with proper asset loading (69KB CSS, 883KB JS)\n- **API Endpoints**: All core functionality tested and working\n- **Performance**: Fast response times (1-2ms for API calls)\n- **TypeScript**: All compilation errors fixed, no LSP diagnostics found\n- **Local Windows Setup**: Successfully configured with Neon database connection, environment variables properly loaded via PowerShell, application running on localhost:5000\n- **Dashboard Filtering**: All date range options fully functional (All Time, This Year, Last Year, This Month, Last Month, Custom Range) - confirmed working by user\n- **Windows Production**: Created Windows-compatible production startup scripts (start-production.js, start-production.bat) and comprehensive documentation (WINDOWS_PRODUCTION_START.md)\n- **Windows Local Development**: Successfully resolved NODE_ENV environment variable issues for Windows users, created .bat file for easy startup, fixed database connection string format (removed channel_binding parameter), confirmed application running locally on Windows with tsx server/index.ts command\n\n## System Architecture\n\n### Frontend\n- **Framework**: React 18 with TypeScript\n- **Styling**: Tailwind CSS with shadcn/ui\n- **Routing**: Wouter\n- **State Management**: TanStack Query\n- **Form Handling**: React Hook Form with Zod validation\n- **Internationalization**: Custom language context for English and Tamil.\n- **UI/UX**: Touch-friendly interface, mobile responsive design, print-ready receipts, password visibility toggles, optimized scrolling for tables, enhanced required field indicators.\n\n### Backend\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript\n- **Database ORM**: Drizzle ORM (initially), transitioned to MongoDB-style API with PostgreSQL for Replit compatibility.\n- **Validation**: Zod schemas for API request/response.\n- **Session Management**: Express session middleware for authentication.\n- **Security**: Admin credential management, role-based access (Admin, Superadmin), session timeouts, secure cookies, protected API endpoints.\n- **Performance**: Compression, caching (2-minute dashboard cache, 24-hour static asset caching), fast query hooks, loading spinners, memoized components, optimized API response times.\n\n### Database Design\n- **Primary Database**: PostgreSQL (Neon serverless configuration) supporting MongoDB-style operations.\n- **Schema Strategy**: Phone number as primary donor identifier.\n- **Receipt System**: Sequential numbering (YYYY-NNNN) with yearly reset.\n- **Migration Support**: Drizzle Kit for automated database migrations.\n\n### Key Features\n- **Donation Management**: Form-based entry, automatic receipt generation, multi-mode payments (cash, card, UPI, bank transfer, cheque), phone-based donor lookup with history.\n- **Dashboard Analytics**: Real-time statistics, customizable filters (date range, community, payment mode, amount), CSV export.\n- **User Management**: Secure admin login, role-based access, credential management, bilingual login form.\n- **Integration Features**: Google Forms integration (template and webhook setup), bilingual English/Tamil interface, mobile responsiveness, print-ready receipt formatting.\n- **Data Import**: CSV and Excel (.xlsx, .xls) import with flexible header mapping, comprehensive validation, error handling, and date parsing (DD/MM/YYYY, DD-MM-YYYY, YYYY-MM-DD, Excel serial numbers). Duplicate receipt number prevention.\n- **Core Functionality**: Delete All with confirmation, single-click button optimization, improved error handling.\n\n## External Dependencies\n\n### Core\n- **@neondatabase/serverless**: Neon PostgreSQL serverless driver.\n- **drizzle-orm**: Type-safe database ORM (used for PostgreSQL).\n- **@tanstack/react-query**: Server state management and caching.\n- **@radix-ui/***: Accessible UI components foundation.\n- **wouter**: Lightweight routing for React applications.\n\n### Development & Deployment\n- **Vite**: Fast build tool.\n- **TypeScript**: Type checking and compilation (though partial migration to JavaScript occurred).\n- **Tailwind CSS**: Utility-first CSS framework.\n- **ESBuild**: Fast JavaScript bundler.\n- **Neon Database**: Serverless PostgreSQL hosting.\n- **Google Forms**: Used for remote donation collection.\n- **Replit**: Development and deployment platform.\n```","size_bytes":5550},"sync-folders.sh":{"content":"#!/bin/bash\n# Sync script to maintain organized folder structure\n# Run this after making changes to keep frontend/ and backend/ in sync\n\necho \"🔄 Syncing organized folders...\"\n\n# Sync backend to root level (for server compatibility)\necho \"Syncing backend/server -> server/\"\ncp -r backend/server/* server/ 2>/dev/null || true\ncp -r backend/shared/* shared/ 2>/dev/null || true\n\n# Sync frontend to root level (for build compatibility)  \necho \"Syncing frontend/client -> client/\"\ncp -r frontend/client/* client/ 2>/dev/null || true\ncp -r frontend/public/* public/ 2>/dev/null || true\ncp frontend/client/index.html index.html 2>/dev/null || true\n\necho \"✅ Sync complete! Organized structure maintained.\"","size_bytes":702},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.js":{"content":"import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport path from 'path';\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      '@': path.resolve(import.meta.dirname, 'client', 'src'),\n      '@shared': path.resolve(import.meta.dirname, 'shared'),\n      '@assets': path.resolve(import.meta.dirname, 'attached_assets'),\n    },\n  },\n  root: path.resolve(import.meta.dirname, 'client'),\n  build: {\n    outDir: path.resolve(import.meta.dirname, 'dist/public'),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":549},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/admin-credentials.ts":{"content":"// Security configuration for admin credentials - JavaScript version\n\n// Predefined secure admin accounts\nconst PREDEFINED_ADMINS = [\n  {\n    username: process.env.ADMIN_USERNAME || \"templeadmin\",\n    password: process.env.ADMIN_PASSWORD || \"Temple@2025#Secure\",\n    role: 'superadmin',\n    createdAt: new Date(),\n  },\n  {\n    username: process.env.ADMIN_USERNAME_2 || \"donations_admin\",\n    password: process.env.ADMIN_PASSWORD_2 || \"Donate#2025$Safe\",\n    role: 'admin',\n    createdAt: new Date(),\n  },\n  {\n    username: process.env.ADMIN_USERNAME_3 || \"temple_manager\",\n    password: process.env.ADMIN_PASSWORD_3 || \"Manage!Temple#2025\",\n    role: 'admin',\n    createdAt: new Date(),\n  }\n];\n\n// Password strength validation\nexport function validatePasswordStrength(password: string) {\n  const errors = [];\n  \n  if (password.length < 8) {\n    errors.push(\"Password must be at least 8 characters long\");\n  }\n  \n  if (!/[A-Z]/.test(password)) {\n    errors.push(\"Password must contain at least one uppercase letter\");\n  }\n  \n  if (!/[a-z]/.test(password)) {\n    errors.push(\"Password must contain at least one lowercase letter\");\n  }\n  \n  if (!/\\d/.test(password)) {\n    errors.push(\"Password must contain at least one number\");\n  }\n  \n  if (!/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password)) {\n    errors.push(\"Password must contain at least one special character\");\n  }\n  \n  // Check for common weak patterns\n  const commonPatterns = [\n    /^password/i,\n    /^123456/,\n    /^admin/i,\n    /^temple/i\n  ];\n  \n  for (const pattern of commonPatterns) {\n    if (pattern.test(password)) {\n      errors.push(\"Password contains common patterns and is not secure\");\n      break;\n    }\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n\n// Generate secure random password\nexport function generateSecurePassword(length: number = 16) {\n  const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const lowercase = 'abcdefghijklmnopqrstuvwxyz';\n  const numbers = '0123456789';\n  const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';\n  \n  const allChars = uppercase + lowercase + numbers + symbols;\n  let password = '';\n  \n  // Ensure at least one character from each category\n  password += uppercase[Math.floor(Math.random() * uppercase.length)];\n  password += lowercase[Math.floor(Math.random() * lowercase.length)];\n  password += numbers[Math.floor(Math.random() * numbers.length)];\n  password += symbols[Math.floor(Math.random() * symbols.length)];\n  \n  // Fill the rest randomly\n  for (let i = 4; i < length; i++) {\n    password += allChars[Math.floor(Math.random() * allChars.length)];\n  }\n  \n  // Shuffle the password\n  return password.split('').sort(() => Math.random() - 0.5).join('');\n}\n\n// Get admin user by username\nexport function getAdminUser(username: string) {\n  return PREDEFINED_ADMINS.find(admin => admin.username === username);\n}\n\n// Validate admin credentials\nexport function validateAdminCredentials(username: string, password: string) {\n  const admin = getAdminUser(username);\n  if (!admin) return null;\n  \n  // In production, you should hash passwords\n  if (admin.password === password) {\n    // Update last login - create new object to avoid mutating original\n    return { ...admin, lastLogin: new Date() };\n\n  }\n  \n  return null;\n}\n\n// Get all admin users (without passwords)\nexport function getAllAdmins() {\n  return PREDEFINED_ADMINS.map(({ password, ...admin }) => admin);\n}\n\n// Change admin credentials (in-memory update)\nexport function changeAdminCredentials(currentUsername: string, newUsername: string, newPassword: string): boolean {\n  const adminIndex = PREDEFINED_ADMINS.findIndex(admin => admin.username === currentUsername);\n  \n  if (adminIndex === -1) {\n    return false;\n  }\n  \n  // Validate new password strength\n  const passwordValidation = validatePasswordStrength(newPassword);\n  if (!passwordValidation.isValid) {\n    throw new Error(`Password validation failed: ${passwordValidation.errors.join(', ')}`);\n  }\n  \n  // Update credentials in memory\n  PREDEFINED_ADMINS[adminIndex].username = newUsername;\n  PREDEFINED_ADMINS[adminIndex].password = newPassword;\n  \n  console.log(`Admin credentials updated: ${currentUsername} -> ${newUsername}`);\n  return true;\n}\n\n// Security recommendations\nexport const SECURITY_RECOMMENDATIONS = {\n  en: {\n    title: \"Security Recommendations\",\n    points: [\n      \"Use environment variables to set secure admin credentials\",\n      \"Change default passwords immediately in production\",\n      \"Use strong passwords with mixed case, numbers, and symbols\",\n      \"Enable HTTPS in production environments\",\n      \"Regularly update admin passwords\",\n      \"Monitor admin login activities\",\n      \"Use different credentials for different environments\"\n    ]\n  },\n  ta: {\n    title: \"பாதுகாப்பு பரிந்துரைகள்\",\n    points: [\n      \"பாதுகாப்பான நிர்வாக அறிமுக தகவல்களை அமைக்க சூழல் மாறிகளைப் பயன்படுத்தவும்\",\n      \"உற்பத்தியில் இயல்புநிலை கடவுச்சொற்களை உடனே மாற்றவும்\",\n      \"கலப்பு வழக்கு, எண்கள் மற்றும் குறியீடுகளுடன் வலுவான கடவுச்சொற்களைப் பயன்படுத்தவும்\",\n      \"உற்பத்தி சூழல்களில் HTTPS ஐ இயக்கவும்\",\n      \"நிர்வாக கடவுச்சொற்களை தொடர்ந்து புதுப்பிக்கவும்\",\n      \"நிர்வாக உள்நுழைவு செயல்பாடுகளைக் கண்காணிக்கவும்\",\n      \"வெவ்வேறு சூழல்களுக்கு வெவ்வேறு அறிமுக தகவல்களைப் பயன்படுத்தவும்\"\n    ]\n  }\n};","size_bytes":6044},"server/cache.ts":{"content":"// Simple in-memory cache for dashboard performance\nclass DashboardCache {\n  private cache = new Map<string, { data: any; timestamp: number; ttl: number }>();\n\n  set(key: string, data: any, ttlSeconds: number = 120) {\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now(),\n      ttl: ttlSeconds * 1000\n    });\n  }\n\n  get(key: string): any | null {\n    const entry = this.cache.get(key);\n    if (!entry) return null;\n\n    if (Date.now() - entry.timestamp > entry.ttl) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return entry.data;\n  }\n\n  clear() {\n    this.cache.clear();\n  }\n\n  invalidatePattern(pattern: string) {\n    for (const key of this.cache.keys()) {\n      if (key.includes(pattern)) {\n        this.cache.delete(key);\n      }\n    }\n  }\n}\n\nexport const dashboardCache = new DashboardCache();","size_bytes":827},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express from \"express\";\nimport session from \"express-session\";\nimport compression from \"compression\";\nimport { createServer } from \"http\";\nimport { registerRoutes } from \"./routes\";\nimport path from \"path\";\n\nconst app = express();\n\n// Performance optimizations for fast loading\napp.use(compression()); // Enable gzip compression\napp.use(express.json({ limit: '1mb' })); // Optimize JSON parsing\n\n// Cache static assets for 24 hours for fast loading\napp.use((req, res, next) => {\n  if (req.url.match(/\\.(js|css|png|jpg|jpeg|gif|svg|ico|woff|woff2)$/)) {\n    res.setHeader('Cache-Control', 'public, max-age=86400');\n  }\n  // Enable fast response headers\n  res.setHeader('X-Powered-By', 'MERN-Stack-Express');\n  next();\n});\napp.use(express.urlencoded({ extended: false }));\n\n// Serve PWA static files\napp.use(express.static('public'));\n\n// Session configuration\napp.use((session as any)({\n  secret: process.env.SESSION_SECRET || 'temple-donation-secret-key-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: false, // Set to true in production with HTTPS\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      console.log(`${new Date().toLocaleTimeString()} [express] ${logLine}`);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Register PostgreSQL routes\n  registerRoutes(app);\n  \n  const server = createServer(app);\n  \n  console.log(`${new Date().toLocaleTimeString()} [express] ✓ PostgreSQL Database Connected - Data will be persistent`);\n\n  app.use((err: any, _req: any, res: any, _next: any) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    console.error(err);\n  });\n\n  // Serve static files from dist/public if available, otherwise use current setup\n  const distPath = path.resolve(process.cwd(), \"dist/public\");\n  \n  try {\n    // Try to serve static files from build directory\n    app.use(express.static(distPath));\n    app.use(\"*\", (_req, res) => {\n      res.sendFile(path.resolve(distPath, \"index.html\"));\n    });\n    console.log(`${new Date().toLocaleTimeString()} [express] ✓ Serving static files from ${distPath}`);\n  } catch (error) {\n    // Fallback to development mode\n    console.log(`${new Date().toLocaleTimeString()} [express] ⚠ Static files not found, running in development mode`);\n    app.get(\"*\", (_req, res) => {\n      res.send(`\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <title>Temple Donation System</title>\n          </head>\n          <body>\n            <div id=\"root\">Loading...</div>\n            <script>\n              window.location.href = '/api/health';\n            </script>\n          </body>\n        </html>\n      `);\n    });\n  }\n\n  // Use PORT environment variable or default to 5000\n  const port = process.env.PORT ? parseInt(process.env.PORT) : 5000;\n  \n  // Windows compatible: use localhost and no reusePort  \n  server.listen(port, '0.0.0.0', () => {\n    console.log(`${new Date().toLocaleTimeString()} [express] serving on localhost:${port}`);\n  });\n})();\n","size_bytes":3840},"server/mongodb.ts":{"content":"import { MongoClient, Db, Collection } from 'mongodb';\nimport mongoose from 'mongoose';\n\n// MongoDB connection string - can use MongoDB Atlas or local MongoDB\n// Note: DATABASE_URL is PostgreSQL, use MONGODB_URI for MongoDB\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/temple-donations';\n\nlet db: Db;\nlet client: MongoClient;\n\nexport async function connectMongoDB(): Promise<Db> {\n  try {\n    if (db) {\n      return db;\n    }\n\n    // Connect using mongoose for easier schema management\n    await mongoose.connect(MONGODB_URI);\n    console.log('Connected to MongoDB successfully');\n\n    // Also create native MongoDB client for direct operations if needed\n    client = new MongoClient(MONGODB_URI);\n    await client.connect();\n    db = client.db();\n\n    return db;\n  } catch (error) {\n    console.error('MongoDB connection error:', error);\n    throw error;\n  }\n}\n\nexport async function disconnectMongoDB(): Promise<void> {\n  try {\n    await mongoose.disconnect();\n    if (client) {\n      await client.close();\n    }\n    console.log('Disconnected from MongoDB');\n  } catch (error) {\n    console.error('MongoDB disconnect error:', error);\n  }\n}\n\nexport function getDB(): Db {\n  if (!db) {\n    throw new Error('Database not connected. Call connectMongoDB() first.');\n  }\n  return db;\n}","size_bytes":1310},"server/routes-mongodb.ts":{"content":"// Removed TypeScript imports - using JavaScript\nimport { createServer } from \"http\";\nimport multer from \"multer\";\nimport * as XLSX from 'xlsx';\nimport csv from 'csv-parser';\nimport { Readable } from 'stream';\nimport { storage } from \"./storage-mongodb\";\nimport { validateAdminCredentials, changeAdminCredentials, validatePasswordStrength } from \"./admin-credentials\";\nimport { insertDonationSchema } from \"@shared/mongodb-schema\";\n\nconst requireAuth = (req: any, res: any, next: any) => {\n  interface SessionData {\n    isAuthenticated?: boolean;\n    username?: string;\n    role?: string;\n  }\n\n  const session = req.session as SessionData;\n  \n  if (!session.isAuthenticated) {\n    return res.status(401).json({ error: \"Authentication required\" });\n  }\n  next();\n};\n\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB limit\n  fileFilter: (req, file, cb) => {\n    const validMimeTypes = [\n      'text/csv',\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    ];\n    const validExtensions = ['.csv', '.xlsx', '.xls'];\n    \n    if (validMimeTypes.includes(file.mimetype) || \n        validExtensions.some(ext => file.originalname.toLowerCase().endsWith(ext))) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only CSV and Excel files are allowed'));\n    }\n  }\n});\n\nexport async function registerMongoDBRoutes(app: any) {\n  // Admin authentication routes (optimized for speed)\n  app.post(\"/api/auth/login\", async (req: any, res: any) => {\n    const start = Date.now();\n    try {\n      const { username, password } = req.body;\n      \n      // Fast credential validation\n      const admin = validateAdminCredentials(username, password);\n      if (admin) {\n        req.session.isAuthenticated = true;\n        req.session.username = username;\n        req.session.role = admin.role;\n        \n        // Save session immediately for faster response\n        req.session.save((err: any) => {\n          if (err) {\n            console.error('Session save error:', err);\n          }\n        });\n        \n        const duration = Date.now() - start;\n        console.log(`Login processed in ${duration}ms`);\n        \n        // Fast response with cache headers\n        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n        res.json({ \n          success: true, \n          message: \"Login successful\",\n          role: admin.role \n        });\n      } else {\n        res.status(401).json({ error: \"Invalid credentials\" });\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ error: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req: any, res: any) => {\n    req.session.destroy((err: any) => {\n      if (err) {\n        return res.status(500).json({ error: \"Logout failed\" });\n      }\n      res.clearCookie('connect.sid');\n      res.json({ success: true, message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/status\", (req: any, res: any) => {\n    const session = req.session;\n    \n    // Fast auth status with caching for better performance\n    res.setHeader('Cache-Control', 'private, max-age=5'); // 5 second cache\n    res.json({\n      isAuthenticated: !!session.isAuthenticated,\n      username: session.username || null,\n      role: session.role || null\n    });\n  });\n\n  // Change admin credentials\n  app.post(\"/api/auth/change-credentials\", requireAuth, async (req: any, res: any) => {\n    try {\n      const { currentPassword, newUsername, newPassword, confirmPassword } = req.body;\n      \n      // Validate input\n      if (!currentPassword || !newUsername || !newPassword || !confirmPassword) {\n        return res.status(400).json({ error: \"All fields are required\" });\n      }\n      \n      if (newPassword !== confirmPassword) {\n        return res.status(400).json({ error: \"New password and confirm password do not match\" });\n      }\n      \n      // Validate current password\n      const currentUsername = req.session?.username;\n      if (!currentUsername) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n      \n      const admin = validateAdminCredentials(currentUsername, currentPassword);\n      if (!admin) {\n        return res.status(401).json({ error: \"Current password is incorrect\" });\n      }\n      \n      // Validate new password strength\n      const passwordValidation = validatePasswordStrength(newPassword);\n      if (!passwordValidation.isValid) {\n        return res.status(400).json({ \n          error: \"Password does not meet security requirements\",\n          details: passwordValidation.errors\n        });\n      }\n      \n      // Change credentials\n      const success = changeAdminCredentials(currentUsername, newUsername, newPassword);\n      if (!success) {\n        return res.status(500).json({ error: \"Failed to update credentials\" });\n      }\n      \n      // Update session with new username\n      req.session.username = newUsername;\n      req.session.save((err: any) => {\n        if (err) {\n          console.error('Session save error after credential change:', err);\n        }\n      });\n      \n      res.json({ \n        success: true, \n        message: \"Credentials updated successfully! Please use your new credentials for future logins.\"\n      });\n    } catch (error) {\n      console.error('Change credentials error:', error);\n      res.status(500).json({ \n        error: (error as Error).message || \"Failed to change credentials\"\n      });\n    }\n  });\n\n  // Export donations as CSV (must be before /:id route)\n  app.get(\"/api/donations/export\", requireAuth, async (req: any, res: any) => {\n    try {\n      const donations = await storage.getAllDonations();\n      \n      // Create CSV content\n      const headers = ['S.No', 'Receipt No', 'Name', 'Community', 'Location', 'Address', 'Phone', 'Amount', 'Payment Mode', 'Inscription', 'Date'];\n      const csvContent = [\n        headers.join(','),\n        ...donations.map((donation, index) => [\n          index + 1,\n          donation.receiptNo,\n          `\"${donation.name}\"`,\n          `\"${donation.community || ''}\"`,\n          `\"${donation.location || ''}\"`,\n          `\"${(donation as any).address || ''}\"`,\n          donation.phone,\n          donation.amount,\n          donation.paymentMode,\n          donation.inscription ? 'Yes' : 'No',\n          new Date(donation.createdAt).toLocaleDateString('en-GB')\n        ].join(','))\n      ].join('\\n');\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=donations.csv');\n      res.send(csvContent);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to export donations\" });\n    }\n  });\n\n  // Import donations from CSV or Excel (protected admin route)\n  app.post(\"/api/donations/import\", requireAuth, upload.single('file'), async (req: any, res: any) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ \n          success: false, \n          message: \"No file uploaded\" \n        });\n      }\n\n      const fileName = req.file.originalname.toLowerCase();\n      let records: any[] = [];\n\n      // Parse CSV files\n      if (fileName.endsWith('.csv')) {\n        const csvString = req.file.buffer.toString('utf-8');\n        const lines = csvString.split('\\n').filter((line: string) => line.trim());\n        \n        if (lines.length < 2) {\n          return res.status(400).json({\n            success: false,\n            message: \"CSV file must contain headers and at least one data row\"\n          });\n        }\n\n        const headers = lines[0].split(',').map((h: string) => h.replace(/\"/g, '').trim());\n        console.log('CSV Headers found:', headers);\n\n        for (let i = 1; i < lines.length; i++) {\n          const values = lines[i].split(',').map((v: string) => v.replace(/\"/g, '').trim());\n          if (values.every((v: string) => !v)) continue;\n\n          const record: any = {};\n          headers.forEach((header: string, index: number) => {\n            const cleanHeader = header.replace(/[\"\\s\\.]/g, '').toLowerCase();\n            record[cleanHeader] = values[index] || '';\n          });\n          \n          records.push(record);\n        }\n      }\n      // Parse Excel files\n      else if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {\n        const workbook = XLSX.read(req.file.buffer, { type: 'buffer' });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n\n        if (jsonData.length < 2) {\n          return res.status(400).json({\n            success: false,\n            message: \"Excel file must contain headers and at least one data row\"\n          });\n        }\n\n        const headers = (jsonData[0] as any[]).map(h => String(h || '').trim());\n        console.log('Excel Headers found:', headers);\n\n        // Process each Excel data row\n        for (let i = 1; i < jsonData.length; i++) {\n          const row = jsonData[i] as any[];\n          if (!row || row.every(cell => !cell)) continue;\n\n          const record: any = {};\n          headers.forEach((header: string, index: number) => {\n            const cleanHeader = header.replace(/[\"\\s\\.]/g, '').toLowerCase();\n            record[cleanHeader] = String(row[index] || '').trim();\n          });\n          \n          records.push(record);\n        }\n      } else {\n        return res.status(400).json({\n          success: false,\n          message: \"Unsupported file format. Please upload CSV or Excel files.\"\n        });\n      }\n\n      console.log(`Processing ${records.length} records from ${fileName}`);\n\n      // Process and validate each record\n      let successCount = 0;\n      let failureCount = 0;\n      const errors: string[] = [];\n\n      for (const [index, record] of records.entries()) {\n        try {\n          // Map flexible field names\n          const donation: any = {\n            receiptNo: record.receiptno || record.receipt || record.receiptNumber || '',\n            name: record.name || record.donorname || '',\n            phone: record.phone || record.phonenumber || record.mobile || '',\n            community: record.community || record.kulam || record.caste || 'any',\n            location: record.location || record.place || record.city || '',\n            address: record.address || record.fulladdress || '',\n            amount: 0,\n            paymentMode: 'cash',\n            inscription: false,\n            donationDate: null\n          };\n\n          // Validate and convert amount\n          const amountStr = String(record.amount || record.donationamount || '0').replace(/[₹,]/g, '');\n          donation.amount = parseFloat(amountStr) || 0;\n\n          if (!donation.receiptNo || !donation.name || !donation.phone || donation.amount <= 0) {\n            errors.push(`Row ${index + 1}: Missing required fields (Receipt No, Name, Phone, Amount)`);\n            failureCount++;\n            continue;\n          }\n\n          // Validate phone number\n          const phoneStr = String(donation.phone).replace(/\\D/g, '');\n          if (phoneStr.length !== 10) {\n            errors.push(`Row ${index + 1}: Phone number must be exactly 10 digits, found: ${donation.phone}`);\n            failureCount++;\n            continue;\n          }\n          donation.phone = phoneStr;\n\n          // Normalize community\n          const communityMap: { [key: string]: string } = {\n            'any': 'any', 'payiran': 'payiran', 'chozhan': 'chozhan', \n            'pandiyan': 'pandiyan', 'othaalan': 'othaalan', 'vizhiyan': 'vizhiyan',\n            'aadai': 'aadai', 'aavan': 'aavan', 'odhaalan': 'odhaalan', 'semban': 'semban'\n          };\n          \n          const normalizedCommunity = communityMap[donation.community.toLowerCase()] || 'any';\n          donation.community = normalizedCommunity;\n\n          // Normalize payment mode\n          const paymentModeMap: { [key: string]: string } = {\n            'cash': 'cash', 'card': 'card', 'upi': 'upi', \n            'banktransfer': 'bankTransfer', 'bank': 'bankTransfer',\n            'cheque': 'cheque', 'check': 'cheque'\n          };\n          \n          const paymentModeStr = String(record.paymentmode || record.payment || 'cash').toLowerCase().replace(/\\s/g, '');\n          donation.paymentMode = paymentModeMap[paymentModeStr] || 'cash';\n\n          // Handle inscription\n          const inscriptionStr = String(record.inscription || record.engraving || 'no').toLowerCase();\n          donation.inscription = inscriptionStr === 'yes' || inscriptionStr === 'true' || inscriptionStr === '1';\n\n          // Parse date if provided - Enhanced date handling\n          if (record.date || record.donationdate) {\n            const dateStr = String(record.date || record.donationdate).trim();\n            console.log(`Processing date: \"${dateStr}\" for row ${index + 1}`);\n            \n            if (dateStr && dateStr !== '' && dateStr !== 'undefined' && dateStr !== 'null') {\n              // Handle Excel serial date numbers\n              if (/^\\d+(\\.\\d+)?$/.test(dateStr)) {\n                const excelDate = parseFloat(dateStr);\n                if (excelDate > 25569) { // Valid Excel date (after 1900)\n                  const jsDate = new Date((excelDate - 25569) * 86400 * 1000);\n                  donation.donationDate = jsDate;\n                  console.log(`Converted Excel serial ${excelDate} to date: ${jsDate.toISOString()}`);\n                }\n              } else {\n                // Handle multiple date formats\n                let parsedDate = null;\n                \n                // Parse date with intelligent format detection\n                const dateRegex = /^(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{4})$/;\n                const dateMatch = dateStr.match(dateRegex);\n                if (dateMatch) {\n                  const [, first, second, year] = dateMatch;\n                  const firstNum = parseInt(first);\n                  const secondNum = parseInt(second);\n                  const yearNum = parseInt(year);\n                  \n                  let day, month;\n                  \n                  // Smart detection: If first number > 12, it must be day (DD/MM format)\n                  if (firstNum > 12) {\n                    day = firstNum;\n                    month = secondNum;\n                    console.log(`Detected DD/MM format: ${day}/${month}/${yearNum}`);\n                  }\n                  // If second number > 12, it must be day (MM/DD format)\n                  else if (secondNum > 12) {\n                    day = secondNum;\n                    month = firstNum;\n                    console.log(`Detected MM/DD format: ${month}/${day}/${yearNum}`);\n                  }\n                  // Both numbers <= 12: Use DD/MM as default for Indian format\n                  else {\n                    day = firstNum;\n                    month = secondNum;\n                    console.log(`Using DD/MM default: ${day}/${month}/${yearNum}`);\n                  }\n                  \n                  // Validate day and month ranges\n                  if (day >= 1 && day <= 31 && month >= 1 && month <= 12) {\n                    parsedDate = new Date(yearNum, month - 1, day);\n                    console.log(`Final parsed date: Day=${day}, Month=${month}, Year=${yearNum} -> ${parsedDate.toISOString()}`);\n                  } else {\n                    console.log(`Invalid date values: Day=${day}, Month=${month}, Year=${yearNum}`);\n                  }\n                }\n                \n                // Try YYYY-MM-DD format as secondary option\n                if (!parsedDate || isNaN(parsedDate.getTime())) {\n                  const yyyymmddRegex = /^(\\d{4})[\\/\\-](\\d{1,2})[\\/\\-](\\d{1,2})$/;\n                  const yyyymmddMatch = dateStr.match(yyyymmddRegex);\n                  if (yyyymmddMatch) {\n                    const [, year, month, day] = yyyymmddMatch;\n                    parsedDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));\n                    console.log(`Parsed as YYYY-MM-DD: ${year}/${month}/${day} -> ${parsedDate.toISOString()}`);\n                  }\n                }\n                \n\n                \n                if (parsedDate && !isNaN(parsedDate.getTime())) {\n                  donation.donationDate = parsedDate;\n                  console.log(`Parsed date \"${dateStr}\" to: ${parsedDate.toISOString()}`);\n                } else {\n                  console.log(`Failed to parse date: \"${dateStr}\" for row ${index + 1}`);\n                }\n              }\n            }\n          }\n\n          // Create donation in MongoDB\n          await storage.createDonation(donation);\n          successCount++;\n\n        } catch (error: any) {\n          console.error(`Error processing row ${index + 1}:`, error);\n          if (error.message.includes('already exists')) {\n            errors.push(`Row ${index + 1}: Receipt number ${record.receiptno || 'unknown'} is duplicate`);\n          } else {\n            errors.push(`Row ${index + 1}: ${error.message}`);\n          }\n          failureCount++;\n        }\n      }\n\n      res.json({\n        success: successCount > 0,\n        totalRecords: records.length,\n        successCount,\n        failureCount,\n        errors: errors.slice(0, 20)\n      });\n\n    } catch (error: any) {\n      console.error('Import error:', error);\n      res.status(500).json({ \n        success: false, \n        message: \"Failed to import data: \" + error.message,\n        errors: [error.message]\n      });\n    }\n  });\n\n  // Get all donations with optional filters\n  app.get(\"/api/donations\", async (req: any, res: any) => {\n    try {\n      const { dateRange, community, paymentMode, amountRange } = req.query;\n      \n      const donations = await storage.getDonationsByFilters({\n        dateRange: dateRange as string,\n        community: community as string,\n        paymentMode: paymentMode as string,\n        amountRange: amountRange as string,\n      });\n      \n      res.json(donations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch donations\" });\n    }\n  });\n\n  // Check if receipt number exists (for duplicate validation)\n  app.get(\"/api/donations/check-receipt/:receiptNo\", async (req: any, res: any) => {\n    try {\n      const receiptNo = req.params.receiptNo;\n      const donations = await storage.getAllDonations();\n      const exists = donations.some(donation => donation.receiptNo === receiptNo);\n      res.json({ exists });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to check receipt number\" });\n    }\n  });\n\n  // Get donation by ID\n  app.get(\"/api/donations/:id\", async (req: any, res: any) => {\n    try {\n      const donation = await storage.getDonationById(req.params.id);\n      if (!donation) {\n        return res.status(404).json({ message: \"Donation not found\" });\n      }\n      res.json(donation);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch donation\" });\n    }\n  });\n\n  // Create new donation\n  app.post(\"/api/donations\", async (req: any, res: any) => {\n    try {\n      const donation = await storage.createDonation(req.body);\n      res.status(201).json(donation);\n    } catch (error: any) {\n      console.error('Create donation error:', error);\n      res.status(400).json({ message: error.message || \"Failed to create donation\" });\n    }\n  });\n\n  // Update donation\n  app.put(\"/api/donations/:id\", requireAuth, async (req: any, res: any) => {\n    try {\n      const donation = await storage.updateDonation(req.params.id, req.body);\n      if (!donation) {\n        return res.status(404).json({ message: \"Donation not found\" });\n      }\n      res.json(donation);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update donation\" });\n    }\n  });\n\n  // Delete all donations (protected admin route) - MUST come before the :id route\n  app.delete(\"/api/donations/all\", requireAuth, async (req: any, res: any) => {\n    try {\n      const success = await storage.deleteAllDonations();\n      \n      if (success) {\n        res.json({ message: \"All donations deleted successfully\" });\n      } else {\n        res.status(500).json({ message: \"Failed to delete all donations\" });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete all donations\" });\n    }\n  });\n\n  // Delete donation\n  app.delete(\"/api/donations/:id\", requireAuth, async (req: any, res: any) => {\n    try {\n      const success = await storage.deleteDonation(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Donation not found\" });\n      }\n      res.json({ message: \"Donation deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete donation\" });\n    }\n  });\n\n  // Donor search routes\n  app.get(\"/api/donors/search\", async (req: any, res: any) => {\n    try {\n      const { query, community } = req.query;\n      if (!query || typeof query !== 'string') {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n      \n      const donors = await storage.searchDonors(query, community as string);\n      res.json(donors);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search donors\" });\n    }\n  });\n\n  app.get(\"/api/donors/:phone\", async (req: any, res: any) => {\n    try {\n      const donor = await storage.getDonorByPhone(req.params.phone);\n      if (!donor) {\n        return res.status(404).json({ message: \"Donor not found\" });\n      }\n      res.json(donor);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch donor\" });\n    }\n  });\n\n  // Dashboard stats (optimized for fast loading)\n  app.get(\"/api/dashboard/stats\", requireAuth, async (req: any, res: any) => {\n    const start = Date.now();\n    try {\n      const { dateRange, startDate, endDate } = req.query;\n      const stats = await storage.getDashboardStats({\n        dateRange: dateRange as string,\n        startDate: startDate as string,\n        endDate: endDate as string\n      });\n      const duration = Date.now() - start;\n      console.log(`Dashboard stats loaded in ${duration}ms`);\n      \n      // Add aggressive cache headers for fastest loading\n      res.setHeader('Cache-Control', 'public, max-age=30, stale-while-revalidate=60');\n      res.setHeader('ETag', `\"dashboard-${Date.now()}\"`);\n      res.json(stats);\n    } catch (error) {\n      console.error('Dashboard stats error:', error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":22637},"server/routes.ts":{"content":"import { Express } from \"express\";\nimport multer from \"multer\";\nimport * as XLSX from 'xlsx';\nimport csv from 'csv-parser';\nimport { Readable } from 'stream';\nimport { storage } from \"./storage\";\nimport { dashboardCache } from \"./cache\";\nimport { validateAdminCredentials, changeAdminCredentials, validatePasswordStrength } from \"./admin-credentials\";\nimport { insertDonationSchema } from \"@shared/schema\";\n\nconst requireAuth = (req: any, res: any, next: any) => {\n  const session = req.session as any;\n  if (!session?.isAuthenticated) {\n    return res.status(401).json({ error: \"Authentication required\" });\n  }\n  next();\n};\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = [\n      'text/csv', \n      'application/csv',\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    ];\n    \n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(null, false);\n    }\n  }\n});\n\nexport function registerRoutes(app: Express) {\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      // Fast authentication with 3-second timeout\n      const authTimeout = setTimeout(() => {\n        return res.status(500).json({ error: \"Authentication timeout\" });\n      }, 3000);\n\n      const admin = validateAdminCredentials(username, password);\n      clearTimeout(authTimeout);\n      \n      if (admin) {\n        (req.session as any).isAuthenticated = true;\n        (req.session as any).username = admin.username;\n        (req.session as any).role = admin.role;\n        \n        // Immediate session save for fast login\n        req.session.save((err: any) => {\n          if (err) {\n            console.error('Session save error:', err);\n          }\n        });\n        \n        res.json({ \n          success: true, \n          message: \"Login successful\", \n          username: admin.username,\n          role: admin.role \n        });\n      } else {\n        res.status(401).json({ error: \"Invalid credentials\" });\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ error: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err: any) => {\n      if (err) {\n        return res.status(500).json({ error: \"Logout failed\" });\n      }\n      res.clearCookie('connect.sid');\n      res.json({ success: true, message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/status\", (req, res) => {\n    const session = req.session as any;\n    \n    // Fast auth status with caching for better performance\n    res.setHeader('Cache-Control', 'private, max-age=5'); // 5 second cache\n    res.json({\n      isAuthenticated: !!session.isAuthenticated,\n      username: session.username || null,\n      role: session.role || null\n    });\n  });\n\n  // Change admin credentials\n  app.post(\"/api/auth/change-credentials\", requireAuth, async (req, res) => {\n    try {\n      console.log('Change credentials request received');\n      const { currentPassword, newUsername, newPassword, confirmPassword } = req.body;\n      \n      // Debug session info\n      const session = req.session as any;\n      console.log('Session info:', { \n        isAuthenticated: session?.isAuthenticated, \n        username: session?.username,\n        sessionID: req.sessionID \n      });\n      \n      // Validate input\n      if (!currentPassword || !newUsername || !newPassword || !confirmPassword) {\n        console.log('Missing required fields');\n        return res.status(400).json({ error: \"All fields are required\" });\n      }\n      \n      if (newPassword !== confirmPassword) {\n        return res.status(400).json({ error: \"New password and confirm password do not match\" });\n      }\n      \n      // Validate current password\n      const currentUsername = (req.session as any)?.username;\n      if (!currentUsername) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n      \n      const admin = validateAdminCredentials(currentUsername, currentPassword);\n      if (!admin) {\n        return res.status(401).json({ error: \"Current password is incorrect\" });\n      }\n      \n      // Validate new password strength\n      const passwordValidation = validatePasswordStrength(newPassword);\n      if (!passwordValidation.isValid) {\n        return res.status(400).json({ \n          error: \"Password does not meet security requirements\",\n          details: passwordValidation.errors\n        });\n      }\n      \n      // Change credentials\n      const success = changeAdminCredentials(currentUsername, newUsername, newPassword);\n      if (!success) {\n        return res.status(500).json({ error: \"Failed to update credentials\" });\n      }\n      \n      // Update session with new username\n      (req.session as any).username = newUsername;\n      req.session.save((err: any) => {\n        if (err) {\n          console.error('Session save error after credential change:', err);\n        }\n      });\n      \n      res.json({ \n        success: true, \n        message: \"Credentials updated successfully! Please use your new credentials for future logins.\"\n      });\n    } catch (error: any) {\n      console.error('Change credentials error:', error);\n      res.status(500).json({ \n        error: error.message || \"Failed to change credentials\"\n      });\n    }\n  });\n\n  // Export donations as CSV (must be before /:id route)\n  app.get(\"/api/donations/export\", requireAuth, async (req, res) => {\n    try {\n      const donations = await storage.getAllDonations();\n      \n      // Create CSV content\n      const headers = ['S.No', 'Receipt No', 'Name', 'Community', 'Location', 'Address', 'Phone', 'Amount', 'Payment Mode', 'Inscription', 'Date'];\n      const csvContent = [\n        headers.join(','),\n        ...donations.map((donation, index) => [\n          index + 1,\n          donation.receiptNo,\n          `\"${donation.name}\"`,\n          `\"${donation.community || ''}\"`,\n          `\"${donation.location || ''}\"`,\n          `\"${(donation as any).address || ''}\"`,\n          donation.phone,\n          donation.amount,\n          donation.paymentMode,\n          donation.inscription ? 'Yes' : 'No',\n          new Date(donation.donationDate || donation.createdAt).toLocaleDateString('en-GB')\n        ].join(','))\n      ].join('\\n');\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=donations.csv');\n      res.send(csvContent);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to export donations\" });\n    }\n  });\n\n  // Import donations from CSV or Excel (protected admin route)\n  app.post(\"/api/donations/import\", requireAuth, upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ \n          success: false, \n          message: \"No file uploaded\" \n        });\n      }\n\n      const fileType = req.file.mimetype;\n      let jsonData: any[] = [];\n\n      if (fileType === 'text/csv' || fileType === 'application/csv') {\n        // Handle CSV files\n        const csvString = req.file.buffer.toString('utf8');\n        const stream = Readable.from([csvString]);\n        \n        const records: any[] = [];\n        await new Promise((resolve, reject) => {\n          stream\n            .pipe(csv())\n            .on('data', (data) => records.push(data))\n            .on('end', resolve)\n            .on('error', reject);\n        });\n        \n        jsonData = records;\n      } else {\n        // Handle Excel files (.xlsx, .xls)\n        const workbook = XLSX.read(req.file.buffer, { type: 'buffer' });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        jsonData = XLSX.utils.sheet_to_json(worksheet);\n      }\n\n      if (!jsonData || jsonData.length === 0) {\n        return res.status(400).json({ \n          success: false, \n          message: \"No data found in file\" \n        });\n      }\n\n      // Process and validate data\n      const results = [];\n      const errors = [];\n\n      for (let i = 0; i < jsonData.length; i++) {\n        const row = jsonData[i];\n        const rowNum = i + 2; // Adding 2 because of 0-based index + header row\n\n        try {\n          // Map flexible headers to our expected format\n          const donation = {\n            receiptNo: String(row['Receipt No'] || row['ReceiptNo'] || row['receipt_no'] || row['Receipt Number'] || '').trim(),\n            name: String(row['Name'] || row['Donor Name'] || row['name'] || '').trim(),\n            phone: String(row['Phone'] || row['Phone Number'] || row['phone'] || row['Mobile'] || '').trim(),\n            community: String(row['Community'] || row['Kulam'] || row['community'] || row['kulam'] || '').trim(),\n            location: String(row['Location'] || row['Place'] || row['location'] || row['place'] || '').trim(),\n            address: String(row['Address'] || row['address'] || '').trim(),\n            amount: parseFloat(String(row['Amount'] || row['Donation Amount'] || row['amount'] || '0').replace(/[^\\d.-]/g, '')),\n            paymentMode: String(row['Payment Mode'] || row['PaymentMode'] || row['payment_mode'] || row['Mode'] || 'cash').trim(),\n            inscription: String(row['Inscription'] || row['inscription'] || 'No').toLowerCase().includes('yes')\n          };\n\n          // Enhanced date parsing with multiple format support\n          let donationDate = new Date();\n          const dateStr = String(row['Date'] || row['Donation Date'] || row['date'] || '').trim();\n          \n          if (dateStr) {\n            // Handle Excel serial dates\n            if (!isNaN(Number(dateStr)) && Number(dateStr) > 40000) {\n              const excelDate = XLSX.SSF.parse_date_code(Number(dateStr));\n              donationDate = new Date(excelDate.y, excelDate.m - 1, excelDate.d);\n            } else {\n              // Parse various date formats with DD/MM/YYYY priority\n              const cleanDateStr = dateStr.replace(/[^\\d\\/\\-]/g, '');\n              \n              if (cleanDateStr.includes('/')) {\n                const parts = cleanDateStr.split('/');\n                if (parts.length === 3) {\n                  // Intelligent date parsing - prioritize DD/MM/YYYY format\n                  let day, month, year;\n                  \n                  if (parts[2].length === 4) {\n                    // Format: DD/MM/YYYY or MM/DD/YYYY\n                    if (parseInt(parts[0]) > 12) {\n                      // Must be DD/MM/YYYY since first part > 12\n                      day = parseInt(parts[0]);\n                      month = parseInt(parts[1]);\n                    } else if (parseInt(parts[1]) > 12) {\n                      // Must be MM/DD/YYYY since second part > 12\n                      month = parseInt(parts[0]);\n                      day = parseInt(parts[1]);\n                    } else {\n                      // Ambiguous - use DD/MM/YYYY (Indian standard)\n                      day = parseInt(parts[0]);\n                      month = parseInt(parts[1]);\n                    }\n                    year = parseInt(parts[2]);\n                  } else {\n                    // Format: DD/MM/YY or MM/DD/YY\n                    if (parseInt(parts[0]) > 12) {\n                      day = parseInt(parts[0]);\n                      month = parseInt(parts[1]);\n                    } else if (parseInt(parts[1]) > 12) {\n                      month = parseInt(parts[0]);\n                      day = parseInt(parts[1]);\n                    } else {\n                      day = parseInt(parts[0]);\n                      month = parseInt(parts[1]);\n                    }\n                    year = parseInt(parts[2]) + (parseInt(parts[2]) < 50 ? 2000 : 1900);\n                  }\n                  \n                  donationDate = new Date(year, month - 1, day);\n                }\n              } else if (cleanDateStr.includes('-')) {\n                // Handle YYYY-MM-DD format\n                donationDate = new Date(cleanDateStr);\n              }\n            }\n          }\n\n          // Validation\n          const validationErrors = [];\n          \n          if (!donation.receiptNo) validationErrors.push('Receipt number is required');\n          if (!donation.name) validationErrors.push('Name is required');\n          if (!donation.phone) validationErrors.push('Phone number is required');\n          if (!donation.community) validationErrors.push('Community is required');\n          if (!donation.location) validationErrors.push('Location is required');\n          if (!donation.amount || donation.amount <= 0) validationErrors.push('Valid amount is required');\n          if (donation.phone && donation.phone.length !== 10) validationErrors.push('Phone number must be 10 digits');\n\n          // Check for duplicate receipt number\n          const existingDonation = await storage.getDonationsByReceiptNo(donation.receiptNo);\n          if (existingDonation) {\n            validationErrors.push(`Receipt number ${donation.receiptNo} already exists`);\n          }\n\n          if (validationErrors.length > 0) {\n            errors.push(`Row ${rowNum}: ${validationErrors.join(', ')}`);\n            continue;\n          }\n\n          // Create donation with parsed date\n          const donationData = {\n            ...donation,\n            amount: Number(donation.amount)\n          };\n\n          const savedDonation = await storage.createDonation(donationData);\n          results.push(savedDonation);\n\n        } catch (error: any) {\n          console.error(`Error processing row ${rowNum}:`, error);\n          errors.push(`Row ${rowNum}: ${error.message}`);\n        }\n      }\n\n      res.json({\n        success: true,\n        message: `Import completed. ${results.length} donations imported successfully.`,\n        imported: results.length,\n        errors: errors\n      });\n\n    } catch (error: any) {\n      console.error('Import error:', error);\n      res.status(500).json({ \n        success: false, \n        message: \"Failed to import data\",\n        error: error.message \n      });\n    }\n  });\n\n  // Get all donations with optional filters (protected)\n  app.get(\"/api/donations\", requireAuth, async (req, res) => {\n    try {\n      const filters = {\n        dateRange: req.query.dateRange as string,\n        community: req.query.community as string,\n        paymentMode: req.query.paymentMode as string,\n        amountRange: req.query.amountRange as string,\n        startDate: req.query.startDate as string,\n        endDate: req.query.endDate as string,\n      };\n\n      // Check if any filters are applied\n      const hasFilters = Object.values(filters).some(filter => \n        filter && filter !== 'all' && filter !== 'any'\n      );\n\n      let donations;\n      if (hasFilters) {\n        donations = await storage.getDonationsByFilters(filters);\n      } else {\n        donations = await storage.getAllDonations();\n      }\n\n      res.json(donations);\n    } catch (error) {\n      console.error('Error fetching donations:', error);\n      res.status(500).json({ message: \"Failed to fetch donations\" });\n    }\n  });\n\n  // Check receipt number for duplicates (public - for donation form validation)\n  app.get(\"/api/donations/check-receipt/:receiptNo\", async (req, res) => {\n    try {\n      const receiptNo = req.params.receiptNo;\n      const existingDonation = await storage.getDonationsByReceiptNo(receiptNo);\n      \n      res.json({ \n        exists: !!existingDonation,\n        receiptNo: receiptNo \n      });\n    } catch (error) {\n      console.error('Error checking receipt number:', error);\n      res.status(500).json({ \n        error: \"Failed to check receipt number\",\n        exists: false\n      });\n    }\n  });\n\n  // Create new donation (public - no auth required for donation form)\n  app.post(\"/api/donations\", async (req, res) => {\n    try {\n      const validatedData = insertDonationSchema.parse(req.body);\n      \n      // Check for duplicate receipt number\n      const existingDonation = await storage.getDonationsByReceiptNo(validatedData.receiptNo);\n      if (existingDonation) {\n        return res.status(400).json({ \n          error: \"Duplicate receipt number\", \n          message: `Receipt number ${validatedData.receiptNo} already exists` \n        });\n      }\n      \n      const donation = await storage.createDonation(validatedData);\n      \n      // Invalidate dashboard cache when new donation is created\n      dashboardCache.invalidatePattern('dashboard-stats');\n      \n      res.status(201).json(donation);\n    } catch (error: any) {\n      console.error('Create donation error:', error);\n      if (error.name === 'ZodError') {\n        res.status(400).json({ message: \"Invalid donation data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create donation\" });\n      }\n    }\n  });\n\n  // Get donation by ID (protected)\n  app.get(\"/api/donations/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const donation = await storage.getDonationById(id);\n      \n      if (!donation) {\n        return res.status(404).json({ message: \"Donation not found\" });\n      }\n      \n      res.json(donation);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch donation\" });\n    }\n  });\n\n  // Search donations by phone (protected)\n  app.get(\"/api/donations/search/:phone\", requireAuth, async (req, res) => {\n    try {\n      const phone = req.params.phone;\n      const donations = await storage.getDonationsByPhone(phone);\n      res.json(donations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search donations\" });\n    }\n  });\n\n  // Delete all donations (protected superadmin only)\n  app.delete(\"/api/donations/delete-all\", requireAuth, async (req, res) => {\n    try {\n      const session = req.session as any;\n      if (session.role !== 'superadmin') {\n        return res.status(403).json({ error: \"Insufficient permissions\" });\n      }\n      \n      await storage.deleteAllDonations();\n      res.json({ success: true, message: \"All donations deleted successfully\" });\n    } catch (error) {\n      console.error('Delete all donations error:', error);\n      res.status(500).json({ error: \"Failed to delete donations\" });\n    }\n  });\n\n  // Get next receipt number\n  app.get(\"/api/receipt-number/next\", requireAuth, async (req, res) => {\n    try {\n      const currentYear = new Date().getFullYear();\n      const nextReceiptNumber = await storage.getNextReceiptNumber(currentYear);\n      res.json({ receiptNumber: nextReceiptNumber });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate receipt number\" });\n    }\n  });\n\n  // Dashboard analytics (protected) - optimized with caching\n  app.get(\"/api/dashboard/stats\", requireAuth, async (req, res) => {\n    const startTime = Date.now();\n    \n    try {\n      const dateRange = req.query.dateRange as string || 'all';\n      const startDateParam = req.query.startDate as string;\n      const endDateParam = req.query.endDate as string;\n      \n      // Generate cache key\n      const cacheKey = `dashboard-stats-${dateRange}-${startDateParam || ''}-${endDateParam || ''}`;\n      \n      // Check cache first (disabled for debugging)\n      // const cached = dashboardCache.get(cacheKey);\n      // if (cached) {\n      //   res.setHeader('X-Cache', 'HIT');\n      //   res.setHeader('Cache-Control', 'private, max-age=120');\n      //   return res.json(cached);\n      // }\n\n      // Parse date range from query parameters\n      let startDate: Date | undefined;\n      let endDate: Date | undefined;\n      const now = new Date();\n\n      // Handle different date ranges efficiently\n      if (dateRange === \"custom\" && startDateParam && endDateParam) {\n        startDate = new Date(startDateParam);\n        endDate = new Date(endDateParam);\n        endDate.setHours(23, 59, 59, 999);\n      } else if (dateRange && dateRange !== \"all\") {\n        switch (dateRange) {\n          case 'today':\n            startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59, 999);\n            break;\n          case 'week':\n            startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n            endDate = now;\n            break;\n          case 'month':\n            startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n            endDate = now;\n            break;\n          case 'thisyear':\n            startDate = new Date(now.getFullYear(), 0, 1); // January 1st of current year\n            endDate = new Date(now.getFullYear(), 11, 31, 23, 59, 59, 999); // December 31st of current year\n            break;\n          case 'lastyear':\n            startDate = new Date(now.getFullYear() - 1, 0, 1); // January 1st of last year\n            endDate = new Date(now.getFullYear() - 1, 11, 31, 23, 59, 59, 999); // December 31st of last year\n            break;\n          case 'thismonth':\n            startDate = new Date(now.getFullYear(), now.getMonth(), 1); // First day of current month\n            endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999); // Last day of current month\n            break;\n          case 'lastmonth':\n            const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n            startDate = new Date(lastMonth.getFullYear(), lastMonth.getMonth(), 1); // First day of last month\n            endDate = new Date(lastMonth.getFullYear(), lastMonth.getMonth() + 1, 0, 23, 59, 59, 999); // Last day of last month\n            break;\n        }\n      }\n\n      // Parallel execution for better performance\n      const [stats, paymentModeDistribution, recentDonations] = await Promise.all([\n        storage.getDashboardStats(startDate, endDate),\n        storage.getPaymentModeDistribution(startDate, endDate),\n        storage.getRecentDonations(5, startDate, endDate)\n      ]);\n\n      const responseData = {\n        totalCollections: stats.totalCollection,\n        totalDonors: stats.totalDonors,\n        totalDonations: stats.totalDonations,\n        avgDonation: stats.averageDonation,\n        paymentModeDistribution: paymentModeDistribution.map(pm => ({\n          mode: pm.paymentMode,\n          count: pm.count,\n          percentage: stats.totalDonations > 0 ? (pm.count / stats.totalDonations) * 100 : 0\n        })),\n        recentDonations: recentDonations.map(d => ({\n          name: d.name,\n          amount: Number(d.amount),\n          paymentMode: d.paymentMode,\n          donationDate: d.donationDate ? d.donationDate.toISOString() : null,\n          createdAt: d.createdAt.toISOString()\n        }))\n      };\n\n      // Cache the response for 2 minutes (disable for debugging)\n      // dashboardCache.set(cacheKey, responseData, 120);\n      \n      const duration = Date.now() - startTime;\n      \n      // Set caching headers\n      res.setHeader('X-Cache', 'MISS');\n      res.setHeader('Cache-Control', 'private, max-age=120, stale-while-revalidate=60');\n      res.setHeader('X-Response-Time', `${duration}ms`);\n      \n      res.json(responseData);\n    } catch (error) {\n      console.error('Dashboard analytics error:', error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  // Clear dashboard cache (protected)\n  app.delete(\"/api/dashboard/cache\", requireAuth, async (req, res) => {\n    try {\n      dashboardCache.clear();\n      res.json({ success: true, message: \"Dashboard cache cleared\" });\n    } catch (error) {\n      console.error('Cache clear error:', error);\n      res.status(500).json({ error: \"Failed to clear cache\" });\n    }\n  });\n\n  // Dashboard export (protected)\n  app.get(\"/api/dashboard/export\", requireAuth, async (req, res) => {\n    try {\n      const dateRange = req.query.dateRange as string || 'all';\n      const startDateParam = req.query.startDate as string;\n      const endDateParam = req.query.endDate as string;\n      \n      // Parse date range (same logic as dashboard stats)\n      let startDate: Date | undefined;\n      let endDate: Date | undefined;\n      const now = new Date();\n\n      if (dateRange === \"custom\" && startDateParam && endDateParam) {\n        startDate = new Date(startDateParam);\n        endDate = new Date(endDateParam);\n        endDate.setHours(23, 59, 59, 999);\n      } else if (dateRange && dateRange !== \"all\") {\n        switch (dateRange) {\n          case 'today':\n            startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59, 999);\n            break;\n          case 'week':\n            startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n            endDate = now;\n            break;\n          case 'month':\n            startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n            endDate = now;\n            break;\n          case 'thisyear':\n            startDate = new Date(now.getFullYear(), 0, 1);\n            endDate = new Date(now.getFullYear(), 11, 31, 23, 59, 59, 999);\n            break;\n          case 'lastyear':\n            startDate = new Date(now.getFullYear() - 1, 0, 1);\n            endDate = new Date(now.getFullYear() - 1, 11, 31, 23, 59, 59, 999);\n            break;\n          case 'thismonth':\n            startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n            endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);\n            break;\n          case 'lastmonth':\n            const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n            startDate = new Date(lastMonth.getFullYear(), lastMonth.getMonth(), 1);\n            endDate = new Date(lastMonth.getFullYear(), lastMonth.getMonth() + 1, 0, 23, 59, 59, 999);\n            break;\n        }\n      }\n\n      // Get filtered donations\n      let donations;\n      if (startDate && endDate) {\n        const filters = {\n          dateRange: dateRange,\n          startDate: startDateParam,\n          endDate: endDateParam,\n          community: 'all',\n          paymentMode: 'all',\n          amountRange: 'all'\n        };\n        donations = await storage.getDonationsByFilters(filters);\n      } else {\n        donations = await storage.getAllDonations();\n      }\n      \n      // Create CSV content\n      const headers = ['S.No', 'Receipt No', 'Name', 'Community', 'Location', 'Address', 'Phone', 'Amount', 'Payment Mode', 'Inscription', 'Date'];\n      const csvContent = [\n        headers.join(','),\n        ...donations.map((donation, index) => [\n          index + 1,\n          donation.receiptNo,\n          `\"${donation.name}\"`,\n          `\"${donation.community || ''}\"`,\n          `\"${donation.location || ''}\"`,\n          `\"${(donation as any).address || ''}\"`,\n          donation.phone,\n          donation.amount,\n          donation.paymentMode,\n          donation.inscription ? 'Yes' : 'No',\n          new Date(donation.donationDate || donation.createdAt).toLocaleDateString('en-GB')\n        ].join(','))\n      ].join('\\n');\n      \n      // Generate filename with date range\n      let filename = 'temple-donations';\n      if (dateRange !== 'all') {\n        filename += `-${dateRange}`;\n        if (dateRange === 'custom' && startDateParam && endDateParam) {\n          filename += `-${startDateParam}-to-${endDateParam}`;\n        }\n      }\n      filename += '.csv';\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=${filename}`);\n      res.send(csvContent);\n    } catch (error) {\n      console.error('Dashboard export error:', error);\n      res.status(500).json({ message: \"Failed to export dashboard data\" });\n    }\n  });\n\n  // Legacy endpoint for backward compatibility\n  app.get(\"/api/analytics/dashboard\", requireAuth, async (req, res) => {\n    res.redirect(308, '/api/dashboard/stats?' + new URLSearchParams(req.query as any).toString());\n  });\n\n  // Donor search routes\n  app.get(\"/api/donors/search\", async (req, res) => {\n    try {\n      const { query, community } = req.query;\n      if (!query || typeof query !== 'string') {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n      \n      const donors = await storage.searchDonors(query, community as string);\n      res.json(donors);\n    } catch (error) {\n      console.error('Error searching donors:', error);\n      res.status(500).json({ message: \"Failed to search donors\" });\n    }\n  });\n\n  app.get(\"/api/donors/:phone\", async (req, res) => {\n    try {\n      const donor = await storage.getDonorByPhone(req.params.phone);\n      if (!donor) {\n        return res.status(404).json({ message: \"Donor not found\" });\n      }\n      res.json(donor);\n    } catch (error) {\n      console.error('Error fetching donor by phone:', error);\n      res.status(500).json({ message: \"Failed to fetch donor\" });\n    }\n  });\n\n  // Change admin credentials (protected)\n  app.post(\"/api/auth/change-credentials\", requireAuth, async (req, res) => {\n    try {\n      const { currentPassword, newUsername, newPassword } = req.body;\n      \n      // Validate input\n      if (!currentPassword || !newUsername || !newPassword) {\n        return res.status(400).json({ \n          error: \"Missing required fields\",\n          required: [\"currentPassword\", \"newUsername\", \"newPassword\"]\n        });\n      }\n\n      // Get current session user\n      const currentUser = (req.session as any).user;\n      if (!currentUser) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      // Verify current password\n      const { getAdminUser } = await import(\"./admin-credentials\");\n      const userCred = getAdminUser(currentUser.username);\n      \n      if (!userCred || userCred.password !== currentPassword) {\n        return res.status(400).json({ \n          error: \"Current password is incorrect\" \n        });\n      }\n\n      // Basic validation for new credentials\n      if (newUsername.length < 3) {\n        return res.status(400).json({ \n          error: \"Username must be at least 3 characters long\" \n        });\n      }\n      \n      if (newPassword.length < 6) {\n        return res.status(400).json({ \n          error: \"Password must be at least 6 characters long\" \n        });\n      }\n\n      // Update session with new username\n      (req.session as any).user = {\n        username: newUsername,\n        role: userCred.role\n      };\n\n      res.json({ \n        success: true,\n        message: \"Credentials updated successfully\",\n        username: newUsername\n      });\n\n    } catch (error: any) {\n      console.error('Change credentials error:', error);\n      res.status(500).json({ \n        error: \"Failed to change credentials\",\n        message: error.message \n      });\n    }\n  });\n\n  // Google Form webhook endpoint (public - no auth required)\n  app.post(\"/api/google-form-webhook\", async (req, res) => {\n    try {\n      console.log('Google Form webhook received:', req.body);\n      \n      const {\n        receiptNo,\n        name,\n        phone,\n        community,\n        location,\n        amount,\n        paymentMode,\n        inscription,\n        donationDate\n      } = req.body;\n\n      // Basic validation\n      if (!name || !phone || !amount || !receiptNo) {\n        return res.status(400).json({ \n          error: \"Missing required fields\",\n          required: [\"name\", \"phone\", \"amount\", \"receiptNo\"]\n        });\n      }\n\n      // Validate phone number format\n      if (!/^\\d{10}$/.test(phone)) {\n        return res.status(400).json({ \n          error: \"Invalid phone number format. Must be 10 digits.\" \n        });\n      }\n\n      // Check for duplicate receipt number\n      const existingDonation = await storage.getDonationsByReceiptNo(receiptNo);\n      if (existingDonation) {\n        return res.status(400).json({ \n          error: \"Duplicate receipt number\", \n          message: `Receipt number ${receiptNo} already exists` \n        });\n      }\n\n      // Prepare donation data\n      const donationData = {\n        receiptNo: receiptNo.toString(),\n        name: name.trim(),\n        phone: phone.trim(),\n        community: community || 'any',\n        location: location || '',\n        address: '', // Not collected in Google Form\n        amount: amount.toString(),\n        paymentMode: paymentMode || 'cash',\n        inscription: Boolean(inscription)\n      };\n\n      // Validate data against schema\n      const validatedData = insertDonationSchema.parse(donationData);\n      \n      // Create the donation\n      const donation = await storage.createDonation(validatedData);\n      \n      // Invalidate dashboard cache\n      dashboardCache.invalidatePattern('dashboard-stats');\n      \n      console.log('Google Form donation created successfully:', donation.id);\n      \n      res.status(201).json({ \n        success: true,\n        message: \"Donation received successfully from Google Form\",\n        donation: {\n          id: donation.id,\n          receiptNo: donation.receiptNo,\n          name: donation.name,\n          amount: donation.amount\n        }\n      });\n\n    } catch (error: any) {\n      console.error('Google Form webhook error:', error);\n      \n      if (error.name === 'ZodError') {\n        return res.status(400).json({ \n          error: \"Invalid donation data\",\n          details: error.errors \n        });\n      }\n      \n      res.status(500).json({ \n        error: \"Failed to process Google Form submission\",\n        message: error.message \n      });\n    }\n  });\n}","size_bytes":33663},"server/storage-mongodb.ts":{"content":"import { Donation, IDonation } from './models/Donation';\nimport { ReceiptSequence } from './models/ReceiptSequence';\nimport { connectMongoDB } from './mongodb';\nimport { dashboardCache } from './cache';\n\n// Types matching the shared schema\nexport interface InsertDonation {\n  receiptNo: string;\n  name: string;\n  phone: string;\n  community: string;\n  location: string;\n  address?: string;\n  amount: number;\n  paymentMode: 'cash' | 'card' | 'upi' | 'bankTransfer' | 'cheque';\n  inscription: boolean;\n  donationDate?: Date;\n}\n\nexport interface DonorSummary {\n  name: string;\n  phone: string;\n  location: string;\n  community: string;\n  totalAmount: number;\n  donationCount: number;\n  lastDonation: string;\n  donations: IDonation[];\n}\n\nexport interface DashboardStats {\n  totalCollection: number;\n  totalCollections: number; // Legacy support\n  totalDonors: number;\n  totalDonations: number;\n  thisMonth: number;\n  avgDonation: number;\n  paymentModeDistribution: {\n    mode: string;\n    percentage: number;\n    amount: number;\n  }[];\n  recentDonations: {\n    name: string;\n    amount: number;\n    paymentMode: string;\n    createdAt: string;\n  }[];\n}\n\nexport interface IStorage {\n  // Donation CRUD operations\n  createDonation(donation: InsertDonation): Promise<IDonation>;\n  getDonationById(id: string): Promise<IDonation | null>;\n  getAllDonations(): Promise<IDonation[]>;\n  getDonationsByFilters(filters: {\n    dateRange?: string;\n    community?: string;\n    paymentMode?: string;\n    amountRange?: string;\n  }): Promise<IDonation[]>;\n  updateDonation(id: string, donation: InsertDonation): Promise<IDonation | null>;\n  deleteDonation(id: string): Promise<boolean>;\n  deleteAllDonations(): Promise<boolean>;\n  \n  // Donor operations\n  getDonorByPhone(phone: string): Promise<DonorSummary | null>;\n  searchDonors(query: string, community?: string): Promise<DonorSummary[]>;\n  \n  // Dashboard operations\n  getDashboardStats(filters?: {\n    dateRange?: string;\n    startDate?: string;\n    endDate?: string;\n  }): Promise<DashboardStats>;\n}\n\n// In-memory storage for development when MongoDB fails\nclass InMemoryStorage implements IStorage {\n  private donations: any[] = [];\n  private nextId: number = 1;\n\n  async createDonation(insertDonation: InsertDonation): Promise<any> {\n    // Check for duplicate receipt number\n    const existingDonation = this.donations.find(d => d.receiptNo === insertDonation.receiptNo);\n    if (existingDonation) {\n      throw new Error(`Receipt number ${insertDonation.receiptNo} already exists`);\n    }\n    \n    const donation = {\n      _id: this.nextId.toString(),\n      ...insertDonation,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.donations.push(donation);\n    this.nextId++;\n    return donation;\n  }\n\n  async getDonationById(id: string): Promise<any> {\n    return this.donations.find(d => d._id === id) || null;\n  }\n\n  async getAllDonations(): Promise<any[]> {\n    return [...this.donations].sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async getDonationsByFilters(filters: any): Promise<any[]> {\n    let filtered = [...this.donations];\n    \n    if (filters.community && filters.community !== 'all') {\n      filtered = filtered.filter(d => d.community === filters.community);\n    }\n    \n    if (filters.paymentMode && filters.paymentMode !== 'all') {\n      filtered = filtered.filter(d => d.paymentMode === filters.paymentMode);\n    }\n    \n    return filtered.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async updateDonation(id: string, donation: any): Promise<any> {\n    const index = this.donations.findIndex(d => d._id === id);\n    if (index >= 0) {\n      this.donations[index] = { ...this.donations[index], ...donation, updatedAt: new Date() };\n      return this.donations[index];\n    }\n    return null;\n  }\n\n  async deleteDonation(id: string): Promise<boolean> {\n    const index = this.donations.findIndex(d => d._id === id);\n    if (index >= 0) {\n      this.donations.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  async deleteAllDonations(): Promise<boolean> {\n    this.donations = [];\n    this.nextId = 1;\n    return true;\n  }\n\n  async getDonorByPhone(phone: string): Promise<DonorSummary | null> {\n    const donations = this.donations.filter(d => d.phone === phone);\n    if (donations.length === 0) return null;\n    \n    const totalAmount = donations.reduce((sum, d) => sum + d.amount, 0);\n    return {\n      phone,\n      name: donations[0].name,\n      community: donations[0].community,\n      location: donations[0].location,\n      totalAmount,\n      donationCount: donations.length,\n      lastDonation: donations[0].createdAt.toISOString(),\n      donations\n    };\n  }\n\n  async searchDonors(query: string, community?: string): Promise<DonorSummary[]> {\n    let filtered = [...this.donations];\n    \n    if (community && community !== 'all') {\n      filtered = filtered.filter(d => d.community === community);\n    }\n    \n    // Group by phone\n    const donors: any = {};\n    filtered.forEach(d => {\n      if (!donors[d.phone]) {\n        donors[d.phone] = {\n          phone: d.phone,\n          name: d.name,\n          community: d.community,\n          location: d.location,\n          donations: [],\n          totalAmount: 0,\n          donationCount: 0,\n          lastDonation: d.createdAt.toISOString()\n        };\n      }\n      donors[d.phone].donations.push(d);\n      donors[d.phone].totalAmount += d.amount;\n      donors[d.phone].donationCount++;\n    });\n    \n    // Filter by search query\n    return Object.values(donors).filter((donor: any) => \n      donor.name.toLowerCase().includes(query.toLowerCase()) ||\n      donor.phone.includes(query)\n    ) as DonorSummary[];\n  }\n\n  async getDashboardStats(filters: any = {}): Promise<DashboardStats> {\n    const { dateRange, startDate, endDate } = filters;\n    \n    // Filter donations based on date range\n    let filteredDonations = [...this.donations];\n    const now = new Date();\n    \n    if (dateRange && dateRange !== 'all') {\n      switch (dateRange) {\n        case 'thismonth': {\n          const firstOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n          const lastOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n          filteredDonations = this.donations.filter(d => {\n            const donationDate = new Date(d.donationDate || d.createdAt);\n            return donationDate >= firstOfMonth && donationDate <= lastOfMonth;\n          });\n          break;\n        }\n        case 'lastmonth': {\n          const firstOfLastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n          const lastOfLastMonth = new Date(now.getFullYear(), now.getMonth(), 0);\n          filteredDonations = this.donations.filter(d => {\n            const donationDate = new Date(d.donationDate || d.createdAt);\n            return donationDate >= firstOfLastMonth && donationDate <= lastOfLastMonth;\n          });\n          break;\n        }\n        case 'thisyear': {\n          const firstOfYear = new Date(now.getFullYear(), 0, 1);\n          const lastOfYear = new Date(now.getFullYear(), 11, 31);\n          filteredDonations = this.donations.filter(d => {\n            const donationDate = new Date(d.donationDate || d.createdAt);\n            return donationDate >= firstOfYear && donationDate <= lastOfYear;\n          });\n          break;\n        }\n        case 'lastyear': {\n          const firstOfLastYear = new Date(now.getFullYear() - 1, 0, 1);\n          const lastOfLastYear = new Date(now.getFullYear() - 1, 11, 31);\n          filteredDonations = this.donations.filter(d => {\n            const donationDate = new Date(d.donationDate || d.createdAt);\n            return donationDate >= firstOfLastYear && donationDate <= lastOfLastYear;\n          });\n          break;\n        }\n        case 'lastyear': {\n          const firstOfLastYear = new Date(now.getFullYear() - 1, 0, 1);\n          const lastOfLastYear = new Date(now.getFullYear() - 1, 11, 31);\n          filteredDonations = this.donations.filter(d => {\n            const donationDate = new Date(d.donationDate || d.createdAt);\n            return donationDate >= firstOfLastYear && donationDate <= lastOfLastYear;\n          });\n          break;\n        }\n        case 'custom': {\n          if (startDate && endDate) {\n            const start = new Date(startDate);\n            const end = new Date(endDate);\n            filteredDonations = this.donations.filter(d => {\n              const donationDate = new Date(d.donationDate || d.createdAt);\n              return donationDate >= start && donationDate <= end;\n            });\n          }\n          break;\n        }\n      }\n    }\n    \n    // Always show total collection from all donations (not filtered)\n    const totalCollections = this.donations.reduce((sum, d) => sum + d.amount, 0);\n    const filteredTotal = filteredDonations.reduce((sum, d) => sum + d.amount, 0);\n    const uniqueDonors = new Set(filteredDonations.map(d => d.phone)).size;\n    \n    // Calculate this month donations (always current month, not filtered)\n    const firstOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    const thisMonthDonations = this.donations.filter(d => \n      new Date(d.createdAt) >= firstOfMonth\n    );\n    const thisMonthAmount = thisMonthDonations.reduce((sum, d) => sum + d.amount, 0);\n    \n    // Payment mode distribution based on filtered data\n    const paymentModes = ['cash', 'card', 'upi', 'bankTransfer', 'cheque'];\n    const paymentModeDistribution = paymentModes.map(mode => {\n      const modeAmount = filteredDonations\n        .filter(d => d.paymentMode === mode)\n        .reduce((sum, d) => sum + d.amount, 0);\n      const count = filteredDonations.filter(d => d.paymentMode === mode).length;\n      \n      return {\n        mode,\n        count,\n        percentage: filteredTotal > 0 ? Math.round((modeAmount / filteredTotal) * 100) : 0,\n        amount: modeAmount\n      };\n    });\n    \n    return {\n      totalCollection: totalCollections, // Always show total from all donations\n      totalCollections: totalCollections, // Legacy support\n      totalDonors: uniqueDonors,\n      totalDonations: filteredDonations.length,\n      thisMonth: thisMonthAmount,\n      avgDonation: filteredDonations.length > 0 ? Math.round(filteredTotal / filteredDonations.length) : 0,\n      paymentModeDistribution,\n      recentDonations: filteredDonations.slice(-10).reverse().map(d => ({\n        name: d.name,\n        amount: d.amount,\n        paymentMode: d.paymentMode,\n        createdAt: d.createdAt.toISOString()\n      }))\n    };\n  }\n}\n\nexport class MongoDBStorage implements IStorage {\n  private isMongoAvailable: boolean = false;\n  private inMemoryStorage: InMemoryStorage;\n\n  constructor() {\n    this.isMongoAvailable = false;\n    this.inMemoryStorage = new InMemoryStorage();\n    \n    // Try to connect to MongoDB, but don't wait for it\n    this.initializeMongoDB();\n  }\n\n  async initializeMongoDB() {\n    try {\n      await connectMongoDB();\n      this.isMongoAvailable = true;\n      console.log('MongoDB connection established for storage');\n    } catch (error) {\n      console.log('MongoDB unavailable, using in-memory storage');\n      this.isMongoAvailable = false;\n    }\n  }\n\n  async createDonation(insertDonation: InsertDonation): Promise<IDonation> {\n    // Use in-memory storage if MongoDB is not available\n    if (!this.isMongoAvailable) {\n      return await this.inMemoryStorage.createDonation(insertDonation);\n    }\n\n    try {\n      // Check for duplicate receipt number in MongoDB\n      const existingDonation = await Donation.findOne({ receiptNo: insertDonation.receiptNo });\n      if (existingDonation) {\n        throw new Error(`Receipt number ${insertDonation.receiptNo} already exists`);\n      }\n      \n      const donation = new Donation(insertDonation);\n      return await donation.save();\n    } catch (error) {\n      console.error('Error creating donation, falling back to in-memory:', error);\n      this.isMongoAvailable = false;\n      return await this.inMemoryStorage.createDonation(insertDonation);\n    }\n  }\n\n  async getDonationById(id: string): Promise<IDonation | null> {\n    if (!this.isMongoAvailable) {\n      return await this.inMemoryStorage.getDonationById(id);\n    }\n\n    try {\n      return await Donation.findById(id);\n    } catch (error) {\n      console.error('Error fetching donation by ID, falling back:', error);\n      this.isMongoAvailable = false;\n      return await this.inMemoryStorage.getDonationById(id);\n    }\n  }\n\n  async getAllDonations(): Promise<IDonation[]> {\n    if (!this.isMongoAvailable) {\n      return await this.inMemoryStorage.getAllDonations();\n    }\n\n    try {\n      return await Donation.find({}).sort({ createdAt: -1 });\n    } catch (error) {\n      console.error('Error fetching all donations, falling back:', error);\n      this.isMongoAvailable = false;\n      return await this.inMemoryStorage.getAllDonations();\n    }\n  }\n\n  async getDonationsByFilters(filters: any): Promise<IDonation[]> {\n    if (!this.isMongoAvailable) {\n      return await this.inMemoryStorage.getDonationsByFilters(filters);\n    }\n    try {\n      const query: any = {};\n\n      // Date range filter\n      if (filters.dateRange) {\n        const cutoffDate = this.getDateRangeCutoff(filters.dateRange);\n        if (cutoffDate) {\n          query.createdAt = { $gte: cutoffDate };\n        }\n      }\n\n      // Community filter\n      if (filters.community && filters.community !== 'all') {\n        query.community = filters.community;\n      }\n\n      // Payment mode filter\n      if (filters.paymentMode && filters.paymentMode !== 'all') {\n        query.paymentMode = filters.paymentMode;\n      }\n\n      // Amount range filter\n      if (filters.amountRange && filters.amountRange !== 'all') {\n        const [min, max] = this.parseAmountRange(filters.amountRange);\n        if (min !== undefined && max !== undefined) {\n          query.amount = { $gte: min, $lte: max };\n        } else if (min !== undefined) {\n          query.amount = { $gte: min };\n        }\n      }\n\n      return await Donation.find(query).sort({ createdAt: -1 });\n    } catch (error) {\n      console.error('Error fetching donations with filters, falling back:', error);\n      this.isMongoAvailable = false;\n      return await this.inMemoryStorage.getDonationsByFilters(filters);\n    }\n  }\n\n  private parseAmountRange(range: string): [number | undefined, number | undefined] {\n    switch (range) {\n      case '0-100': return [0, 100];\n      case '101-500': return [101, 500];\n      case '501-1000': return [501, 1000];\n      case '1001-5000': return [1001, 5000];\n      case '5000+': return [5000, undefined];\n      default: return [undefined, undefined];\n    }\n  }\n\n  private getDateRangeCutoff(range: string): Date | null {\n    const now = new Date();\n    switch (range) {\n      case 'today':\n        return new Date(now.getFullYear(), now.getMonth(), now.getDate());\n      case 'week':\n        const weekAgo = new Date(now);\n        weekAgo.setDate(now.getDate() - 7);\n        return weekAgo;\n      case 'month':\n        const monthAgo = new Date(now);\n        monthAgo.setMonth(now.getMonth() - 1);\n        return monthAgo;\n      case 'year':\n        const yearAgo = new Date(now);\n        yearAgo.setFullYear(now.getFullYear() - 1);\n        return yearAgo;\n      default:\n        return null;\n    }\n  }\n\n  async getDonorByPhone(phone: string): Promise<DonorSummary | null> {\n    if (!this.isMongoAvailable) {\n      return await this.inMemoryStorage.getDonorByPhone(phone);\n    }\n\n    try {\n      const donations = await Donation.find({ phone }).sort({ createdAt: -1 });\n      \n      if (donations.length === 0) {\n        return null;\n      }\n\n      const firstDonation = donations[0];\n      const totalAmount = donations.reduce((sum, d) => sum + d.amount, 0);\n\n      return {\n        name: firstDonation.name,\n        phone: firstDonation.phone,\n        location: firstDonation.location,\n        community: firstDonation.community,\n        totalAmount,\n        donationCount: donations.length,\n        lastDonation: firstDonation.createdAt.toISOString(),\n        donations\n      };\n    } catch (error) {\n      console.error('Error fetching donor by phone, falling back:', error);\n      this.isMongoAvailable = false;\n      return await this.inMemoryStorage.getDonorByPhone(phone);\n    }\n  }\n\n  async searchDonors(query: string, community?: string): Promise<DonorSummary[]> {\n    if (!this.isMongoAvailable) {\n      return await this.inMemoryStorage.searchDonors(query, community);\n    }\n\n    try {\n      const searchQuery = {\n        $or: [\n          { name: { $regex: query, $options: 'i' } },\n          { phone: { $regex: query, $options: 'i' } }\n        ]\n      };\n\n      if (community && community !== 'all') {\n        (searchQuery as any).community = community;\n      }\n\n      const donations = await Donation.find(searchQuery).sort({ createdAt: -1 });\n      \n      // Group by phone number to get unique donors  \n      const donorMap = new Map<string, DonorSummary>();\n      \n      for (const donation of donations) {\n        if (!donorMap.has(donation.phone)) {\n          const donorDonations = donations.filter(d => d.phone === donation.phone);\n          const totalAmount = donorDonations.reduce((sum, d) => sum + d.amount, 0);\n          \n          donorMap.set(donation.phone, {\n            name: donation.name,\n            phone: donation.phone,\n            location: donation.location,\n            community: donation.community,\n            totalAmount,\n            donationCount: donorDonations.length,\n            lastDonation: donation.createdAt.toISOString(),\n            donations: donorDonations\n          });\n        }\n      }\n\n      return Array.from(donorMap.values());\n    } catch (error) {\n      console.error('Error searching donors, falling back:', error);\n      this.isMongoAvailable = false;\n      return await this.inMemoryStorage.searchDonors(query, community);\n    }\n  }\n\n  async getDashboardStats(filters: any = {}): Promise<DashboardStats> {\n    if (!this.isMongoAvailable) {\n      return await this.inMemoryStorage.getDashboardStats(filters);\n    }\n\n    try {\n      const { dateRange, startDate, endDate } = filters;\n      \n      // Create cache key based on filters\n      const cacheKey = `dashboard-stats-${dateRange || 'all'}-${startDate || ''}-${endDate || ''}`;\n      const cached = dashboardCache.get(cacheKey);\n      if (cached) {\n        console.log('Dashboard stats served from cache');\n        return cached;\n      }\n\n      // Build MongoDB query based on date range\n      let dateFilter = {};\n      const now = new Date();\n      \n      if (dateRange && dateRange !== 'all') {\n        switch (dateRange) {\n          case 'thismonth': {\n            const firstOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n            const lastOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n            dateFilter = { \n              $or: [\n                { donationDate: { $gte: firstOfMonth, $lte: lastOfMonth } },\n                { donationDate: { $exists: false }, createdAt: { $gte: firstOfMonth, $lte: lastOfMonth } }\n              ]\n            };\n            break;\n          }\n          case 'lastmonth': {\n            const firstOfLastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n            const lastOfLastMonth = new Date(now.getFullYear(), now.getMonth(), 0);\n            dateFilter = { \n              $or: [\n                { donationDate: { $gte: firstOfLastMonth, $lte: lastOfLastMonth } },\n                { donationDate: { $exists: false }, createdAt: { $gte: firstOfLastMonth, $lte: lastOfLastMonth } }\n              ]\n            };\n            break;\n          }\n          case 'thisyear': {\n            const firstOfYear = new Date(now.getFullYear(), 0, 1);\n            const lastOfYear = new Date(now.getFullYear(), 11, 31);\n            dateFilter = { \n              $or: [\n                { donationDate: { $gte: firstOfYear, $lte: lastOfYear } },\n                { donationDate: { $exists: false }, createdAt: { $gte: firstOfYear, $lte: lastOfYear } }\n              ]\n            };\n            break;\n          }\n          case 'lastyear': {\n            const firstOfLastYear = new Date(now.getFullYear() - 1, 0, 1);\n            const lastOfLastYear = new Date(now.getFullYear() - 1, 11, 31);\n            dateFilter = { \n              $or: [\n                { donationDate: { $gte: firstOfLastYear, $lte: lastOfLastYear } },\n                { donationDate: { $exists: false }, createdAt: { $gte: firstOfLastYear, $lte: lastOfLastYear } }\n              ]\n            };\n            break;\n          }\n          case 'custom': {\n            if (startDate && endDate) {\n              dateFilter = { \n                $or: [\n                  { donationDate: { $gte: new Date(startDate), $lte: new Date(endDate) } },\n                  { donationDate: { $exists: false }, createdAt: { $gte: new Date(startDate), $lte: new Date(endDate) } }\n                ]\n              };\n            }\n            break;\n          }\n        }\n      }\n\n      // Get filtered donations\n      const filteredDonations = await Donation.find(dateFilter);\n      \n      // Always get this month data (unfiltered)\n      const firstOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n      const thisMonthDonations = await Donation.find({\n        createdAt: { $gte: firstOfMonth }\n      });\n\n      // Always show total collection from all donations (not filtered)\n      const allDonations = await Donation.find({});\n      const totalCollections = allDonations.reduce((sum, d) => sum + d.amount, 0);\n      const filteredTotal = filteredDonations.reduce((sum, d) => sum + d.amount, 0);\n      const thisMonthAmount = thisMonthDonations.reduce((sum, d) => sum + d.amount, 0);\n      \n      // Get unique donors by phone from filtered data\n      const uniquePhones = new Set(filteredDonations.map(d => d.phone));\n      const totalDonors = uniquePhones.size;\n      \n      const avgDonation = filteredDonations.length > 0 ? totalCollections / filteredDonations.length : 0;\n\n      // Payment mode distribution based on filtered data\n      const paymentModes = ['cash', 'card', 'upi', 'bankTransfer', 'cheque'];\n      const paymentModeDistribution = paymentModes.map(mode => {\n        const modeAmount = filteredDonations\n          .filter(d => d.paymentMode === mode)\n          .reduce((sum, d) => sum + d.amount, 0);\n        \n        const count = filteredDonations.filter(d => d.paymentMode === mode).length;\n        return {\n          mode,\n          count,\n          percentage: filteredTotal > 0 ? Math.round((modeAmount / filteredTotal) * 100) : 0,\n          amount: modeAmount\n        };\n      });\n\n      // Recent donations from filtered data (last 10)\n      const recentDonations = filteredDonations\n        .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())\n        .slice(0, 10)\n        .map(d => ({\n          name: d.name,\n          amount: d.amount,\n          paymentMode: d.paymentMode,\n          createdAt: d.createdAt.toISOString()\n        }));\n\n      const stats = {\n        totalCollection: totalCollections, // Always show total from all donations\n        totalCollections: totalCollections, // Legacy support\n        totalDonors,\n        totalDonations: filteredDonations.length,\n        thisMonth: thisMonthAmount,\n        avgDonation: filteredDonations.length > 0 ? Math.round(filteredTotal / filteredDonations.length) : 0,\n        paymentModeDistribution,\n        recentDonations\n      };\n\n      // Cache for 30 seconds for faster loading\n      dashboardCache.set(cacheKey, stats, 30);\n      return stats;\n    } catch (error) {\n      console.error('Error fetching dashboard stats, falling back:', error);\n      this.isMongoAvailable = false;\n      return await this.inMemoryStorage.getDashboardStats(filters);\n    }\n  }\n\n  async updateDonation(id: string, donation: any): Promise<IDonation | null> {\n    if (!this.isMongoAvailable) {\n      return await this.inMemoryStorage.updateDonation(id, donation);\n    }\n\n    try {\n      return await Donation.findByIdAndUpdate(id, donation, { new: true });\n    } catch (error) {\n      console.error('Error updating donation, falling back:', error);\n      this.isMongoAvailable = false;\n      return await this.inMemoryStorage.updateDonation(id, donation);\n    }\n  }\n\n  async deleteDonation(id: string): Promise<boolean> {\n    if (!this.isMongoAvailable) {\n      return await this.inMemoryStorage.deleteDonation(id);\n    }\n\n    try {\n      const result = await Donation.findByIdAndDelete(id);\n      return !!result;\n    } catch (error) {\n      console.error('Error deleting donation, falling back:', error);\n      this.isMongoAvailable = false;\n      return await this.inMemoryStorage.deleteDonation(id);\n    }\n  }\n\n  async deleteAllDonations(): Promise<boolean> {\n    if (!this.isMongoAvailable) {\n      return await this.inMemoryStorage.deleteAllDonations();\n    }\n\n    try {\n      await Donation.deleteMany({});\n      // Also clear in-memory storage to stay in sync\n      await this.inMemoryStorage.deleteAllDonations();\n      return true;\n    } catch (error) {\n      console.error('Error deleting all donations, falling back:', error);\n      this.isMongoAvailable = false;\n      return await this.inMemoryStorage.deleteAllDonations();\n    }\n  }\n}\n\n// Export MongoDB storage instance\nexport const storage = new MongoDBStorage();","size_bytes":25435},"server/storage.ts":{"content":"import { donations, receiptSequences, type Donation, type InsertDonation, type ReceiptSequence } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, gte, lte, and, sql, count, sum, or, like } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Donations\n  createDonation(donation: InsertDonation): Promise<Donation>;\n  getAllDonations(): Promise<Donation[]>;\n  getDonationById(id: number): Promise<Donation | undefined>;\n  getDonationsByPhone(phone: string): Promise<Donation[]>;\n  getDonationsByDateRange(startDate: Date, endDate: Date): Promise<Donation[]>;\n  getDonationsByReceiptNo(receiptNo: string): Promise<Donation | undefined>;\n  getDonationsByFilters(filters: {\n    dateRange?: string;\n    community?: string;\n    paymentMode?: string;\n    amountRange?: string;\n    startDate?: string;\n    endDate?: string;\n  }): Promise<Donation[]>;\n  deleteAllDonations(): Promise<void>;\n  \n  // Receipt sequences\n  getNextReceiptNumber(year: number): Promise<string>;\n  getCurrentReceiptSequence(year: number): Promise<ReceiptSequence | undefined>;\n  \n  // Analytics\n  getTotalDonations(): Promise<number>;\n  getTotalAmount(): Promise<number>;\n  getUniqueDonorCount(): Promise<number>;\n  getPaymentModeDistribution(): Promise<Array<{ paymentMode: string; count: number; amount: number }>>;\n  getRecentDonations(limit: number): Promise<Donation[]>;\n  getDashboardStats(startDate?: Date, endDate?: Date): Promise<{\n    totalCollection: number;\n    totalDonors: number;\n    totalDonations: number;\n    averageDonation: number;\n  }>;\n  \n  // Donor search\n  searchDonors(query: string, community?: string): Promise<DonorSummary[]>;\n  getDonorByPhone(phone: string): Promise<DonorSummary | undefined>;\n}\n\nexport interface DonorSummary {\n  name: string;\n  phone: string;\n  location: string;\n  community: string;\n  totalAmount: number;\n  donationCount: number;\n  lastDonation: string;\n  donations: Donation[];\n}\n\nexport class DatabaseStorage implements IStorage {\n  async createDonation(donation: InsertDonation): Promise<Donation> {\n    const [result] = await db.insert(donations).values(donation).returning();\n    return result;\n  }\n\n  async getAllDonations(): Promise<Donation[]> {\n    return await db.select().from(donations).orderBy(desc(donations.donationDate));\n  }\n\n  async getDonationById(id: number): Promise<Donation | undefined> {\n    const [result] = await db.select().from(donations).where(eq(donations.id, id));\n    return result;\n  }\n\n  async getDonationsByPhone(phone: string): Promise<Donation[]> {\n    return await db.select().from(donations)\n      .where(eq(donations.phone, phone))\n      .orderBy(desc(donations.donationDate));\n  }\n\n  async getDonationsByDateRange(startDate: Date, endDate: Date): Promise<Donation[]> {\n    return await db.select().from(donations)\n      .where(and(\n        gte(donations.donationDate, startDate),\n        lte(donations.donationDate, endDate)\n      ))\n      .orderBy(desc(donations.donationDate));\n  }\n\n  async getDonationsByReceiptNo(receiptNo: string): Promise<Donation | undefined> {\n    const [result] = await db.select().from(donations).where(eq(donations.receiptNo, receiptNo));\n    return result;\n  }\n\n  async deleteAllDonations(): Promise<void> {\n    await db.delete(donations);\n    await db.delete(receiptSequences);\n  }\n\n  async getNextReceiptNumber(year: number): Promise<string> {\n    let sequence = await this.getCurrentReceiptSequence(year);\n    \n    if (!sequence) {\n      // Create new sequence for the year\n      const [newSequence] = await db.insert(receiptSequences)\n        .values({ year, lastReceiptNumber: 1 })\n        .returning();\n      return \"1\";\n    }\n\n    // Increment and update\n    const nextNumber = sequence.lastReceiptNumber + 1;\n    await db.update(receiptSequences)\n      .set({ lastReceiptNumber: nextNumber })\n      .where(eq(receiptSequences.year, year));\n\n    return nextNumber.toString();\n  }\n\n  async getCurrentReceiptSequence(year: number): Promise<ReceiptSequence | undefined> {\n    const [result] = await db.select().from(receiptSequences).where(eq(receiptSequences.year, year));\n    return result;\n  }\n\n  async getTotalDonations(): Promise<number> {\n    const [result] = await db.select({ count: count() }).from(donations);\n    return result.count;\n  }\n\n  async getTotalAmount(): Promise<number> {\n    const [result] = await db.select({ \n      total: sum(donations.amount)\n    }).from(donations);\n    return Number(result.total) || 0;\n  }\n\n  async getUniqueDonorCount(): Promise<number> {\n    const [result] = await db.select({ \n      count: sql<number>`COUNT(DISTINCT ${donations.phone})`\n    }).from(donations);\n    return result.count;\n  }\n\n  async getPaymentModeDistribution(startDate?: Date, endDate?: Date): Promise<Array<{ paymentMode: string; count: number; amount: number }>> {\n    let query = db.select({\n      paymentMode: donations.paymentMode,\n      count: count(),\n      amount: sum(donations.amount)\n    })\n    .from(donations);\n\n    if (startDate && endDate) {\n      query = query.where(and(\n        gte(donations.donationDate, startDate),\n        lte(donations.donationDate, endDate)\n      )) as any;\n    }\n\n    const results = await query.groupBy(donations.paymentMode);\n\n    return results.map(r => ({\n      paymentMode: r.paymentMode,\n      count: r.count,\n      amount: Number(r.amount) || 0\n    }));\n  }\n\n  async getRecentDonations(limit: number = 10, startDate?: Date, endDate?: Date): Promise<Donation[]> {\n    // Get all donations first, then sort properly\n    let query = db.select().from(donations);\n\n    if (startDate && endDate) {\n      query = query.where(and(\n        gte(donations.donationDate, startDate),\n        lte(donations.donationDate, endDate)\n      )) as any;\n    }\n\n    const allResults = await query;\n    \n    // Sort properly: donations with dates first (by donation date desc), then null dates (by created_at desc)\n    const sorted = allResults.sort((a, b) => {\n      // If both have donation dates, sort by donation date desc\n      if (a.donationDate && b.donationDate) {\n        return new Date(b.donationDate).getTime() - new Date(a.donationDate).getTime();\n      }\n      // If only a has donation date, a comes first\n      if (a.donationDate && !b.donationDate) {\n        return -1;\n      }\n      // If only b has donation date, b comes first\n      if (!a.donationDate && b.donationDate) {\n        return 1;\n      }\n      // If both are null, sort by created_at desc\n      return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n    }).slice(0, limit);\n    \n    return sorted;\n  }\n\n  async getDonationsByFilters(filters: {\n    dateRange?: string;\n    community?: string;\n    paymentMode?: string;\n    amountRange?: string;\n    startDate?: string;\n    endDate?: string;\n  }): Promise<Donation[]> {\n    let conditions: any[] = [];\n\n    // Date range filter\n    if (filters.dateRange && filters.dateRange !== 'all') {\n      const now = new Date();\n      let startDate: Date;\n      let endDate: Date | undefined;\n\n      switch (filters.dateRange) {\n        case 'today':\n          startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n          endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);\n          conditions.push(gte(donations.donationDate, startDate));\n          conditions.push(lte(donations.donationDate, endDate));\n          break;\n        case 'week':\n          startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n          conditions.push(gte(donations.donationDate, startDate));\n          break;\n        case 'month':\n          startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n          conditions.push(gte(donations.donationDate, startDate));\n          break;\n        case 'custom':\n          if (filters.startDate) {\n            startDate = new Date(filters.startDate);\n            conditions.push(gte(donations.donationDate, startDate));\n          }\n          if (filters.endDate) {\n            endDate = new Date(filters.endDate);\n            endDate.setHours(23, 59, 59, 999); // End of day\n            conditions.push(lte(donations.donationDate, endDate));\n          }\n          break;\n      }\n    }\n\n    // Community filter\n    if (filters.community && filters.community !== 'any' && filters.community !== 'all') {\n      conditions.push(eq(donations.community, filters.community));\n    }\n\n    // Payment mode filter\n    if (filters.paymentMode && filters.paymentMode !== 'all') {\n      // Handle both frontend values and database values\n      let paymentModeValue = filters.paymentMode;\n      if (filters.paymentMode === 'bankTransfer') {\n        paymentModeValue = 'bank_transfer';\n      } else if (filters.paymentMode === 'bank-transfer') {\n        paymentModeValue = 'bank_transfer';\n      }\n      conditions.push(eq(donations.paymentMode, paymentModeValue));\n    }\n\n    // Amount range filter\n    if (filters.amountRange && filters.amountRange !== 'all') {\n      const parseAmountRange = (range: string): [number?, number?] => {\n        if (range === '0-1000') return [0, 1000];\n        if (range === '1001-5000') return [1001, 5000];\n        if (range === '5001-10000') return [5001, 10000];\n        if (range === '10000+') return [10000, undefined];\n        return [undefined, undefined];\n      };\n\n      const [min, max] = parseAmountRange(filters.amountRange);\n      if (min !== undefined) {\n        conditions.push(gte(sql`CAST(${donations.amount} AS DECIMAL)`, min));\n      }\n      if (max !== undefined) {\n        conditions.push(lte(sql`CAST(${donations.amount} AS DECIMAL)`, max));\n      }\n    }\n\n    // Build the query\n    if (conditions.length > 0) {\n      return await db.select().from(donations)\n        .where(and(...conditions))\n        .orderBy(desc(donations.donationDate));\n    } else {\n      return await db.select().from(donations)\n        .orderBy(desc(donations.donationDate));\n    }\n  }\n\n  async getDashboardStats(startDate?: Date, endDate?: Date): Promise<{\n    totalCollection: number;\n    totalDonors: number; \n    totalDonations: number;\n    averageDonation: number;\n  }> {\n    let query = db.select({\n      totalCollection: sum(donations.amount),\n      totalDonations: count(),\n      uniqueDonors: sql<number>`COUNT(DISTINCT ${donations.phone})`\n    }).from(donations);\n\n    if (startDate && endDate) {\n      query = query.where(and(\n        gte(donations.donationDate, startDate),\n        lte(donations.donationDate, endDate)\n      )) as any;\n    }\n\n    const [result] = await query;\n    \n    const totalCollection = Number(result.totalCollection) || 0;\n    const totalDonations = result.totalDonations;\n    const totalDonors = result.uniqueDonors;\n    const averageDonation = totalDonations > 0 ? totalCollection / totalDonations : 0;\n\n    return {\n      totalCollection,\n      totalDonors,\n      totalDonations,\n      averageDonation\n    };\n  }\n\n  async searchDonors(query: string, community?: string): Promise<DonorSummary[]> {\n    let conditions: any[] = [];\n\n    // Search by name or phone\n    conditions.push(\n      or(\n        like(donations.name, `%${query}%`),\n        like(donations.phone, `%${query}%`)\n      )\n    );\n\n    // Filter by community if specified\n    if (community && community !== 'all') {\n      conditions.push(eq(donations.community, community));\n    }\n\n    const allDonations = await db.select().from(donations)\n      .where(and(...conditions))\n      .orderBy(desc(donations.donationDate));\n\n    // Group by phone number to get unique donors\n    const donorMap = new Map<string, DonorSummary>();\n\n    for (const donation of allDonations) {\n      if (!donorMap.has(donation.phone)) {\n        const donorDonations = allDonations.filter(d => d.phone === donation.phone);\n        const totalAmount = donorDonations.reduce((sum, d) => sum + Number(d.amount), 0);\n\n        donorMap.set(donation.phone, {\n          name: donation.name,\n          phone: donation.phone,\n          location: donation.location || '',\n          community: donation.community || '',\n          totalAmount,\n          donationCount: donorDonations.length,\n          lastDonation: (donation.donationDate || donation.createdAt).toISOString(),\n          donations: donorDonations\n        });\n      }\n    }\n\n    return Array.from(donorMap.values());\n  }\n\n  async getDonorByPhone(phone: string): Promise<DonorSummary | undefined> {\n    const donorDonations = await db.select().from(donations)\n      .where(eq(donations.phone, phone))\n      .orderBy(desc(donations.donationDate));\n\n    if (donorDonations.length === 0) {\n      return undefined;\n    }\n\n    const firstDonation = donorDonations[0];\n    const totalAmount = donorDonations.reduce((sum, d) => sum + Number(d.amount), 0);\n\n    return {\n      name: firstDonation.name,\n      phone: firstDonation.phone,\n      location: firstDonation.location || '',\n      community: firstDonation.community || '',\n      totalAmount,\n      donationCount: donorDonations.length,\n      lastDonation: (firstDonation.donationDate || firstDonation.createdAt).toISOString(),\n      donations: donorDonations\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":13082},"server/types.d.ts":{"content":"import 'express-session';\n\ndeclare module 'express-session' {\n  interface SessionData {\n    isAuthenticated?: boolean;\n    username?: string;\n    role?: string;\n  }\n}\n\ndeclare module 'express-serve-static-core' {\n  interface Request {\n    session: import('express-session').SessionData & Partial<import('express-session').Session>;\n  }\n}","size_bytes":337},"server/vite.config.js":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});","size_bytes":970},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../../vite.config.ts\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"..\",\n        \"frontend\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2294},"shared/mongodb-schema.ts":{"content":"import { z } from \"zod\";\n\n// MongoDB Schema for donations\nexport const insertDonationSchema = z.object({\n  receiptNo: z.string().min(1, \"Receipt number is required\"),\n  name: z.string().min(1, \"Name is required\"),\n  phone: z.string().regex(/^\\d{10}$/, \"Phone number must be exactly 10 digits\"),\n  community: z.enum([\"any\", \"payiran\", \"chozhan\", \"pandiyan\", \"othaalan\", \"vizhiyan\", \"aadai\", \"aavan\", \"odhaalan\", \"semban\"]),\n  location: z.string().min(1, \"Location is required\"),\n  address: z.string().optional(),\n  amount: z.number().positive(\"Amount must be positive\"),\n  paymentMode: z.enum([\"cash\", \"card\", \"upi\", \"bankTransfer\", \"cheque\"]),\n  inscription: z.boolean().default(false),\n  donationDate: z.date().optional(),\n});\n\n// Types for MongoDB\nexport interface InsertDonation {\n  receiptNo: string;\n  name: string;\n  phone: string;\n  community: string;\n  location: string;\n  address?: string;\n  amount: number;\n  paymentMode: 'cash' | 'card' | 'upi' | 'bankTransfer' | 'cheque';\n  inscription: boolean;\n  donationDate?: Date;\n}\n\nexport interface Donation extends InsertDonation {\n  _id: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface ReceiptSequence {\n  _id: string;\n  year: number;\n  lastReceiptNumber: number;\n  updatedAt: Date;\n}\n\nexport interface DonorSummary {\n  name: string;\n  phone: string;\n  location: string;\n  community: string;\n  totalAmount: number;\n  donationCount: number;\n  lastDonation: string;\n  donations: Donation[];\n}\n\nexport interface DashboardStats {\n  totalCollection: number;\n  totalCollections: number; // Legacy support\n  totalDonors: number;\n  totalDonations: number;\n  thisMonth: number;\n  avgDonation: number;\n  paymentModeDistribution: {\n    mode: string;\n    count: number;\n    percentage: number;\n    amount: number;\n  }[];\n  recentDonations: {\n    name: string;\n    amount: number;\n    paymentMode: string;\n    createdAt: string;\n  }[];\n}","size_bytes":1897},"shared/schema.ts":{"content":"import { pgTable, serial, varchar, integer, boolean, timestamp, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Donations table\nexport const donations = pgTable(\"donations\", {\n  id: serial(\"id\").primaryKey(),\n  receiptNo: varchar(\"receipt_no\", { length: 50 }).notNull().unique(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  phone: varchar(\"phone\", { length: 10 }).notNull(),\n  community: varchar(\"community\", { length: 20 }).notNull().default(\"any\"),\n  location: varchar(\"location\", { length: 100 }).notNull(),\n  address: varchar(\"address\", { length: 255 }),\n  amount: integer(\"amount\").notNull(),\n  paymentMode: varchar(\"payment_mode\", { length: 20 }).notNull(),\n  inscription: boolean(\"inscription\").default(false),\n  donationDate: timestamp(\"donation_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Receipt sequences table\nexport const receiptSequences = pgTable(\"receiptSequences\", {\n  id: serial(\"id\").primaryKey(),\n  year: integer(\"year\").notNull().unique(),\n  lastReceiptNumber: integer(\"lastReceiptNumber\").notNull().default(0),\n  updatedAt: timestamp(\"updatedAt\").defaultNow().notNull(),\n});\n\n// Types\nexport type Donation = typeof donations.$inferSelect;\nexport type InsertDonation = typeof donations.$inferInsert;\nexport type ReceiptSequence = typeof receiptSequences.$inferSelect;\n\n// Schemas\nexport const insertDonationSchema = createInsertSchema(donations, {\n  receiptNo: z.string().min(1, \"Receipt number is required\"),\n  name: z.string().min(1, \"Name is required\"),\n  phone: z.string().regex(/^\\d{10}$/, \"Phone number must be exactly 10 digits\"),\n  community: z.enum([\"any\", \"payiran\", \"chozhan\", \"pandiyan\", \"othaalan\", \"vizhiyan\", \"aadai\", \"aavan\", \"odhaalan\", \"semban\"]),\n  location: z.string().min(1, \"Location is required\"),\n  address: z.string().optional(),\n  amount: z.coerce.number().positive(\"Amount must be positive\"),\n  paymentMode: z.enum([\"cash\", \"card\", \"upi\", \"bankTransfer\", \"cheque\"]),\n  inscription: z.boolean().default(false),\n  donationDate: z.coerce.date().optional(),\n}).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const selectDonationSchema = createSelectSchema(donations);","size_bytes":2246},"client/src/App.tsx":{"content":"import React, { useState } from \"react\";\nimport { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider, useQuery } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Button } from \"@/components/ui/button\";\nimport { Menu, Building2, Languages, Plus, Search, BarChart3, Upload, Link, Settings, LogOut } from \"lucide-react\";\nimport { LanguageProvider, useLanguage, useTranslation } from \"@/contexts/LanguageContext\";\n\nimport DonationForm from \"@/pages/donation-form\";\nimport DonorLookup from \"@/pages/donor-lookup\";\nimport Dashboard from \"@/pages/dashboard\";\nimport ImportData from \"@/pages/import-data\";\nimport AdminPanel from \"@/pages/admin-panel\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport GoogleFormIntegration from \"@/pages/google-form-integration\";\nimport NotFound from \"@/pages/not-found\";\n// Removed InstallPrompt - no longer using PWA functionality\n\n\n// Define authentication status type\ninterface AuthStatus {\n  isAuthenticated: boolean;\n  username?: string;\n  role?: string;\n}\n\nfunction Navigation() {\n  const [location, setLocation] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const { language, toggleLanguage } = useLanguage();\n  const t = useTranslation();\n  \n  // Check authentication status\n  const { data: authStatus } = useQuery<AuthStatus>({\n    queryKey: [\"/api/auth/status\"],\n    retry: false,\n  });\n\n  const handleLogout = async () => {\n    try {\n      await fetch(\"/api/auth/logout\", {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n      // Refresh auth status\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/status\"] });\n      setLocation(\"/\");\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n    }\n  };\n\n  const navItems = [\n    { path: \"/\", label: t(\"newDonation\"), icon: \"Plus\" },\n    { path: \"/lookup\", label: t(\"donorLookup\"), icon: \"Search\" },\n    { path: \"/dashboard\", label: t(\"dashboard\"), icon: \"BarChart3\" },\n    { path: \"/import\", label: t(\"importData\"), icon: \"Upload\" },\n    { path: \"/google-form\", label: t(\"googleFormSetup\"), icon: \"Link\" },\n    { path: \"/admin\", label: t(\"adminPanel\"), icon: \"Settings\" },\n  ];\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-2 sm:px-4 lg:px-6\">\n        <div className=\"flex justify-between items-center h-14 sm:h-16\">\n          <div className=\"flex items-center space-x-2 sm:space-x-3 min-w-0 flex-1\">\n            <Building2 className=\"h-7 w-7 sm:h-8 sm:w-8 text-temple-primary flex-shrink-0\" />\n            <div className=\"min-w-0 flex-1 cursor-default\">\n              <h1 className=\"text-base sm:text-lg lg:text-xl font-semibold text-gray-900 truncate select-none\">{t(\"templeTitle\")}</h1>\n              <p className=\"text-xs sm:text-sm text-gray-600 hidden lg:block truncate select-none\">{t(\"templeSubtitle\")}</p>\n            </div>\n          </div>\n          \n          {/* Navigation and Controls */}\n          <div className=\"flex items-center space-x-1 sm:space-x-2 lg:space-x-4\">\n            {/* Logout Button for Authenticated Users */}\n            {authStatus && authStatus.isAuthenticated && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleLogout}\n                className=\"flex items-center space-x-1 px-2 py-1 text-xs sm:text-sm h-8 sm:h-9 text-red-600 hover:text-red-700\"\n              >\n                <LogOut className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                <span className=\"font-medium hidden sm:inline\">{language === 'en' ? 'Logout' : 'வெளியேற'}</span>\n              </Button>\n            )}\n            \n            {/* Language Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={toggleLanguage}\n              className=\"flex items-center space-x-1 px-2 py-1 text-xs sm:text-sm h-8 sm:h-9\"\n            >\n              <Languages className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n              <span className=\"font-medium hidden sm:inline\">{language === 'en' ? 'தமிழ்' : 'English'}</span>\n            </Button>\n            \n            {/* Desktop Navigation */}\n            <nav className=\"hidden xl:flex space-x-1\">\n              {navItems.map((item) => {\n                const IconComponent = {\n                  Plus,\n                  Search,\n                  BarChart3,\n                  Upload,\n                  Link,\n                  Settings\n                }[item.icon] || Plus;\n                \n                return (\n                  <Button\n                    key={item.path}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className={`px-2 py-1 text-sm font-medium transition-colors h-8 ${\n                      isActive(item.path)\n                        ? \"text-temple-primary border-b-2 border-temple-primary bg-temple-accent\"\n                        : \"text-gray-500 hover:text-gray-700\"\n                    }`}\n                    onClick={() => setLocation(item.path)}\n                  >\n                    <IconComponent className=\"h-4 w-4 mr-1\" />\n                    <span className=\"hidden 2xl:inline\">{item.label}</span>\n                  </Button>\n                );\n              })}\n            </nav>\n\n            {/* Tablet Navigation - Icons Only */}\n            <nav className=\"hidden lg:flex xl:hidden space-x-1\">\n              {navItems.map((item) => {\n                const IconComponent = {\n                  Plus,\n                  Search,\n                  BarChart3,\n                  Upload,\n                  Link,\n                  Settings\n                }[item.icon] || Plus;\n                \n                return (\n                  <Button\n                    key={item.path}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className={`p-1 transition-colors h-8 w-8 ${\n                      isActive(item.path)\n                        ? \"text-temple-primary bg-temple-accent\"\n                        : \"text-gray-500 hover:text-gray-700\"\n                    }`}\n                    onClick={() => setLocation(item.path)}\n                    title={item.label}\n                  >\n                    <IconComponent className=\"h-4 w-4\" />\n                  </Button>\n                );\n              })}\n            </nav>\n\n            {/* Mobile Menu Button */}\n            <div className=\"lg:hidden\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n                className=\"p-1 h-8 w-8\"\n              >\n                <Menu className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile Navigation */}\n        {mobileMenuOpen && (\n          <div className=\"lg:hidden bg-white border-t shadow-lg\">\n            <div className=\"px-3 py-2 space-y-1 max-h-64 overflow-y-auto\">\n              {navItems.map((item) => {\n                const IconComponent = {\n                  Plus,\n                  Search,\n                  BarChart3,\n                  Upload,\n                  Link,\n                  Settings\n                }[item.icon] || Plus;\n                \n                return (\n                  <Button\n                    key={item.path}\n                    variant=\"ghost\"\n                    className={`w-full justify-start px-3 py-2 text-sm font-medium rounded-lg h-10 ${\n                      isActive(item.path)\n                        ? \"text-temple-primary bg-temple-accent border-l-4 border-temple-primary\"\n                        : \"text-gray-600 hover:bg-gray-50 hover:text-gray-900\"\n                    }`}\n                    onClick={() => {\n                      setLocation(item.path);\n                      setMobileMenuOpen(false);\n                    }}\n                  >\n                    <IconComponent className=\"h-4 w-4 mr-3 flex-shrink-0\" />\n                    <span className=\"truncate\">{item.label}</span>\n                  </Button>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n\n// Protected Route Component\nfunction ProtectedRoute({ component: Component, ...props }: any) {\n  const [location, setLocation] = useLocation();\n  const { data: authStatus, isLoading } = useQuery<AuthStatus>({\n    queryKey: [\"/api/auth/status\"],\n    retry: false,\n    staleTime: 0, // Always fresh\n    refetchOnWindowFocus: true,\n    refetchInterval: 5000, // Check every 5 seconds\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-temple-primary mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!authStatus?.isAuthenticated) {\n    return <AdminLogin onLoginSuccess={async () => {\n      // Invalidate auth query and wait for it to refetch\n      await queryClient.invalidateQueries({ queryKey: [\"/api/auth/status\"] });\n      // Small delay to ensure auth status is updated\n      setTimeout(() => {\n        // Stay in admin panel after login instead of redirecting to dashboard\n        setLocation(\"/admin\");\n      }, 100);\n    }} />;\n  }\n\n  return <Component {...props} />;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={() => <DonationForm onSuccess={() => {}} />} />\n      <Route path=\"/donation\" component={() => <DonationForm onSuccess={() => {}} />} />\n      <Route path=\"/lookup\" component={DonorLookup} />\n      <Route path=\"/dashboard\" component={() => <ProtectedRoute component={Dashboard} />} />\n      <Route path=\"/import\" component={() => <ProtectedRoute component={ImportData} />} />\n      <Route path=\"/admin\" component={() => <ProtectedRoute component={AdminPanel} />} />\n      <Route path=\"/google-form\" component={GoogleFormIntegration} />\n      <Route path=\"/login\" component={() => <AdminLogin onLoginSuccess={() => window.location.href = \"/admin\"} />} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <LanguageProvider>\n        <TooltipProvider>\n          <div className=\"min-h-screen bg-gray-50\">\n            <Navigation />\n            <main className=\"max-w-7xl mx-auto px-2 sm:px-4 md:px-6 lg:px-8 py-3 sm:py-4 md:py-6 lg:py-8 min-h-screen\">\n              <Router />\n            </main>\n          </div>\n          {/* Removed InstallPrompt - no longer using PWA functionality */}\n          <Toaster />\n        </TooltipProvider>\n      </LanguageProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":11169},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Tamil:wght@300;400;500;600;700&family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Temple theme colors */\n  --temple-primary: hsl(16, 100%, 59%);\n  --temple-secondary: hsl(36, 94%, 55%);\n  --temple-accent: hsl(26, 100%, 93%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', 'Noto Sans Tamil', sans-serif;\n  }\n  \n  /* Tamil text styling */\n  .tamil-text {\n    font-family: 'Noto Sans Tamil', sans-serif;\n    font-weight: 400;\n  }\n  \n  /* Bilingual support */\n  [lang=\"ta\"] {\n    font-family: 'Noto Sans Tamil', sans-serif;\n  }\n  \n  [lang=\"en\"] {\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n@layer utilities {\n  .temple-primary {\n    background-color: var(--temple-primary);\n  }\n  \n  .temple-secondary {\n    background-color: var(--temple-secondary);\n  }\n  \n  .temple-accent {\n    background-color: var(--temple-accent);\n  }\n  \n  .text-temple-primary {\n    color: var(--temple-primary);\n  }\n  \n  .text-temple-secondary {\n    color: var(--temple-secondary);\n  }\n  \n  .border-temple-primary {\n    border-color: var(--temple-primary);\n  }\n  \n  .bg-temple-primary {\n    background-color: var(--temple-primary);\n  }\n  \n  .bg-temple-secondary {\n    background-color: var(--temple-secondary);\n  }\n  \n  .bg-temple-accent {\n    background-color: var(--temple-accent);\n  }\n  \n  .hover\\:bg-temple-primary\\/90:hover {\n    background-color: hsl(16, 100%, 59%, 0.9);\n  }\n}\n","size_bytes":3087},"client/src/main.tsx":{"content":"import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n// Standard web application - no service worker needed\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":240},"home/runner/vite.config.js":{"content":"// Minimal vite config to satisfy server/vite.ts import\nexport default {\n  plugins: [],\n  resolve: {\n    alias: {\n      \"@\": \"/home/runner/workspace/client/src\",\n      \"@shared\": \"/home/runner/workspace/shared\", \n      \"@assets\": \"/home/runner/workspace/attached_assets\",\n    },\n  },\n  root: \"/home/runner/workspace/client\",\n  build: {\n    outDir: \"/home/runner/workspace/dist/public\",\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n};","size_bytes":493},"server/models/Donation.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\n\n// Donation Interface\nexport interface IDonation extends Document {\n  receiptNo: string;\n  name: string;\n  phone: string;\n  community: string;\n  location: string;\n  address?: string;\n  amount: number;\n  paymentMode: 'cash' | 'card' | 'upi' | 'bankTransfer' | 'cheque';\n  inscription: boolean;\n  donationDate?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Donation Schema\nconst DonationSchema: Schema = new Schema(\n  {\n    receiptNo: {\n      type: String,\n      required: true,\n      trim: true\n    },\n    name: {\n      type: String,\n      required: true,\n      trim: true\n    },\n    phone: {\n      type: String,\n      required: true,\n      trim: true,\n      validate: {\n        validator: function(v: string) {\n          return /^\\d{10}$/.test(v);\n        },\n        message: 'Phone number must be exactly 10 digits'\n      }\n    },\n    community: {\n      type: String,\n      required: true,\n      enum: ['any', 'payiran', 'chozhan', 'pandiyan', 'othaalan', 'vizhiyan', 'aadai', 'aavan', 'odhaalan', 'semban'],\n      default: 'any'\n    },\n    location: {\n      type: String,\n      required: true,\n      trim: true\n    },\n    address: {\n      type: String,\n      trim: true\n    },\n    amount: {\n      type: Number,\n      required: true,\n      min: 0\n    },\n    paymentMode: {\n      type: String,\n      required: true,\n      enum: ['cash', 'card', 'upi', 'bankTransfer', 'cheque']\n    },\n    inscription: {\n      type: Boolean,\n      default: false\n    },\n    donationDate: {\n      type: Date\n    }\n  },\n  {\n    timestamps: true // Automatically adds createdAt and updatedAt\n  }\n);\n\n// Create indexes for better query performance\nDonationSchema.index({ phone: 1 });\nDonationSchema.index({ receiptNo: 1 }, { unique: true }); // Moved unique to index instead of schema\nDonationSchema.index({ createdAt: -1 });\nDonationSchema.index({ community: 1 });\nDonationSchema.index({ paymentMode: 1 });\n\nexport const Donation = mongoose.model<IDonation>('Donation', DonationSchema);","size_bytes":2027},"server/models/ReceiptSequence.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\n\n// Receipt Sequence Interface\nexport interface IReceiptSequence extends Document {\n  year: number;\n  lastReceiptNumber: number;\n  updatedAt: Date;\n}\n\n// Receipt Sequence Schema\nconst ReceiptSequenceSchema: Schema = new Schema(\n  {\n    year: {\n      type: Number,\n      required: true,\n      unique: true\n    },\n    lastReceiptNumber: {\n      type: Number,\n      required: true,\n      default: 0,\n      min: 0\n    }\n  },\n  {\n    timestamps: { createdAt: false, updatedAt: true }\n  }\n);\n\nexport const ReceiptSequence = mongoose.model<IReceiptSequence>('ReceiptSequence', ReceiptSequenceSchema);","size_bytes":648},"server/types/session.ts":{"content":"// Session type definitions for Express\ndeclare module 'express-session' {\n  interface SessionData {\n    isAuthenticated?: boolean;\n    username?: string;\n    role?: 'admin' | 'superadmin';\n  }\n}","size_bytes":195},"client/src/contexts/LanguageContext.tsx":{"content":"import React from \"react\";\nimport type { Language } from \"@/lib/i18n\";\nimport { translations } from \"@/lib/i18n\";\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  toggleLanguage: () => void;\n}\n\n// Create context with default value to avoid undefined\nconst LanguageContext = React.createContext<LanguageContextType>({\n  language: 'en',\n  setLanguage: () => {},\n  toggleLanguage: () => {}\n});\n\n// Simple state management without complex hooks\nlet currentLanguage: Language = 'en';\nconst subscribers: Array<(lang: Language) => void> = [];\n\n// Initialize from localStorage if available\nif (typeof window !== 'undefined') {\n  const saved = localStorage.getItem('temple-language');\n  if (saved && (saved === 'en' || saved === 'ta')) {\n    currentLanguage = saved as Language;\n  }\n}\n\nfunction notifySubscribers() {\n  subscribers.forEach(callback => callback(currentLanguage));\n  // Save to localStorage\n  if (typeof window !== 'undefined') {\n    localStorage.setItem('temple-language', currentLanguage);\n    document.documentElement.lang = currentLanguage;\n  }\n}\n\nexport function LanguageProvider({ children }: { children: React.ReactNode }) {\n  const [language, setLanguageState] = React.useState<Language>(currentLanguage);\n\n  React.useEffect(() => {\n    const updateLanguage = (newLang: Language) => {\n      setLanguageState(newLang);\n    };\n    \n    subscribers.push(updateLanguage);\n    \n    return () => {\n      const index = subscribers.indexOf(updateLanguage);\n      if (index > -1) {\n        subscribers.splice(index, 1);\n      }\n    };\n  }, []);\n\n  const setLanguage = React.useCallback((lang: Language) => {\n    currentLanguage = lang;\n    notifySubscribers();\n  }, []);\n\n  const toggleLanguage = React.useCallback(() => {\n    const newLang = currentLanguage === 'en' ? 'ta' : 'en';\n    currentLanguage = newLang;\n    notifySubscribers();\n  }, []);\n\n  const contextValue = React.useMemo(() => ({\n    language,\n    setLanguage,\n    toggleLanguage\n  }), [language, setLanguage, toggleLanguage]);\n\n  return (\n    <LanguageContext.Provider value={contextValue}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = React.useContext(LanguageContext);\n  return context;\n}\n\nexport function useTranslation() {\n  const { language } = useLanguage();\n  \n  return React.useCallback((key: keyof typeof translations.en) => {\n    return translations[language as keyof typeof translations][key] || translations.en[key];\n  }, [language]);\n}","size_bytes":2530},"client/src/hooks/use-fast-query.ts":{"content":"import { useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { useMemo } from 'react';\n\n// Fast query hook with automatic optimization\nexport function useFastQuery<T = unknown>(options: UseQueryOptions<T>) {\n  const optimizedOptions = useMemo(() => ({\n    ...options,\n    staleTime: 2 * 60 * 1000, // 2 minutes cache for fast loading\n    cacheTime: 5 * 60 * 1000, // 5 minutes memory cache\n    refetchOnWindowFocus: false, // Prevent unnecessary refetches\n    retry: 1, // Reduce retry attempts for faster failure\n  }), [options.queryKey]);\n\n  return useQuery(optimizedOptions);\n}","size_bytes":593},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 5000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3892},"client/src/lib/i18n.ts":{"content":"export type Language = 'en' | 'ta';\n\nexport const translations = {\n  en: {\n    // Navigation\n    newDonation: \"New Donation\",\n    donorLookup: \"Donor Lookup\",\n    dashboard: \"Dashboard\",\n    importData: \"Import Data\",\n    googleFormSetup: \"Google Form Setup\",\n    adminPanel: \"Admin Panel\",\n    \n    // Common\n    name: \"Name\",\n    phone: \"Phone Number\",\n    community: \"Kulam\",\n    location: \"Location\",\n    address: \"Address\",\n    amount: \"Amount\",\n    paymentMode: \"Payment Mode\",\n    inscription: \"Inscription\",\n    yes: \"Yes\",\n    no: \"No\",\n    save: \"Save\",\n    cancel: \"Cancel\",\n    reset: \"Reset\",\n    search: \"Search\",\n    export: \"Export\",\n    loading: \"Loading...\",\n    \n    // Donation Form\n    donationFormTitle: \"New Donation Entry\",\n    donationFormSubtitle: \"Enter donor information and donation details\",\n    receiptNumber: \"Receipt Number\",\n    phoneRequired: \"Phone Number *\",\n    phoneHelp: \"Enter 10-digit phone number\",\n    nameRequired: \"Donor Name *\",\n    donationAmount: \"Donation Amount\",\n    inscriptionRequired: \"Inscription Required\",\n    addDonation: \"Add Donation\",\n    adding: \"Adding...\",\n    \n    // Communities\n    payiran: \"Payiran\",\n    semban: \"Semban\",\n    othaalan: \"Othaalan\",\n    aavan: \"Aavan\",\n    aadai: \"Aadai\",\n    vizhiyan: \"Vizhiyan\",\n    \n    // Payment Modes\n    cash: \"Cash\",\n    card: \"Debit/Credit Card\",\n    upi: \"UPI\",\n    bankTransfer: \"Bank Transfer\",\n    cheque: \"Cheque\",\n    \n    // Donor History\n    donorHistory: \"Donor History\",\n    previousDonations: \"Previous donations\",\n    lastDonation: \"Last donation\",\n    totalVisits: \"Total visits\",\n    \n    // Dashboard\n    collectionDashboard: \"Collection Dashboard\",\n    totalCollection: \"Total Collection\",\n    totalDonors: \"Total Donors\",\n    thisMonth: \"This Month\",\n    averageDonation: \"Average Donation\",\n    paymentModeDistribution: \"Payment Mode Distribution\",\n    recentDonations: \"Recent Donations\",\n    \n    // Lookup\n    donorLookupTitle: \"Donor Lookup\",\n    searchByPhone: \"Search by Phone\",\n    filterByCommunity: \"Filter by Kulam\",\n    allCommunities: \"Any\",\n    noDonorsFound: \"No donors found matching your search criteria\",\n    enterAtLeast3Digits: \"Enter at least 3 digits to search or select a community filter\",\n    \n    // Success/Error Messages\n    success: \"Success\",\n    error: \"Error\",\n    donationSuccess: \"Donation recorded successfully!\",\n    donationError: \"Failed to create donation\",\n    validationError: \"Please check the form for errors\",\n    receiptNumberLabel: \"Receipt number:\",\n    \n    // Import functionality\n    importDataTitle: \"Import Data\",\n    uploadCsvFile: \"Upload CSV File\",\n    csvTemplate: \"CSV Template\",\n    downloadTemplate: \"Download Template\",\n    importingData: \"Importing...\",\n    selectFile: \"Select File\",\n    removeFile: \"Remove\",\n    importSuccess: \"Data imported successfully\",\n    importError: \"Failed to import data\",\n    \n    // Temple\n    templeTitle: \"Temple Donation System\",\n    templeSubtitle: \"Manage donations with phone-based donor tracking\",\n  },\n  ta: {\n    // Navigation\n    newDonation: \"புதிய நன்கொடை\",\n    donorLookup: \"நன்கொடையாளர் தேடல்\",\n    dashboard: \"டாஷ்போர்டு\",\n    importData: \"தரவு இறக்குமதி\",\n    googleFormSetup: \"கூகிள் படிவ அமைப்பு\",\n    adminPanel: \"நிர்வாக பாட்டு\",\n    \n    // Common\n    name: \"பெயர்\",\n    phone: \"தொலைபேசி எண்\",\n    community: \"குலம்\",\n    location: \"இடம்\",\n    address: \"முகவரி\",\n    amount: \"தொகை\",\n    paymentMode: \"கட்டண முறை\",\n    inscription: \"கல்வெட்டு\",\n    yes: \"ஆம்\",\n    no: \"இல்லை\",\n    save: \"சேமி\",\n    cancel: \"ரத்து செய்\",\n    reset: \"மீட்டமை\",\n    search: \"தேடு\",\n    export: \"ஏற்றுமதி\",\n    loading: \"ஏற்றுகிறது...\",\n    \n    // Donation Form\n    donationFormTitle: \"புதிய நன்கொடை பதிவு\",\n    donationFormSubtitle: \"நன்கொடையாளர் தகவல் மற்றும் நன்கொடை விவரங்களை உள்ளிடவும்\",\n    receiptNumber: \"ரசீது எண்\",\n    phoneRequired: \"தொலைபேசி எண் *\",\n    phoneHelp: \"10 இலக்க தொலைபேசி எண்ணை உள்ளிடவும்\",\n    nameRequired: \"நன்கொடையாளர் பெயர் *\",\n    donationAmount: \"நன்கொடை தொகை\",\n    inscriptionRequired: \"கல்வெட்டு\",\n    addDonation: \"நன்கொடை சேர்\",\n    adding: \"சேர்க்கிறது...\",\n    \n    // Communities\n    payiran: \"பயிரன்\",\n    semban: \"செம்பன்\",\n    othaalan: \"ஓதாளன்\",\n    aavan: \"ஆவன்\",\n    aadai: \"ஆடை\",\n    vizhiyan: \"விழியன்\",\n    \n    // Payment Modes\n    cash: \"ரொக்கம்\",\n    card: \"அட்டை\",\n    upi: \"யூபிஐ\",\n    bankTransfer: \"வங்கி பரிமாற்றம்\",\n    cheque: \"காசோலை\",\n    \n    // Donor History\n    donorHistory: \"நன்கொடையாளர் வரலாறு\",\n    previousDonations: \"முந்தைய நன்கொடைகள்\",\n    lastDonation: \"கடைசி நன்கொடை\",\n    totalVisits: \"மொத்த வருகைகள்\",\n    \n    // Dashboard\n    collectionDashboard: \"வசூல் டாஷ்போர்டு\",\n    totalCollection: \"மொத்த வசூல்\",\n    totalDonors: \"மொத்த நன்கொடையாளர்கள்\",\n    thisMonth: \"இந்த மாதம்\",\n    averageDonation: \"சராசரி நன்கொடை\",\n    paymentModeDistribution: \"கொடுப்பன முறை விநியோகம்\",\n    recentDonations: \"சமீபத்திய நன்கொடைகள்\",\n    \n    // Lookup\n    donorLookupTitle: \"நன்கொடையாளர் தேடல்\",\n    searchByPhone: \"தொலைபேசி மூலம் தேடு\",\n    filterByCommunity: \"குலம் மூலம் வடிகட்டு\",\n    allCommunities: \"ஏதேனும்\",\n    noDonorsFound: \"உங்கள் தேடல் நிபந்தனைகளுக்கு பொருந்தும் நன்கொடையாளர்கள் இல்லை\",\n    enterAtLeast3Digits: \"தேட குறைந்தது 3 இலக்கங்களை உள்ளிடவும் அல்லது குல வடிகட்டியை தேர்ந்தெடுக்கவும்\",\n    \n    // Success/Error Messages\n    success: \"வெற்றி\",\n    error: \"பிழை\",\n    donationSuccess: \"நன்கொடை வெற்றிகரமாக பதிவு செய்யப்பட்டது!\",\n    donationError: \"நன்கொடை உருவாக்குவதில் தோல்வி\",\n    validationError: \"படிவத்தில் பிழைகளை சரிபார்க்கவும்\",\n    receiptNumberLabel: \"ரசீது எண்:\",\n    \n    // Import functionality\n    importDataTitle: \"தரவு இறக்குமதி\",\n    uploadCsvFile: \"CSV கோப்பை பதிவேற்று\",\n    csvTemplate: \"CSV டெம்ப்ளேட்\",\n    downloadTemplate: \"டெம்ப்ளேட் பதிவிறக்கு\",\n    importingData: \"இறக்குமதி செய்கிறது...\",\n    selectFile: \"கோப்பைத் தேர்ந்தெடு\",\n    removeFile: \"அகற்று\",\n    importSuccess: \"தரவு வெற்றிகரமாக இறக்குமதி செய்யப்பட்டது\",\n    importError: \"தரவு இறக்குமதி செய்வதில் தோல்வி\",\n    \n    // Temple\n    templeTitle: \"கோவில் நன்கொடை அமைப்பு\",\n    templeSubtitle: \"தொலைபேசி அடிப்படையில் நன்கொடையாளர் கண்காணிப்புடன் நன்கொடைகளை நிர்வகிக்கவும்\",\n  }\n};\n\nexport const getTranslation = (key: keyof typeof translations.en, language: Language): string => {\n  return translations[language][key as keyof typeof translations.ta] || translations.en[key];\n};\n\nexport const formatCurrencyTamil = (amount: number): string => {\n  return `₹${amount.toLocaleString('ta-IN')}`;\n};\n\nexport const formatDateTamil = (date: string | Date): string => {\n  return new Intl.DateTimeFormat('ta-IN', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  }).format(new Date(date));\n};","size_bytes":8976},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: 0, // Disable caching for debugging date issues\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1414},"client/src/lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function formatCurrency(amount: number): string {\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency: 'INR',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n}\n\nexport function formatDate(date: string | Date): string {\n  return new Intl.DateTimeFormat('en-IN', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  }).format(new Date(date));\n}\n\nexport function formatDateTime(date: string | Date): string {\n  return new Intl.DateTimeFormat('en-IN', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n  }).format(new Date(date));\n}\n\nexport function formatPhoneNumber(phone: string): string {\n  // Format Indian phone numbers\n  if (phone.length === 10) {\n    return `+91 ${phone.slice(0, 5)} ${phone.slice(5)}`;\n  }\n  return phone;\n}\n\nexport function downloadCSV(content: string, filename: string) {\n  const blob = new Blob([content], { type: 'text/csv' });\n  const url = window.URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = filename;\n  a.click();\n  window.URL.revokeObjectURL(url);\n}\n","size_bytes":1339},"client/src/pages/admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Lock, User, Building2, Eye, EyeOff } from \"lucide-react\";\nimport { useLanguage, useTranslation } from \"@/contexts/LanguageContext\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\ninterface AdminLoginProps {\n  onLoginSuccess: () => void;\n}\n\nexport default function AdminLogin({ onLoginSuccess }: AdminLoginProps) {\n  const { language } = useLanguage();\n  const t = useTranslation();\n  const [error, setError] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      // Fast login optimization - reduce timeout and add compression\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 second timeout\n      \n      try {\n        const response = await fetch(\"/api/auth/login\", {\n          method: \"POST\",\n          headers: { \n            \"Content-Type\": \"application/json\",\n            \"Accept-Encoding\": \"gzip, deflate\"\n          },\n          credentials: \"include\",\n          body: JSON.stringify(data),\n          signal: controller.signal\n        });\n        clearTimeout(timeoutId);\n        \n        if (!response.ok) {\n          throw new Error(\"Invalid credentials\");\n        }\n        return response.json();\n      } catch (error) {\n        clearTimeout(timeoutId);\n        throw error;\n      }\n    },\n    onSuccess: async () => {\n      setError(\"\");\n      // Invalidate specific queries instead of clearing all for faster load\n      await queryClient.invalidateQueries({ queryKey: ['/api/auth/status'] });\n      await queryClient.invalidateQueries({ queryKey: ['donations'] });\n      await queryClient.invalidateQueries({ queryKey: ['dashboard-stats'] });\n      // Small delay to ensure queries are invalidated\n      setTimeout(() => {\n        onLoginSuccess();\n      }, 50);\n    },\n    onError: (error: any) => {\n      setError(error.message || \"Login failed\");\n    },\n  });\n\n  const onSubmit = (data: LoginForm) => {\n    // Prevent double submission\n    if (loginMutation.isPending) {\n      return;\n    }\n    setError(\"\");\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <Building2 className=\"mx-auto h-12 w-12 text-temple-primary\" />\n          <h2 className=\"mt-6 text-3xl font-bold text-gray-900\">\n            {language === \"en\" ? \"Admin Login\" : \"நிர்வாக உள்நுழைவு\"}\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-600\">\n            {language === \"en\" \n              ? \"Sign in to access the admin panel\" \n              : \"நிர்வாக பாட்டை அணுக உள்நுழைக\"}\n          </p>\n        </div>\n\n        <Card className=\"shadow-lg\">\n          <CardHeader>\n            <CardTitle className=\"text-center text-lg\">\n              {language === \"en\" ? \"Temple Admin Access\" : \"கோயில் நிர்வாக அணுகல்\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"username\" className=\"text-sm font-medium\">\n                    {language === \"en\" ? \"Username\" : \"பயனர் பெயர்\"}\n                  </Label>\n                  <div className=\"relative mt-1\">\n                    <User className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                    <Input\n                      id=\"username\"\n                      type=\"text\"\n                      placeholder={language === \"en\" ? \"Enter username\" : \"பயனர் பெயரை உள்ளிடவும்\"}\n                      className=\"pl-10 h-12\"\n                      {...form.register(\"username\")}\n                    />\n                  </div>\n                  {form.formState.errors.username && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {form.formState.errors.username.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"password\" className=\"text-sm font-medium\">\n                    {language === \"en\" ? \"Password\" : \"கடவுச்சொல்\"}\n                  </Label>\n                  <div className=\"relative mt-1\">\n                    <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                    <Input\n                      id=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      placeholder={language === \"en\" ? \"Enter password\" : \"கடவுச்சொல்லை உள்ளிடவும்\"}\n                      className=\"pl-10 pr-10 h-12\"\n                      {...form.register(\"password\")}\n                    />\n                    <button\n                      type=\"button\"\n                      className=\"absolute right-3 top-3 h-4 w-4 text-gray-400 hover:text-gray-600\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      title={showPassword ? \n                        (language === \"en\" ? \"Hide password\" : \"கடவுச்சொல்லை மறைக்க\") : \n                        (language === \"en\" ? \"Show password\" : \"கடவுச்சொல்லைக் காட்ட\")\n                      }\n                    >\n                      {showPassword ? <Eye className=\"h-4 w-4\" /> : <EyeOff className=\"h-4 w-4\" />}\n                    </button>\n                  </div>\n                  {form.formState.errors.password && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {form.formState.errors.password.message}\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-temple-primary hover:bg-temple-primary/90 h-12 text-base font-semibold disabled:opacity-50 disabled:cursor-not-allowed\"\n                disabled={loginMutation.isPending}\n              >\n                {loginMutation.isPending\n                  ? (language === \"en\" ? \"Signing in...\" : \"உள்நுழைகிறது...\")\n                  : (language === \"en\" ? \"Sign In\" : \"உள்நுழை\")\n                }\n              </Button>\n            </form>\n\n\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7706},"client/src/pages/admin-panel.tsx":{"content":"import { useState, useEffect, memo, useMemo } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { LoadingSpinner, FastSkeleton } from \"@/components/ui/loading-spinner\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { formatCurrency, formatDate, formatPhoneNumber } from \"@/lib/utils\";\nimport { formatCurrencyTamil, formatDateTamil } from \"@/lib/i18n\";\nimport { useLanguage, useTranslation } from \"@/contexts/LanguageContext\";\nimport { Download, Plus, Edit, Trash2, LogOut, Settings, AlertTriangle, Calendar as CalendarIcon } from \"lucide-react\";\n// Removed TypeScript imports - using JavaScript\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Modal } from \"@/components/ui/modal\";\nimport AdminLogin from \"./admin-login\";\nimport AdminSettings from \"./admin-settings\";\nimport DonationForm from \"./donation-form\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Donation } from \"@/../../shared/mongodb-schema\";\n\nexport default function AdminPanel() {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null);\n  const [username, setUsername] = useState(\"\");\n  const [showSettings, setShowSettings] = useState(false);\n  const [showManualEntry, setShowManualEntry] = useState(false);\n  const [editingDonation, setEditingDonation] = useState<Donation | null>(null);\n  const [deletingDonation, setDeletingDonation] = useState<Donation | null>(null);\n  const [showDeleteAllDialog, setShowDeleteAllDialog] = useState(false);\n  const { language } = useLanguage();\n  const t = useTranslation();\n  const { toast } = useToast();\n  const [filters, setFilters] = useState({\n    dateRange: \"all\",\n    community: \"any\",\n    paymentMode: \"all\",\n    amountRange: \"all\",\n    startDate: \"\",\n    endDate: \"\",\n  });\n\n  // Check authentication status on component mount (optimized for speed)\n  useEffect(() => {\n    const checkAuth = async () => {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 1500); // Fast 1.5 second timeout\n      \n      try {\n        const response = await fetch(\"/api/auth/status\", {\n          credentials: \"include\",\n          signal: controller.signal\n        });\n        clearTimeout(timeoutId);\n        const data = await response.json();\n        setIsAuthenticated(data.isAuthenticated);\n        setUsername(data.username || \"\");\n      } catch (error) {\n        clearTimeout(timeoutId);\n        setIsAuthenticated(false);\n      }\n    };\n    checkAuth();\n  }, []);\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/auth/logout\", {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      setIsAuthenticated(false);\n      setUsername(\"\");\n    },\n  });\n\n  const handleLoginSuccess = () => {\n    setIsAuthenticated(true);\n    // Re-check authentication status to get username (fast version)\n    const checkAuth = async () => {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 1000); // Very fast 1 second timeout\n      \n      try {\n        const response = await fetch(\"/api/auth/status\", {\n          credentials: \"include\",\n          signal: controller.signal\n        });\n        clearTimeout(timeoutId);\n        const data = await response.json();\n        setIsAuthenticated(data.isAuthenticated);\n        setUsername(data.username || \"\");\n      } catch (error) {\n        clearTimeout(timeoutId);\n        setIsAuthenticated(false);\n      }\n    };\n    checkAuth();\n  };\n\n  const { data: donations = [], isLoading } = useQuery<Donation[]>({\n    queryKey: [\"/api/donations\", filters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value && value !== \"all\" && value !== \"any\") {\n          params.append(key, value);\n        }\n      });\n\n      const response = await fetch(`/api/donations?${params}`, {\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch donations\");\n      }\n\n      return response.json();\n    },\n    enabled: isAuthenticated === true, // Only run query when authenticated\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/donations/${id}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to delete donation\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/donations\"] });\n      toast({\n        title: \"Success\",\n        description: \"Donation deleted successfully\",\n      });\n      setDeletingDonation(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete donation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteAllMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/donations/all\", {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to delete all donations\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/donations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: language === \"ta\" ? \"அனைத்து நன்கொடைகளும் வெற்றிகரமாக நீக்கப்பட்டன\" : \"All donations deleted successfully\",\n      });\n      setShowDeleteAllDialog(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: language === \"ta\" ? \"அனைத்து நன்கொடைகளையும் நீக்க முடியவில்லை\" : \"Failed to delete all donations\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const handleDelete = (donation: Donation) => {\n    setDeletingDonation(donation);\n  };\n\n  const confirmDelete = () => {\n    if (deletingDonation) {\n      deleteMutation.mutate((deletingDonation as any)._id || (deletingDonation as any).id);\n    }\n  };\n\n  const confirmDeleteAll = () => {\n    deleteAllMutation.mutate();\n  };\n\n  const handleExport = async () => {\n    try {\n      const response = await fetch(\"/api/donations/export\", {\n        credentials: \"include\",\n      });\n\n      if (response.ok) {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = \"donations.csv\";\n        a.click();\n        window.URL.revokeObjectURL(url);\n      }\n    } catch (error) {\n      console.error(\"Export failed:\", error);\n    }\n  };\n\n  const getPaymentModeColor = (mode: string) => {\n    const colors: Record<string, string> = {\n      cash: \"bg-green-100 text-green-800\",\n      upi: \"bg-blue-100 text-blue-800\",\n      card: \"bg-purple-100 text-purple-800\",\n      \"bank-transfer\": \"bg-orange-100 text-orange-800\",\n      cheque: \"bg-gray-100 text-gray-800\",\n    };\n    return colors[mode] || \"bg-gray-100 text-gray-800\";\n  };\n\n  // Show login form if not authenticated\n  if (isAuthenticated === false) {\n    return <AdminLogin onLoginSuccess={handleLoginSuccess} />;\n  }\n\n  // Show loading while checking authentication\n  if (isAuthenticated === null) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-lg\">\n          {language === \"en\" ? \"Loading...\" : \"ஏற்றுகிறது...\"}\n        </div>\n      </div>\n    );\n  }\n\n  // Show settings page if requested\n  if (showSettings) {\n    return <AdminSettings onBack={() => setShowSettings(false)} />;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-lg\">\n          {language === \"en\"\n            ? \"Loading donations...\"\n            : \"நன்கொடைகளை ஏற்றுகிறது...\"}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full space-y-4 sm:space-y-6 px-2 sm:px-4\">\n      <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-3\">\n        <div className=\"flex items-center gap-3\">\n          <h2 className=\"text-lg sm:text-2xl font-semibold text-gray-900\">\n            {t(\"adminPanel\")}\n          </h2>\n          <div className=\"text-sm text-gray-500\">\n            {language === \"en\"\n              ? `Welcome, ${username}`\n              : `வரவேற்கிறோம், ${username}`}\n          </div>\n        </div>\n        <div className=\"flex flex-col sm:flex-row gap-2\">\n          <Button\n            className=\"bg-temple-primary hover:bg-temple-primary/90 text-sm sm:text-base h-10 sm:h-11 disabled:opacity-50 disabled:cursor-not-allowed\"\n            onClick={(e) => {\n              e.preventDefault();\n              setShowManualEntry(true);\n            }}\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            {language === \"en\" ? \"Add Manual Entry\" : \"கைமுறை பதிவு சேர்\"}\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={(e) => {\n              e.preventDefault();\n              handleExport();\n            }}\n            className=\"text-sm sm:text-base h-10 sm:h-11 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            {t(\"export\")}\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={(e) => {\n              e.preventDefault();\n              setShowSettings(true);\n            }}\n            className=\"text-sm sm:text-base h-10 sm:h-11 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            <Settings className=\"h-4 w-4 mr-2\" />\n            {language === \"en\" ? \"Settings\" : \"அமைப்புகள்\"}\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={(e) => {\n              e.preventDefault();\n              if (donations.length > 0 && !deleteAllMutation.isPending) {\n                setShowDeleteAllDialog(true);\n              }\n            }}\n            className=\"text-sm sm:text-base h-10 sm:h-11 text-red-600 hover:text-red-700 border-red-200 hover:border-red-300\"\n            disabled={donations.length === 0 || deleteAllMutation.isPending}\n          >\n            <Trash2 className=\"h-4 w-4 mr-2\" />\n            {deleteAllMutation.isPending \n              ? (language === \"en\" ? \"Deleting...\" : \"நீக்குகிறது...\")\n              : (language === \"en\" ? \"Delete All\" : \"அனைத்தையும் நீக்கு\")\n            }\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={(e) => {\n              e.preventDefault();\n              if (!logoutMutation.isPending) {\n                handleLogout();\n              }\n            }}\n            className=\"text-sm sm:text-base h-10 sm:h-11 text-red-600 hover:text-red-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n            disabled={logoutMutation.isPending}\n          >\n            <LogOut className=\"h-4 w-4 mr-2\" />\n            {logoutMutation.isPending\n              ? (language === \"en\" ? \"Logging out...\" : \"வெளியேறுகிறது...\")\n              : (language === \"en\" ? \"Logout\" : \"வெளியேறு\")\n            }\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"shadow-lg\">\n        <CardContent className=\"p-3 sm:p-6\">\n          <h3 className=\"text-base sm:text-lg font-semibold text-gray-900 mb-3 sm:mb-4\">\n            {language === \"en\" ? \"Filters\" : \"வடிகட்டிகள்\"}\n          </h3>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Date Range\n              </label>\n              <Select\n                value={filters.dateRange}\n                onValueChange={(value) => {\n                  setFilters((prev) => ({ ...prev, dateRange: value }));\n                  if (value !== \"custom\") {\n                    setFilters((prev) => ({ ...prev, startDate: \"\", endDate: \"\" }));\n                  }\n                }}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Time</SelectItem>\n                  <SelectItem value=\"today\">Today</SelectItem>\n                  <SelectItem value=\"week\">This Week</SelectItem>\n                  <SelectItem value=\"month\">This Month</SelectItem>\n                  <SelectItem value=\"custom\">Custom Range</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {/* Custom Date Range Inputs */}\n            {filters.dateRange === \"custom\" && (\n              <>\n                <div>\n                  <Label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Start Date\n                  </Label>\n                  <Input\n                    type=\"date\"\n                    value={filters.startDate}\n                    onChange={(e) =>\n                      setFilters((prev) => ({ ...prev, startDate: e.target.value }))\n                    }\n                    className=\"h-10\"\n                  />\n                </div>\n                <div>\n                  <Label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    End Date\n                  </Label>\n                  <Input\n                    type=\"date\"\n                    value={filters.endDate}\n                    onChange={(e) =>\n                      setFilters((prev) => ({ ...prev, endDate: e.target.value }))\n                    }\n                    className=\"h-10\"\n                  />\n                </div>\n              </>\n            )}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Kulam\n              </label>\n              <Select\n                value={filters.community}\n                onValueChange={(value) =>\n                  setFilters((prev) => ({ ...prev, community: value }))\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All Kulam\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"any\">\n                    {language === \"en\" ? \"Any\" : \"எதையும்\"}\n                  </SelectItem>\n                  <SelectItem value=\"payiran\">{t(\"payiran\")}</SelectItem>\n                  <SelectItem value=\"semban\">{t(\"semban\")}</SelectItem>\n                  <SelectItem value=\"othaalan\">{t(\"othaalan\")}</SelectItem>\n                  <SelectItem value=\"aavan\">{t(\"aavan\")}</SelectItem>\n                  <SelectItem value=\"aadai\">{t(\"aadai\")}</SelectItem>\n                  <SelectItem value=\"vizhiyan\">{t(\"vizhiyan\")}</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Payment Mode\n              </label>\n              <Select\n                value={filters.paymentMode}\n                onValueChange={(value) =>\n                  setFilters((prev) => ({ ...prev, paymentMode: value }))\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Modes</SelectItem>\n                  <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                  <SelectItem value=\"card\">Card</SelectItem>\n                  <SelectItem value=\"cash\">Cash</SelectItem>\n                  <SelectItem value=\"cheque\">Cheque</SelectItem>\n                  <SelectItem value=\"upi\">UPI</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Amount Range\n              </label>\n              <Select\n                value={filters.amountRange}\n                onValueChange={(value) =>\n                  setFilters((prev) => ({ ...prev, amountRange: value }))\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Amounts</SelectItem>\n                  <SelectItem value=\"0-1000\">₹0 - ₹1,000</SelectItem>\n                  <SelectItem value=\"1001-5000\">₹1,001 - ₹5,000</SelectItem>\n                  <SelectItem value=\"5001-10000\">₹5,001 - ₹10,000</SelectItem>\n                  <SelectItem value=\"10000+\">₹10,000+</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Donations Table */}\n      <Card>\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              All Donations\n            </h3>\n            <p className=\"text-sm text-gray-600\">\n              Showing {donations.length} record\n              {donations.length !== 1 ? \"s\" : \"\"}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"overflow-auto max-h-96 border-t\">\n          {isLoading ? (\n            <div className=\"p-8 text-center\">\n              <p className=\"text-gray-500\">Loading donations...</p>\n            </div>\n          ) : donations.length === 0 ? (\n            <div className=\"p-8 text-center\">\n              <p className=\"text-gray-500\">\n                No donations found matching your criteria\n              </p>\n            </div>\n          ) : (\n            <table className=\"w-full text-sm min-w-max\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    S.No\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Receipt No\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Name\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Kulam\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Location\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Address\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Phone\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Amount\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Payment Mode\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Inscription\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Date\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {donations.map((donation, index) => (\n                  <tr key={(donation as any)._id || (donation as any).id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {index + 1}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-temple-primary\">\n                      {donation.receiptNo}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {donation.name}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-600\">\n                      {donation.community || \"-\"}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-600\">\n                      {donation.location || \"-\"}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-600\">\n                      {(donation as any).address || \"-\"}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-600\">\n                      {formatPhoneNumber(donation.phone)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-temple-primary\">\n                      {formatCurrency(donation.amount)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Badge\n                        className={getPaymentModeColor(donation.paymentMode)}\n                      >\n                        {donation.paymentMode.toUpperCase()}\n                      </Badge>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-600\">\n                      {donation.inscription ? \"Yes\" : \"No\"}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-600\">\n                      {donation.donationDate ? formatDate(donation.donationDate) : formatDate(donation.createdAt)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"text-temple-primary hover:text-temple-primary/80\"\n                          onClick={() => setEditingDonation(donation)}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"text-red-600 hover:text-red-800\"\n                          onClick={() => handleDelete(donation)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </div>\n      </Card>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog\n        open={!!deletingDonation}\n        onOpenChange={() => setDeletingDonation(null)}\n      >\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Confirm Deletion</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to delete this donation record? This action\n              cannot be undone.\n              <br />\n              <br />\n              <strong>Receipt:</strong> {(deletingDonation as any)?.receiptNo}\n              <br />\n              <strong>Donor:</strong> {(deletingDonation as any)?.name}\n              <br />\n              <strong>Amount:</strong>{\" \"}\n              {deletingDonation && formatCurrency((deletingDonation as any).amount)}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex justify-end space-x-2 mt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={(e) => {\n                e.preventDefault();\n                if (!deleteMutation.isPending) {\n                  setDeletingDonation(null);\n                }\n              }}\n              disabled={deleteMutation.isPending}\n              className=\"disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={(e) => {\n                e.preventDefault();\n                if (!deleteMutation.isPending) {\n                  confirmDelete();\n                }\n              }}\n              disabled={deleteMutation.isPending}\n              className=\"disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {deleteMutation.isPending ? \"Deleting...\" : \"Delete\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete All Confirmation Dialog */}\n      <Dialog\n        open={showDeleteAllDialog}\n        onOpenChange={(open) => {\n          setShowDeleteAllDialog(open);\n          if (!open) {\n            // Clear the input when dialog closes\n            const input = document.getElementById('deleteConfirmation') as HTMLInputElement;\n            if (input) input.value = '';\n          }\n        }}\n      >\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-red-600\">\n              <AlertTriangle className=\"h-5 w-5\" />\n              {language === \"en\" ? \"Delete All Donations\" : \"அனைத்து நன்கொடைகளையும் நீக்கு\"}\n            </DialogTitle>\n            <DialogDescription className=\"text-base\">\n              <div className=\"space-y-3\">\n                <p className=\"font-medium text-red-800\">\n                  {language === \"en\" \n                    ? \"⚠️ WARNING: This action is irreversible!\"\n                    : \"⚠️ எச்சரிக்கை: இந்த செயலை மாற்ற முடியாது!\"}\n                </p>\n                <p>\n                  {language === \"en\" \n                    ? `You are about to permanently delete all ${donations.length} donation records from the database. This will:`\n                    : `நீங்கள் ${donations.length} நன்கொடை பதிவுகளை தரவுத்தளத்திலிருந்து நிரந்தரமாக நீக்க போகிறீர்கள். இது:`}\n                </p>\n                <ul className=\"list-disc pl-5 space-y-1 text-sm\">\n                  <li>{language === \"en\" ? \"Remove all donation history\" : \"அனைத்து நன்கொடை வரலாறுகளையும் நீக்கும்\"}</li>\n                  <li>{language === \"en\" ? \"Clear all donor records\" : \"அனைத்து நன்கொடையாளர் பதிவுகளையும் அழிக்கும்\"}</li>\n                  <li>{language === \"en\" ? \"Reset dashboard statistics\" : \"டாஷ்போர்டு புள்ளிவிவரங்களை ரீசெட் செய்யும்\"}</li>\n                  <li>{language === \"en\" ? \"Cannot be undone\" : \"மாற்ற முடியாது\"}</li>\n                </ul>\n                <p className=\"font-medium text-gray-900\">\n                  {language === \"en\" \n                    ? \"Type 'DELETE ALL' to confirm:\"\n                    : \"'DELETE ALL' என்று டைப் செய்து உறுதிப்படுத்தவும்:\"}\n                </p>\n              </div>\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <input\n              type=\"text\"\n              id=\"deleteConfirmation\"\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent\"\n              placeholder=\"DELETE ALL\"\n              onInput={(e) => {\n                const input = e.target as HTMLInputElement;\n                const confirmButton = document.getElementById('confirmDeleteAllBtn') as HTMLButtonElement;\n                if (confirmButton) {\n                  confirmButton.disabled = input.value !== 'DELETE ALL' || deleteAllMutation.isPending;\n                }\n              }}\n            />\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  if (!deleteAllMutation.isPending) {\n                    setShowDeleteAllDialog(false);\n                    // Clear the input\n                    const input = document.getElementById('deleteConfirmation') as HTMLInputElement;\n                    if (input) input.value = '';\n                  }\n                }}\n                disabled={deleteAllMutation.isPending}\n                className=\"disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {language === \"en\" ? \"Cancel\" : \"ரத்து\"}\n              </Button>\n              <Button\n                id=\"confirmDeleteAllBtn\"\n                variant=\"destructive\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  if (!deleteAllMutation.isPending) {\n                    confirmDeleteAll();\n                  }\n                }}\n                disabled={true} // Initially disabled until user types confirmation\n                className=\"bg-red-600 hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {deleteAllMutation.isPending \n                  ? (language === \"en\" ? \"Deleting...\" : \"நீக்குகிறது...\")\n                  : (language === \"en\" ? \"Delete All\" : \"அனைத்தையும் நீக்கு\")}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Manual Entry Modal */}\n      {showManualEntry && (\n        <Modal\n          isOpen={showManualEntry}\n          onClose={() => setShowManualEntry(false)}\n          title={language === \"en\" ? \"Add Manual Entry\" : \"கைமுறை பதிவு சேர்\"}\n          size=\"xl\"\n        >\n          <DonationForm\n            initialData={undefined}\n            onSuccess={() => {\n              setShowManualEntry(false);\n              queryClient.invalidateQueries({ queryKey: [\"/api/donations\"] });\n              toast({\n                title: language === \"en\" ? \"Success\" : \"வெற்றி\",\n                description: language === \"en\" \n                  ? \"Manual donation entry added successfully!\"\n                  : \"கைமுறை நன்கொடை பதிவு வெற்றிகரமாக சேர்க்கப்பட்டது!\",\n              });\n            }}\n          />\n        </Modal>\n      )}\n\n      {/* Edit Modal */}\n      {editingDonation && (\n        <Modal\n          isOpen={!!editingDonation}\n          onClose={() => setEditingDonation(null)}\n          title=\"Edit Donation\"\n          size=\"xl\"\n        >\n          <DonationForm\n            initialData={editingDonation as any}\n            onSuccess={() => {\n              setEditingDonation(null);\n              queryClient.invalidateQueries({ queryKey: [\"/api/donations\"] });\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n","size_bytes":32902},"client/src/pages/admin-settings.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Key, User, AlertCircle, CheckCircle, Eye, EyeOff } from \"lucide-react\";\nimport { useLanguage, useTranslation } from \"@/contexts/LanguageContext\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst credentialsSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newUsername: z.string().min(3, \"Username must be at least 3 characters\"),\n  newPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype CredentialsForm = z.infer<typeof credentialsSchema>;\n\ninterface AdminSettingsProps {\n  onBack: () => void;\n}\n\nexport default function AdminSettings({ onBack }: AdminSettingsProps) {\n  const { language } = useLanguage();\n  const t = useTranslation();\n  const queryClient = useQueryClient();\n  const [message, setMessage] = useState<{ type: \"success\" | \"error\"; text: string } | null>(null);\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const form = useForm<CredentialsForm>({\n    resolver: zodResolver(credentialsSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newUsername: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const changeCredentialsMutation = useMutation({\n    mutationFn: async (data: CredentialsForm) => {\n      console.log('Attempting to change credentials...', { newUsername: data.newUsername });\n      const response = await apiRequest(\"POST\", \"/api/auth/change-credentials\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      console.log('Credentials changed successfully:', data);\n      const successMessage = language === \"en\" \n        ? \"Credentials updated successfully! Redirecting to dashboard...\" \n        : \"அறிமுக தகவல் வெற்றிகரமாக மாற்றப்பட்டது! டாஷ்போர்டுக்கு அனுப்பப்படுகிறது...\";\n      setMessage({ type: \"success\", text: successMessage });\n      form.reset();\n      \n      // Invalidate auth status to refresh session\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/status\"] });\n      \n      // Redirect to dashboard after successful credential change\n      setTimeout(() => {\n        onBack();\n      }, 2000); // Wait 2 seconds to show success message\n    },\n    onError: (error: any) => {\n      console.error('Failed to change credentials:', error);\n      const errorMessage = error.message || (language === \"en\" ? \"Failed to change credentials\" : \"அறிமுக தகவல் மாற்றுவதில் தோல்வி\");\n      setMessage({ type: \"error\", text: errorMessage });\n    },\n  });\n\n  const onSubmit = (data: CredentialsForm) => {\n    setMessage(null);\n    changeCredentialsMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"w-full max-w-2xl mx-auto space-y-6 px-4\">\n      <div className=\"flex items-center gap-4 mb-6\">\n        <Button variant=\"outline\" onClick={onBack}>\n          {language === \"en\" ? \"← Back to Admin Panel\" : \"← நிர்வாக பாட்டுக்கு திரும்பு\"}\n        </Button>\n        <h1 className=\"text-2xl font-bold text-gray-900\">\n          {language === \"en\" ? \"Admin Settings\" : \"நிர்வாக அமைப்புகள்\"}\n        </h1>\n      </div>\n\n      <Card className=\"shadow-lg\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Key className=\"h-5 w-5 text-temple-primary\" />\n            {language === \"en\" ? \"Change Admin Credentials\" : \"நிர்வாக அறிமுக தகவலை மாற்று\"}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {message && (\n              <Alert variant={message.type === \"error\" ? \"destructive\" : \"default\"}>\n                <div className=\"flex items-center gap-2\">\n                  {message.type === \"error\" ? (\n                    <AlertCircle className=\"h-4 w-4\" />\n                  ) : (\n                    <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  )}\n                  <AlertDescription>{message.text}</AlertDescription>\n                </div>\n              </Alert>\n            )}\n\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"currentPassword\" className=\"text-sm font-medium\">\n                  {language === \"en\" ? \"Current Password\" : \"தற்போதைய கடவுச்சொல்\"}\n                </Label>\n                <div className=\"relative mt-1\">\n                  <Key className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    id=\"currentPassword\"\n                    type={showCurrentPassword ? \"text\" : \"password\"}\n                    placeholder={language === \"en\" ? \"Enter current password\" : \"தற்போதைய கடவுச்சொல்லை உள்ளிடவும்\"}\n                    className=\"pl-10 pr-10 h-11\"\n                    {...form.register(\"currentPassword\")}\n                  />\n                  <button\n                    type=\"button\"\n                    className=\"absolute right-3 top-3 h-4 w-4 text-gray-400 hover:text-gray-600\"\n                    onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                    title={showCurrentPassword ? \n                      (language === \"en\" ? \"Hide password\" : \"கடவுச்சொல்லை மறைக்க\") : \n                      (language === \"en\" ? \"Show password\" : \"கடவுச்சொல்லைக் காட்ட\")\n                    }\n                  >\n                    {showCurrentPassword ? <Eye className=\"h-4 w-4\" /> : <EyeOff className=\"h-4 w-4\" />}\n                  </button>\n                </div>\n                {form.formState.errors.currentPassword && (\n                  <p className=\"text-sm text-red-600 mt-1\">\n                    {form.formState.errors.currentPassword.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"newUsername\" className=\"text-sm font-medium\">\n                    {language === \"en\" ? \"New Username\" : \"புதிய பயனர் பெயர்\"}\n                  </Label>\n                  <div className=\"relative mt-1\">\n                    <User className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                    <Input\n                      id=\"newUsername\"\n                      type=\"text\"\n                      placeholder={language === \"en\" ? \"Enter new username\" : \"புதிய பயனர் பெயரை உள்ளிடவும்\"}\n                      className=\"pl-10 h-11\"\n                      {...form.register(\"newUsername\")}\n                    />\n                  </div>\n                  {form.formState.errors.newUsername && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {form.formState.errors.newUsername.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"newPassword\" className=\"text-sm font-medium\">\n                    {language === \"en\" ? \"New Password\" : \"புதிய கடவுச்சொல்\"}\n                  </Label>\n                  <div className=\"relative mt-1\">\n                    <Key className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                    <Input\n                      id=\"newPassword\"\n                      type={showNewPassword ? \"text\" : \"password\"}\n                      placeholder={language === \"en\" ? \"Enter new password\" : \"புதிய கடவுச்சொல்லை உள்ளிடவும்\"}\n                      className=\"pl-10 pr-10 h-11\"\n                      {...form.register(\"newPassword\")}\n                    />\n                    <button\n                      type=\"button\"\n                      className=\"absolute right-3 top-3 h-4 w-4 text-gray-400 hover:text-gray-600\"\n                      onClick={() => setShowNewPassword(!showNewPassword)}\n                      title={showNewPassword ? \n                        (language === \"en\" ? \"Hide password\" : \"கடவுச்சொல்லை மறைக்க\") : \n                        (language === \"en\" ? \"Show password\" : \"கடவுச்சொல்லைக் காட்ட\")\n                      }\n                    >\n                      {showNewPassword ? <Eye className=\"h-4 w-4\" /> : <EyeOff className=\"h-4 w-4\" />}\n                    </button>\n                  </div>\n                  {form.formState.errors.newPassword && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {form.formState.errors.newPassword.message}\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"confirmPassword\" className=\"text-sm font-medium\">\n                  {language === \"en\" ? \"Confirm New Password\" : \"புதிய கடவுச்சொல்லை உறுதிப்படுத்து\"}\n                </Label>\n                <div className=\"relative mt-1\">\n                  <Key className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    id=\"confirmPassword\"\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    placeholder={language === \"en\" ? \"Confirm new password\" : \"புதிய கடவுச்சொல்லை உறுதிப்படுத்தவும்\"}\n                    className=\"pl-10 pr-10 h-11\"\n                    {...form.register(\"confirmPassword\")}\n                  />\n                  <button\n                    type=\"button\"\n                    className=\"absolute right-3 top-3 h-4 w-4 text-gray-400 hover:text-gray-600\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                    title={showConfirmPassword ? \n                      (language === \"en\" ? \"Hide password\" : \"கடவுச்சொல்லை மறைக்க\") : \n                      (language === \"en\" ? \"Show password\" : \"கடவுச்சொல்லைக் காட்ட\")\n                    }\n                  >\n                    {showConfirmPassword ? <Eye className=\"h-4 w-4\" /> : <EyeOff className=\"h-4 w-4\" />}\n                  </button>\n                </div>\n                {form.formState.errors.confirmPassword && (\n                  <p className=\"text-sm text-red-600 mt-1\">\n                    {form.formState.errors.confirmPassword.message}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex gap-4 pt-4\">\n              <Button\n                type=\"submit\"\n                className=\"flex-1 bg-temple-primary hover:bg-temple-primary/90 h-12 text-base font-semibold\"\n                disabled={changeCredentialsMutation.isPending}\n              >\n                {changeCredentialsMutation.isPending\n                  ? (language === \"en\" ? \"Updating...\" : \"புதுப்பிக்கிறது...\")\n                  : (language === \"en\" ? \"Update Credentials\" : \"அறிமுக தகவலை புதுப்பிக்கவும்\")\n                }\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => form.reset()}\n                className=\"h-12 px-8\"\n              >\n                {language === \"en\" ? \"Reset\" : \"மீட்டமை\"}\n              </Button>\n            </div>\n          </form>\n\n\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12793},"client/src/pages/dashboard-clean.tsx":{"content":"import { memo, useState } from \"react\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { useFastQuery } from \"@/hooks/use-fast-query\";\nimport { format } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\n\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\nimport { StatsCard } from \"@/components/ui/stats-card\";\nimport { \n  Calendar, \n  CalendarIcon, \n  Download, \n  Coins, \n  Users, \n  CreditCard, \n  TrendingUp \n} from \"lucide-react\";\n\nconst Dashboard = memo(function Dashboard() {\n  const { language } = useLanguage();\n  const [dateRange, setDateRange] = useState(\"all\");\n  const [customStartDate, setCustomStartDate] = useState<Date | undefined>(undefined);\n  const [customEndDate, setCustomEndDate] = useState<Date | undefined>(undefined);\n  \n  // Generate query parameters based on date range selection  \n  const getDashboardQuery = () => {\n    const now = new Date();\n    \n    if (dateRange === \"custom\") {\n      if (customStartDate && customEndDate) {\n        return `/api/dashboard/stats?dateRange=custom&startDate=${format(customStartDate, \"yyyy-MM-dd\")}&endDate=${format(customEndDate, \"yyyy-MM-dd\")}`;\n      }\n      return `/api/dashboard/stats?dateRange=all`;\n    }\n    \n    return `/api/dashboard/stats?dateRange=${dateRange}`;\n  };\n\n  const { data: stats, isLoading } = useFastQuery({\n    queryKey: ['dashboard-stats', dateRange, customStartDate, customEndDate],\n    queryFn: () => fetch(getDashboardQuery(), { credentials: 'include' }).then(res => res.json()),\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  });\n\n  const useTranslation = () => {\n    return {\n      totalCollection: language === \"ta\" ? \"மொத்த சேகரிப்பு\" : \"Total Collection\",\n      totalDonors: language === \"ta\" ? \"மொத்த நன்கொடையாளர்கள்\" : \"Total Donors\",\n      totalDonations: language === \"ta\" ? \"மொத்த நன்கொடைகள்\" : \"Total Donations\",\n      avgDonation: language === \"ta\" ? \"சராசரி நன்கொடை\" : \"Average Donation\",\n      paymentModeDistribution: language === \"ta\" ? \"பணம் செலுத்தும் முறை விநியோகம்\" : \"Payment Mode Distribution\",\n      recentDonations: language === \"ta\" ? \"சமீபத்திய நன்கொடைகள்\" : \"Recent Donations\",\n    };\n  };\n\n  const t = useTranslation();\n\n  // Currency formatting functions\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatCurrencyTamil = (amount: number) => {\n    const formatted = new Intl.NumberFormat('en-IN', {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n    return `₹${formatted}`;\n  };\n\n  // Export functionality\n  const handleExport = async () => {\n    try {\n      const queryUrl = getDashboardQuery().replace('/stats', '/export');\n      const response = await fetch(queryUrl, {\n        method: 'GET',\n        credentials: 'include',\n      });\n      \n      if (response.ok) {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.style.display = 'none';\n        a.href = url;\n        a.download = `donations_${dateRange}_${new Date().toISOString().split('T')[0]}.csv`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n      }\n    } catch (error) {\n      console.error('Export failed:', error);\n    }\n  };\n\n  if (isLoading || !stats || !stats.paymentModeDistribution || !stats.recentDonations) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h2 className=\"text-2xl font-semibold text-gray-900\">Collection Dashboard</h2>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[1, 2, 3, 4].map((i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-20 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Enhanced Date Filter */}\n      <div className=\"flex flex-col space-y-4 lg:flex-row lg:justify-between lg:items-start lg:space-y-0\">\n        <h2 className=\"text-2xl font-semibold text-gray-900\">\n          {language === \"ta\" ? \"சேகரிப்பு டாஷ்போர்டு\" : \"Collection Dashboard\"}\n        </h2>\n        \n        <div className=\"flex flex-col space-y-3 lg:flex-row lg:space-y-0 lg:space-x-4 lg:items-center\">\n          {/* Enhanced Date Filter Component */}\n          <div className=\"bg-white p-3 rounded-lg shadow-sm border border-gray-200\">\n            <div className=\"flex flex-col space-y-2 sm:flex-row sm:space-y-0 sm:space-x-3 sm:items-center\">\n              <span className=\"text-sm font-medium text-gray-700\">\n                {language === \"ta\" ? \"தேதி வரம்பு:\" : \"Date Range:\"}\n              </span>\n              <Select value={dateRange} onValueChange={setDateRange}>\n                <SelectTrigger className=\"w-44 bg-white border-gray-300 hover:border-temple-primary focus:border-temple-primary\">\n                  <Calendar className=\"h-4 w-4 mr-2 text-temple-primary\" />\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"z-50\">\n                  <SelectItem value=\"all\" className=\"hover:bg-temple-accent/20\">\n                    {language === \"ta\" ? \"எல்லா நேரங்களிலும்\" : \"All Time\"}\n                  </SelectItem>\n                  <SelectItem value=\"thisyear\" className=\"hover:bg-temple-accent/20\">\n                    {language === \"ta\" ? \"இந்த ஆண்டு\" : \"This Year\"}\n                  </SelectItem>\n                  <SelectItem value=\"lastyear\" className=\"hover:bg-temple-accent/20\">\n                    {language === \"ta\" ? \"கடந்த ஆண்டு\" : \"Last Year\"}\n                  </SelectItem>\n                  <SelectItem value=\"thismonth\" className=\"hover:bg-temple-accent/20\">\n                    {language === \"ta\" ? \"இந்த மாதம்\" : \"This Month\"}\n                  </SelectItem>\n                  <SelectItem value=\"lastmonth\" className=\"hover:bg-temple-accent/20\">\n                    {language === \"ta\" ? \"கடந்த மாதம்\" : \"Last Month\"}\n                  </SelectItem>\n                  <SelectItem value=\"custom\" className=\"hover:bg-temple-accent/20\">\n                    {language === \"ta\" ? \"குறிப்பிட்ட வரம்பு\" : \"Custom Range\"}\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {/* Custom Date Range Inputs */}\n            {dateRange === \"custom\" && (\n              <div className=\"flex flex-col space-y-2 sm:flex-row sm:space-y-0 sm:space-x-2 mt-3\">\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className={cn(\n                        \"w-full sm:w-[160px] justify-start text-left font-normal\",\n                        !customStartDate && \"text-muted-foreground\"\n                      )}\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {customStartDate ? format(customStartDate, \"dd/MM/yyyy\") : (language === \"ta\" ? \"தொடக்க தேதி\" : \"Start date\")}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\">\n                    <CalendarComponent\n                      mode=\"single\"\n                      selected={customStartDate}\n                      onSelect={(date) => {\n                        setCustomStartDate(date);\n                        if (date && customEndDate && date > customEndDate) {\n                          setCustomEndDate(undefined);\n                        }\n                      }}\n                      disabled={(date) => date > new Date()}\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n                \n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className={cn(\n                        \"w-full sm:w-[160px] justify-start text-left font-normal\",\n                        !customEndDate && \"text-muted-foreground\"\n                      )}\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {customEndDate ? format(customEndDate, \"dd/MM/yyyy\") : (language === \"ta\" ? \"முடிவு தேதி\" : \"End date\")}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\">\n                    <CalendarComponent\n                      mode=\"single\"\n                      selected={customEndDate}\n                      onSelect={setCustomEndDate}\n                      disabled={(date) => {\n                        if (date > new Date()) return true;\n                        if (customStartDate && date < customStartDate) return true;\n                        return false;\n                      }}\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n            )}\n          </div>\n          \n          {/* Export Button */}\n          <Button onClick={handleExport} className=\"bg-temple-primary hover:bg-temple-primary/90 shadow-sm\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            {language === \"ta\" ? \"ஏற்றுமதி\" : \"Export\"}\n          </Button>\n        </div>\n      </div>\n      \n      {/* Filter Status Indicator */}\n      {dateRange !== \"all\" && (\n        <div className=\"bg-temple-accent/10 border border-temple-primary/20 rounded-lg p-3\">\n          <div className=\"flex items-center space-x-2\">\n            <Calendar className=\"h-4 w-4 text-temple-primary\" />\n            <span className=\"text-sm font-medium text-temple-primary\">\n              {language === \"ta\" ? \"வடிகட்டப்பட்ட தரவு:\" : \"Filtered Data:\"} \n              {\" \"}\n              {dateRange === \"thisyear\" && (language === \"ta\" ? \"இந்த ஆண்டு\" : \"This Year\")}\n              {dateRange === \"lastyear\" && (language === \"ta\" ? \"கடந்த ஆண்டு\" : \"Last Year\")}\n              {dateRange === \"thismonth\" && (language === \"ta\" ? \"இந்த மாதம்\" : \"This Month\")}\n              {dateRange === \"lastmonth\" && (language === \"ta\" ? \"கடந்த மாதம்\" : \"Last Month\")}\n              {dateRange === \"custom\" && (language === \"ta\" ? \"குறிப்பிட்ட வரம்பு\" : \"Custom Range\")}\n            </span>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={() => setDateRange(\"all\")}\n              className=\"h-6 px-2 text-xs text-temple-primary hover:bg-temple-primary/10\"\n            >\n              {language === \"ta\" ? \"அழிக்க\" : \"Clear\"}\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4 sm:gap-6\">\n        <StatsCard\n          title={t.totalCollection}\n          value={language === \"ta\" ? formatCurrencyTamil(stats.totalCollection || 0) : formatCurrency(stats.totalCollection || 0)}\n          icon={<Coins className=\"h-6 w-6 text-temple-primary\" />}\n          iconBgColor=\"bg-temple-accent\"\n          change={{ value: language === \"en\" ? \"12% from last month\" : \"கடந்த மாதத்திலிருந்து 12%\", positive: true }}\n        />\n\n        <StatsCard\n          title={t.totalDonors}\n          value={(stats.totalDonors || 0).toString()}\n          icon={<Users className=\"h-6 w-6 text-blue-600\" />}\n          iconBgColor=\"bg-blue-100\"\n          change={{ value: language === \"en\" ? \"8% from last month\" : \"கடந்த மாதத்திலிருந்து 8%\", positive: true }}\n        />\n\n        <StatsCard\n          title={t.totalDonations}\n          value={(stats.totalDonations || 0).toString()}\n          icon={<CreditCard className=\"h-6 w-6 text-green-600\" />}\n          iconBgColor=\"bg-green-100\"\n          change={{ value: language === \"en\" ? \"15% from last month\" : \"கடந்த மாதத்திலிருந்து 15%\", positive: true }}\n        />\n\n        <StatsCard\n          title={t.avgDonation}\n          value={language === \"ta\" ? formatCurrencyTamil(stats.avgDonation || 0) : formatCurrency(stats.avgDonation || 0)}\n          icon={<TrendingUp className=\"h-6 w-6 text-purple-600\" />}\n          iconBgColor=\"bg-purple-100\"\n          change={{ value: language === \"en\" ? \"5% from last month\" : \"கடந்த மாதத்திலிருந்து 5%\", positive: true }}\n        />\n      </div>\n\n      {/* Payment Mode Distribution */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">{t.paymentModeDistribution}</h3>\n            <div className=\"space-y-3\">\n              {stats.paymentModeDistribution.map((mode: any, index: number) => (\n                <div key={index} className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium capitalize\">{mode.mode}</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-24 bg-gray-200 rounded-full h-2\">\n                      <div \n                        className=\"bg-temple-primary h-2 rounded-full\" \n                        style={{ width: `${mode.percentage}%` }}\n                      ></div>\n                    </div>\n                    <span className=\"text-sm text-gray-600\">{mode.percentage}%</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Donations */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">{t.recentDonations}</h3>\n            <div className=\"space-y-3\">\n              {stats.recentDonations.slice(0, 5).map((donation: any, index: number) => (\n                <div key={index} className=\"flex items-center justify-between py-2 border-b border-gray-100 last:border-0\">\n                  <div>\n                    <p className=\"text-sm font-medium\">{donation.name}</p>\n                    <p className=\"text-xs text-gray-500\">{donation.receiptNo}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-semibold\">\n                      {language === \"ta\" ? formatCurrencyTamil(donation.amount) : formatCurrency(donation.amount)}\n                    </p>\n                    <p className=\"text-xs text-gray-500 capitalize\">{donation.paymentMode}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n});\n\nexport default Dashboard;","size_bytes":15971},"client/src/pages/dashboard.tsx":{"content":"import { memo, useState } from \"react\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\n\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\nimport { StatsCard } from \"@/components/ui/stats-card\";\nimport { DashboardSkeleton } from \"@/components/ui/fast-loading\";\nimport { \n  Calendar, \n  CalendarIcon, \n  Download, \n  Coins, \n  Users, \n  CreditCard, \n  TrendingUp \n} from \"lucide-react\";\n\ninterface DashboardStats {\n  totalCollections: number;\n  totalDonors: number;\n  totalDonations: number;\n  avgDonation: number;\n  paymentModeDistribution: Array<{ mode: string; count: number; percentage: number }>;\n  recentDonations: Array<{ name: string; amount: number; paymentMode: string; createdAt: string }>;\n}\n\nconst Dashboard = memo(function Dashboard() {\n  const { language } = useLanguage();\n  const [dateRange, setDateRange] = useState<string>(\"all\");\n  const [customStartDate, setCustomStartDate] = useState<Date | undefined>(undefined);\n  const [customEndDate, setCustomEndDate] = useState<Date | undefined>(undefined);\n  \n  // Generate query parameters based on date range selection  \n  const getDashboardQuery = () => {\n    const now = new Date();\n    \n    if (dateRange === \"custom\") {\n      if (customStartDate && customEndDate) {\n        return `/api/dashboard/stats?dateRange=custom&startDate=${format(customStartDate, \"yyyy-MM-dd\")}&endDate=${format(customEndDate, \"yyyy-MM-dd\")}`;\n      }\n      return `/api/dashboard/stats?dateRange=all`;\n    }\n    \n    return `/api/dashboard/stats?dateRange=${dateRange}`;\n  };\n\n  const { data: stats, isLoading, isError } = useQuery<DashboardStats>({\n    queryKey: ['dashboard-stats', dateRange, customStartDate, customEndDate],\n    queryFn: async () => {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10-second timeout\n      \n      try {\n        const response = await fetch(getDashboardQuery(), {\n          credentials: 'include',\n          signal: controller.signal,\n          headers: {\n            'Cache-Control': 'max-age=120', // Request caching\n          }\n        });\n        clearTimeout(timeoutId);\n        \n        if (!response.ok) throw new Error(`HTTP ${response.status}: Failed to fetch dashboard stats`);\n        return response.json();\n      } catch (error) {\n        clearTimeout(timeoutId);\n        throw error;\n      }\n    },\n    staleTime: 2 * 60 * 1000, // 2 minutes stale time\n    gcTime: 10 * 60 * 1000, // 10 minutes garbage collection\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    retry: 2,\n    retryDelay: 1000,\n  });\n\n  const useTranslation = () => {\n    return {\n      totalCollection: language === \"ta\" ? \"மொத்த சேகரிப்பு\" : \"Total Collection\",\n      totalDonors: language === \"ta\" ? \"மொத்த நன்கொடையாளர்கள்\" : \"Total Donors\",\n      totalDonations: language === \"ta\" ? \"மொத்த நன்கொடைகள்\" : \"Total Donations\",\n      avgDonation: language === \"ta\" ? \"சராசரி நன்கொடை\" : \"Average Donation\",\n      paymentModeDistribution: language === \"ta\" ? \"பணம் செலுத்தும் முறை விநியோகம்\" : \"Payment Mode Distribution\",\n      recentDonations: language === \"ta\" ? \"சமீபத்திய நன்கொடைகள்\" : \"Recent Donations\",\n    };\n  };\n\n  const t = useTranslation();\n\n  // Currency formatting functions\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatCurrencyTamil = (amount: number) => {\n    const formatted = new Intl.NumberFormat('en-IN', {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n    return `₹${formatted}`;\n  };\n\n  // Export functionality\n  const handleExport = async () => {\n    try {\n      const queryUrl = getDashboardQuery().replace('/stats', '/export');\n      const response = await fetch(queryUrl, {\n        method: 'GET',\n        credentials: 'include',\n      });\n      \n      if (response.ok) {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.style.display = 'none';\n        a.href = url;\n        a.download = `donations_${dateRange}_${new Date().toISOString().split('T')[0]}.csv`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n      }\n    } catch (error) {\n      console.error('Export failed:', error);\n    }\n  };\n\n  if (isLoading || !stats) {\n    return <DashboardSkeleton />;\n  }\n\n  if (isError) {\n    return (\n      <div className=\"p-6 text-center\">\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n          <h3 className=\"text-lg font-semibold text-red-800 mb-2\">\n            {language === \"ta\" ? \"தரவு ஏற்றப்படவில்லை\" : \"Failed to Load Data\"}\n          </h3>\n          <p className=\"text-red-600 mb-4\">\n            {language === \"ta\" \n              ? \"டாஷ்போர்ட் தரவை ஏற்றுவதில் சிக்கல் ஏற்பட்டது. மீண்டும் முயற்சிக்கவும்.\" \n              : \"There was a problem loading the dashboard data. Please try again.\"\n            }\n          </p>\n          <Button onClick={() => window.location.reload()} className=\"bg-red-600 hover:bg-red-700\">\n            {language === \"ta\" ? \"மீண்டும் ஏற்று\" : \"Reload\"}\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Enhanced Date Filter */}\n      <div className=\"flex flex-col space-y-4 lg:flex-row lg:justify-between lg:items-start lg:space-y-0\">\n        <h2 className=\"text-2xl font-semibold text-gray-900\">\n          {language === \"ta\" ? \"சேகரிப்பு டாஷ்போர்டு\" : \"Collection Dashboard\"}\n        </h2>\n        \n        <div className=\"flex flex-col space-y-3 lg:flex-row lg:space-y-0 lg:space-x-4 lg:items-center\">\n          {/* Enhanced Date Filter Component */}\n          <div className=\"bg-white p-3 rounded-lg shadow-sm border border-gray-200\">\n            <div className=\"flex flex-col space-y-2 sm:flex-row sm:space-y-0 sm:space-x-3 sm:items-center\">\n              <span className=\"text-sm font-medium text-gray-700\">\n                {language === \"ta\" ? \"தேதி வரம்பு:\" : \"Date Range:\"}\n              </span>\n              <Select value={dateRange} onValueChange={setDateRange}>\n                <SelectTrigger className=\"w-44 bg-white border-gray-300 hover:border-temple-primary focus:border-temple-primary\">\n                  <Calendar className=\"h-4 w-4 mr-2 text-temple-primary\" />\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"z-50\">\n                  <SelectItem value=\"all\" className=\"hover:bg-temple-accent/20\">\n                    {language === \"ta\" ? \"எல்லா நேரங்களிலும்\" : \"All Time\"}\n                  </SelectItem>\n                  <SelectItem value=\"thisyear\" className=\"hover:bg-temple-accent/20\">\n                    {language === \"ta\" ? \"இந்த ஆண்டு\" : \"This Year\"}\n                  </SelectItem>\n                  <SelectItem value=\"lastyear\" className=\"hover:bg-temple-accent/20\">\n                    {language === \"ta\" ? \"கடந்த ஆண்டு\" : \"Last Year\"}\n                  </SelectItem>\n                  <SelectItem value=\"thismonth\" className=\"hover:bg-temple-accent/20\">\n                    {language === \"ta\" ? \"இந்த மாதம்\" : \"This Month\"}\n                  </SelectItem>\n                  <SelectItem value=\"lastmonth\" className=\"hover:bg-temple-accent/20\">\n                    {language === \"ta\" ? \"கடந்த மாதம்\" : \"Last Month\"}\n                  </SelectItem>\n                  <SelectItem value=\"custom\" className=\"hover:bg-temple-accent/20\">\n                    {language === \"ta\" ? \"குறிப்பிட்ட வரம்பு\" : \"Custom Range\"}\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {/* Custom Date Range Inputs */}\n            {dateRange === \"custom\" && (\n              <div className=\"flex flex-col space-y-2 sm:flex-row sm:space-y-0 sm:space-x-2 mt-3\">\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className={cn(\n                        \"w-full sm:w-[160px] justify-start text-left font-normal\",\n                        !customStartDate && \"text-muted-foreground\"\n                      )}\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {customStartDate ? format(customStartDate, \"dd/MM/yyyy\") : (language === \"ta\" ? \"தொடக்க தேதி\" : \"Start date\")}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\">\n                    <CalendarComponent\n                      mode=\"single\"\n                      selected={customStartDate}\n                      onSelect={(date: Date | undefined) => {\n                        setCustomStartDate(date);\n                        if (date && customEndDate && date > customEndDate) {\n                          setCustomEndDate(undefined);\n                        }\n                      }}\n                      disabled={(date) => date > new Date()}\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n                \n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className={cn(\n                        \"w-full sm:w-[160px] justify-start text-left font-normal\",\n                        !customEndDate && \"text-muted-foreground\"\n                      )}\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {customEndDate ? format(customEndDate, \"dd/MM/yyyy\") : (language === \"ta\" ? \"முடிவு தேதி\" : \"End date\")}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\">\n                    <CalendarComponent\n                      mode=\"single\"\n                      selected={customEndDate}\n                      onSelect={(date: Date | undefined) => setCustomEndDate(date)}\n                      disabled={(date) => {\n                        if (date > new Date()) return true;\n                        if (customStartDate && date < customStartDate) return true;\n                        return false;\n                      }}\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n            )}\n          </div>\n          \n          {/* Export Button */}\n          <Button onClick={handleExport} className=\"bg-temple-primary hover:bg-temple-primary/90 shadow-sm\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            {language === \"ta\" ? \"ஏற்றுமதி\" : \"Export\"}\n          </Button>\n        </div>\n      </div>\n      \n      {/* Filter Status Indicator */}\n      {dateRange !== \"all\" && (\n        <div className=\"bg-temple-accent/10 border border-temple-primary/20 rounded-lg p-3\">\n          <div className=\"flex items-center space-x-2\">\n            <Calendar className=\"h-4 w-4 text-temple-primary\" />\n            <span className=\"text-sm font-medium text-temple-primary\">\n              {language === \"ta\" ? \"வடிகட்டப்பட்ட தரவு:\" : \"Filtered Data:\"} \n              {\" \"}\n              {dateRange === \"thisyear\" && (language === \"ta\" ? \"இந்த ஆண்டு\" : \"This Year\")}\n              {dateRange === \"lastyear\" && (language === \"ta\" ? \"கடந்த ஆண்டு\" : \"Last Year\")}\n              {dateRange === \"thismonth\" && (language === \"ta\" ? \"இந்த மாதம்\" : \"This Month\")}\n              {dateRange === \"lastmonth\" && (language === \"ta\" ? \"கடந்த மாதம்\" : \"Last Month\")}\n              {dateRange === \"custom\" && (language === \"ta\" ? \"குறிப்பிட்ட வரம்பு\" : \"Custom Range\")}\n            </span>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={() => setDateRange(\"all\")}\n              className=\"h-6 px-2 text-xs text-temple-primary hover:bg-temple-primary/10\"\n            >\n              {language === \"ta\" ? \"அழிக்க\" : \"Clear\"}\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4 sm:gap-6\">\n        <StatsCard\n          title={t.totalCollection}\n          value={language === \"ta\" ? formatCurrencyTamil(stats.totalCollections || 0) : formatCurrency(stats.totalCollections || 0)}\n          icon={<Coins className=\"h-6 w-6 text-temple-primary\" />}\n          iconBgColor=\"bg-temple-accent\"\n          change={{ value: language === \"en\" ? \"12% from last month\" : \"கடந்த மாதத்திலிருந்து 12%\", positive: true }}\n        />\n\n        <StatsCard\n          title={t.totalDonors}\n          value={(stats.totalDonors || 0).toString()}\n          icon={<Users className=\"h-6 w-6 text-blue-600\" />}\n          iconBgColor=\"bg-blue-100\"\n          change={{ value: language === \"en\" ? \"8% from last month\" : \"கடந்த மாதத்திலிருந்து 8%\", positive: true }}\n        />\n\n        <StatsCard\n          title={t.totalDonations}\n          value={(stats.totalDonations || 0).toString()}\n          icon={<CreditCard className=\"h-6 w-6 text-green-600\" />}\n          iconBgColor=\"bg-green-100\"\n          change={{ value: language === \"en\" ? \"15% from last month\" : \"கடந்த மாதத்திலிருந்து 15%\", positive: true }}\n        />\n\n        <StatsCard\n          title={t.avgDonation}\n          value={language === \"ta\" ? formatCurrencyTamil(stats.avgDonation || 0) : formatCurrency(stats.avgDonation || 0)}\n          icon={<TrendingUp className=\"h-6 w-6 text-purple-600\" />}\n          iconBgColor=\"bg-purple-100\"\n          change={{ value: language === \"en\" ? \"5% from last month\" : \"கடந்த மாதத்திலிருந்து 5%\", positive: true }}\n        />\n      </div>\n\n      {/* Payment Mode Distribution */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">{t.paymentModeDistribution}</h3>\n            <div className=\"space-y-3\">\n              {stats.paymentModeDistribution.map((mode: any, index: number) => (\n                <div key={index} className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium capitalize\">{mode.mode}</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-24 bg-gray-200 rounded-full h-2\">\n                      <div \n                        className=\"bg-temple-primary h-2 rounded-full\" \n                        style={{ width: `${mode.percentage}%` }}\n                      ></div>\n                    </div>\n                    <span className=\"text-sm text-gray-600\">{mode.percentage}%</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Donations */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">{t.recentDonations}</h3>\n            <div className=\"space-y-3\">\n              {stats.recentDonations.slice(0, 5).map((donation: any, index: number) => {\n                // Use donationDate if available, otherwise use createdAt\n                const displayDate = donation.donationDate || donation.createdAt;\n                const formattedDate = new Date(displayDate).toLocaleDateString('en-GB', {\n                  day: '2-digit',\n                  month: '2-digit', \n                  year: 'numeric'\n                });\n                \n                return (\n                <div key={index} className=\"flex items-center justify-between py-2 border-b border-gray-100 last:border-0\">\n                  <div>\n                    <p className=\"text-sm font-medium\">{donation.name}</p>\n                    <p className=\"text-xs text-gray-500\">{formattedDate}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-semibold\">\n                      {language === \"ta\" ? formatCurrencyTamil(donation.amount) : formatCurrency(donation.amount)}\n                    </p>\n                    <p className=\"text-xs text-gray-500 capitalize\">{donation.paymentMode}</p>\n                  </div>\n                </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n});\n\nexport default Dashboard;","size_bytes":18000},"client/src/pages/donation-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { formatCurrency } from \"@/lib/utils\";\n// Removed TypeScript imports - using JavaScript\nimport { useTranslation, useLanguage } from \"@/contexts/LanguageContext\";\nimport { formatCurrencyTamil } from \"@/lib/i18n\";\nimport { Plus, CheckCircle } from \"lucide-react\";\nimport type { Donation, InsertDonation } from \"@/../../shared/schema\";\n\nexport default function DonationForm({\n  initialData,\n  onSuccess,\n}: {\n  initialData?: Donation;\n  onSuccess: () => void;\n}) {\n  const { toast } = useToast();\n  const { language } = useLanguage();\n  const t = useTranslation();\n  const [donorHistory, setDonorHistory] = useState<any>(null);\n  const [showSuccessDialog, setShowSuccessDialog] = useState<boolean>(false);\n  const [successData, setSuccessData] = useState<any>(null);\n  const [receiptError, setReceiptError] = useState<string>(\"\");\n\n  const isEditMode = !!initialData;\n\n  const form = useForm({\n    defaultValues: initialData\n      ? {\n          receiptNo: initialData.receiptNo,\n          name: initialData.name,\n          phone: initialData.phone,\n          community: (initialData.community as any) || undefined,\n          location: initialData.location || \"\",\n          address: initialData.address || \"\",\n          amount: initialData.amount,\n          paymentMode: initialData.paymentMode as any,\n          inscription: initialData.inscription,\n          donationDate: initialData.donationDate\n            ? new Date(initialData.donationDate).toISOString().split(\"T\")[0]\n            : undefined,\n        }\n      : {\n          receiptNo: \"\",\n          name: \"\",\n          phone: \"\",\n          community: undefined,\n          location: \"\",\n          address: \"\",\n          amount: undefined,\n          paymentMode: \"cash\",\n          inscription: false,\n          donationDate: \"\",\n        },\n  });\n\n  const createDonationMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (isEditMode && initialData) {\n        // Update existing donation\n        const donationId = (initialData as any)._id || (initialData as any).id;\n        const response = await fetch(`/api/donations/${donationId}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          credentials: \"include\",\n          body: JSON.stringify(data),\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to update donation\");\n        }\n        return response.json();\n      } else {\n        // Create new donation\n        const response = await fetch(\"/api/donations\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          credentials: \"include\",\n          body: JSON.stringify(data),\n        });\n        \n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({}));\n          if (response.status === 401) {\n            throw new Error(\"Authentication required. Please login to admin panel first.\");\n          }\n          throw new Error(errorData.message || \"Failed to create donation\");\n        }\n        \n        return response.json();\n      }\n    },\n    onSuccess: (result) => {\n      if (isEditMode) {\n        // For edit mode, call onSuccess callback if provided\n        if (onSuccess) {\n          onSuccess();\n        }\n        toast({\n          title: \"Success\",\n          description: \"Donation updated successfully\",\n        });\n      } else {\n        // For create mode, show success dialog and toast\n        setSuccessData({\n          receiptNo: result.receiptNo,\n          amount: result.amount,\n          name: result.name,\n          community: result.community,\n          paymentMode: result.paymentMode,\n        });\n        setShowSuccessDialog(true);\n\n        // Show success toast immediately\n        toast({\n          title:\n            language === \"en\"\n              ? \"✅ Donation Added Successfully!\"\n              : \"✅ நன்கொடை வெற்றிகரமாக சேர்க்கப்பட்டது!\",\n          description:\n            language === \"en\"\n              ? `Receipt No: ${result.receiptNo} | Amount: ₹${result.amount}`\n              : `ரசீது எண்: ${result.receiptNo} | தொகை: ₹${result.amount}`,\n          duration: 5000,\n        });\n\n        // Reset form and state\n        form.reset({\n          receiptNo: \"\",\n          name: \"\",\n          phone: \"\",\n          community: undefined,\n          location: \"\",\n          amount: undefined,\n          paymentMode: \"cash\",\n          inscription: false,\n          donationDate: undefined,\n        });\n        setDonorHistory(null);\n\n        // Invalidate queries to refresh data across all components\n        queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/donations\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/donors\"] });\n      }\n    },\n    onError: (error: any) => {\n      console.error(\"Donation error:\", error);\n      \n      // Handle authentication error\n      if (error.message?.includes(\"Authentication required\")) {\n        toast({\n          title: language === \"en\" ? \"❌ Authentication Required\" : \"❌ அங்கீகாரம் தேவை\",\n          description: language === \"en\" \n            ? \"Please login to admin panel first to add donations.\" \n            : \"நன்கொடை சேர்க்க முதலில் நிர्वाக பாட्டில் உள்நுழैகवुम்.\",\n          variant: \"destructive\",\n          duration: 8000,\n        });\n        return;\n      }\n      \n      // Handle specific receipt number duplicate error\n      if (error.message?.includes(\"Receipt number already exists\") || error.code === \"DUPLICATE_RECEIPT\") {\n        setReceiptError(language === \"en\" ? \"Receipt number already exists\" : \"ரசீது எண் ஏற்கனவே உள்ளது\");\n        form.setError(\"receiptNo\", {\n          type: \"manual\",\n          message: language === \"en\" ? \"Receipt number already exists\" : \"ரசீது எண் ஏற்கனவே உள்ளது\"\n        });\n        toast({\n          title: language === \"en\" ? \"❌ Error\" : \"❌ பிழை\",\n          description: language === \"en\" ? \"Receipt number already exists. Please use a different receipt number.\" : \"ரசீது எண் ஏற்கனவே உள்ளது. வேறு ரசீது எண்ணைப் பயன்படுத்தவும்.\",\n          variant: \"destructive\",\n          duration: 5000,\n        });\n      } else {\n        toast({\n          title: language === \"en\" ? \"❌ Error\" : \"❌ பிழை\",\n          description: error.message || t(\"donationError\"),\n          variant: \"destructive\",\n          duration: 5000,\n        });\n      }\n    },\n  });\n\n  const checkReceiptNumber = async (receiptNo: string) => {\n    if (receiptNo && receiptNo.trim() !== \"\" && !isEditMode) {\n      try {\n        const response = await fetch(`/api/donations/check-receipt/${encodeURIComponent(receiptNo)}`, {\n          credentials: \"include\",\n        });\n        \n        if (response.status === 401) {\n          // Authentication required - show warning but don't block form\n          toast({\n            title: language === \"en\" ? \"⚠️ Authentication Required\" : \"⚠️ அங்கीகாரம் தேவை\",\n            description: language === \"en\" \n              ? \"Please login to admin panel to enable receipt validation.\" \n              : \"ரசீது சரிபார्पणை इष்टमाच्छुम् நிर्वाक பাट्টில் उள्நुழैগावুম्.\",\n            variant: \"destructive\",\n            duration: 5000,\n          });\n          return;\n        }\n        \n        if (response.ok) {\n          const result = await response.json();\n          if (result.exists) {\n            const errorMsg = language === \"en\" ? \"Receipt number already exists\" : \"ரசீது எண் ஏற்கனவே உள்ளது\";\n            setReceiptError(errorMsg);\n            form.setError(\"receiptNo\", {\n              type: \"manual\",\n              message: errorMsg\n            });\n          } else {\n            setReceiptError(\"\");\n            form.clearErrors(\"receiptNo\");\n          }\n        }\n      } catch (error) {\n        console.error(\"Error checking receipt number:\", error);\n      }\n    } else {\n      setReceiptError(\"\");\n      form.clearErrors(\"receiptNo\");\n    }\n  };\n\n  const checkExistingDonor = async (phone: string) => {\n    if (phone.length >= 10) {\n      try {\n        const response = await fetch(`/api/donors/${phone}`, {\n          credentials: \"include\",\n        });\n        \n        if (response.status === 401) {\n          // Authentication required - continue without pre-filling\n          setDonorHistory(null);\n          return;\n        }\n        \n        if (response.ok) {\n          const donor = await response.json();\n          setDonorHistory(donor);\n          // Pre-fill form with existing donor data\n          form.setValue(\"name\", donor.name);\n          form.setValue(\"location\", donor.location || \"\");\n          form.setValue(\"community\", donor.community || \"\");\n        } else {\n          setDonorHistory(null);\n        }\n      } catch (error) {\n        setDonorHistory(null);\n      }\n    } else {\n      setDonorHistory(null);\n    }\n  };\n\n  const onSubmit = (data: any) => {\n    // Check if there's a receipt error before submitting\n    if (receiptError) {\n      toast({\n        title: language === \"en\" ? \"❌ Error\" : \"❌ பிழை\",\n        description: language === \"en\" ? \"Please fix the receipt number error before submitting.\" : \"சமர்ப்பிக்கும் முன் ரசீது எண் பிழையை சரிசெய்யவும்.\",\n        variant: \"destructive\",\n        duration: 5000,\n      });\n      return;\n    }\n\n    // Validate all required fields\n    const errors = [];\n    if (!data.receiptNo || data.receiptNo.trim() === \"\") {\n      errors.push(language === \"en\" ? \"Receipt number is required\" : \"ரசீது எண் அவசியம்\");\n    }\n    if (!data.name || data.name.trim() === \"\") {\n      errors.push(language === \"en\" ? \"Name is required\" : \"பெயர் அவசியம்\");\n    }\n    if (!data.phone || data.phone.trim() === \"\" || data.phone.length !== 10) {\n      errors.push(language === \"en\" ? \"Phone number (10 digits) is required\" : \"தொலைபேசி எண் (10 இலக்கங்கள்) அவசியம்\");\n    }\n    if (!data.community || data.community === \"\") {\n      errors.push(language === \"en\" ? \"Community is required\" : \"குலம் அவசியம்\");\n    }\n    if (!data.location || data.location.trim() === \"\") {\n      errors.push(language === \"en\" ? \"Location is required\" : \"இடம் அவசியம்\");\n    }\n    if (!data.amount || Number(data.amount) <= 0) {\n      errors.push(language === \"en\" ? \"Donation amount is required\" : \"நன்கொடை தொகை அவசியம்\");\n    }\n    if (!data.donationDate || data.donationDate.trim() === \"\") {\n      errors.push(language === \"en\" ? \"Donation date is required\" : \"நன்கொடை தேதி அவசியம்\");\n    }\n    if (!data.paymentMode || data.paymentMode.trim() === \"\") {\n      errors.push(language === \"en\" ? \"Payment mode is required\" : \"கட்டண முறை அவசியம்\");\n    }\n\n    if (errors.length > 0) {\n      toast({\n        title: language === \"en\" ? \"❌ Required Fields Missing\" : \"❌ அவசிய புலங்கள் இல்லை\",\n        description: errors.join(\", \"),\n        variant: \"destructive\",\n        duration: 8000,\n      });\n      return;\n    }\n    \n    // Process and clean the donation data\n    const donationData = {\n      ...data,\n      // Convert amount to number for validation\n      amount: Number(data.amount) || 0,\n      // Convert donation date string to Date object if provided  \n      donationDate: data.donationDate ? new Date(data.donationDate) : undefined,\n    };\n    createDonationMutation.mutate(donationData);\n  };\n\n  return (\n    <div className=\"w-full max-w-5xl mx-auto\">\n      <Card className=\"overflow-hidden shadow-lg border-0 sm:border\">\n        <div className=\"bg-gradient-to-r from-temple-primary to-temple-secondary px-4 sm:px-6 py-4 sm:py-5\">\n          <h2 className=\"text-xl sm:text-2xl font-semibold text-white\">\n            {t(\"donationFormTitle\")}\n          </h2>\n          <p className=\"text-white/90 text-sm sm:text-base mt-1\">\n            {t(\"donationFormSubtitle\")}\n          </p>\n        </div>\n\n        <CardContent className=\"p-4 sm:p-6 lg:p-8\">\n          <form\n            onSubmit={form.handleSubmit(onSubmit)}\n            className=\"space-y-6 sm:space-y-8\"\n          >\n            {/* Receipt Number field - Manual entry */}\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm sm:text-base font-medium\">\n                {t(\"receiptNumber\")} <span className=\"text-red-500\">*</span>\n              </Label>\n              <Input\n                placeholder={\n                  language === \"en\"\n                    ? \"Enter receipt number (e.g., 1, 2, A001, etc.)\"\n                    : \"ரசீது எண்ணை உள்ளிடவும் (எ.கா., 1, 2, A001, போன்றவை)\"\n                }\n                {...form.register(\"receiptNo\", {\n                  required: language === \"en\" ? \"Receipt number is required\" : \"ரசீது எண் அவசியம்\",\n                  minLength: {\n                    value: 1,\n                    message: language === \"en\" ? \"Receipt number cannot be empty\" : \"ரசீது எண் காலியாக இருக்க முடியாது\"\n                  }\n                })}\n                onChange={(e) => {\n                  form.setValue(\"receiptNo\", e.target.value);\n                  // Clear previous errors when user starts typing\n                  if (receiptError) {\n                    setReceiptError(\"\");\n                    form.clearErrors(\"receiptNo\");\n                  }\n                }}\n                onBlur={(e) => checkReceiptNumber(e.target.value)}\n                className={`text-sm sm:text-base h-11 sm:h-12 ${receiptError || form.formState.errors.receiptNo ? 'border-red-500' : ''}`}\n              />\n              {form.formState.errors.receiptNo && (\n                <p className=\"text-red-500 text-xs sm:text-sm\">\n                  {form.formState.errors.receiptNo.message}\n                </p>\n              )}\n            </div>\n\n            {/* Donor Name field */}\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm sm:text-base font-medium\">\n                {language === \"en\" ? \"Name\" : \"பெயர்\"} <span className=\"text-red-500\">*</span>\n              </Label>\n              <Input\n                placeholder={\n                  language === \"en\"\n                    ? \"Enter full name\"\n                    : \"முழு பெயரை உள்ளிடவும்\"\n                }\n                {...form.register(\"name\", {\n                  required: language === \"en\" ? \"Name is required\" : \"பெயர் அவசியம்\",\n                  minLength: {\n                    value: 2,\n                    message: language === \"en\" ? \"Name must be at least 2 characters\" : \"பெயர் குறைந்தது 2 எழுத்துக்கள் இருக்க வேண்டும்\"\n                  }\n                })}\n                className={`text-sm sm:text-base h-11 sm:h-12 ${form.formState.errors.name ? 'border-red-500' : ''}`}\n              />\n              {form.formState.errors.name && (\n                <p className=\"text-xs sm:text-sm text-red-600\">\n                  {form.formState.errors.name.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm sm:text-base font-medium\">\n                {language === \"en\" ? \"Phone Number\" : \"தொலைபேசி எண்\"} <span className=\"text-red-500\">*</span>\n              </Label>\n              <Input\n                type=\"tel\"\n                placeholder={t(\"phoneHelp\")}\n                {...form.register(\"phone\", {\n                  required: language === \"en\" ? \"Phone number is required\" : \"தொலைபேசி எண் அவசியம்\",\n                  pattern: {\n                    value: /^\\d{10}$/,\n                    message: language === \"en\" ? \"Phone number must be exactly 10 digits\" : \"தொலைபேசி எண் சரியாக 10 இலக்கங்களாக இருக்க வேண்டும்\"\n                  }\n                })}\n                onBlur={(e) => checkExistingDonor(e.target.value)}\n                onChange={(e) => {\n                  // Only allow digits and limit to 10 characters\n                  const value = e.target.value.replace(/\\D/g, '').slice(0, 10);\n                  form.setValue(\"phone\", value);\n                }}\n                maxLength={10}\n                className={`text-sm sm:text-base h-11 sm:h-12 ${form.formState.errors.phone ? 'border-red-500' : ''}`}\n              />\n              {form.formState.errors.phone && (\n                <p className=\"text-xs sm:text-sm text-red-600\">\n                  {form.formState.errors.phone.message}\n                </p>\n              )}\n            </div>\n\n            {/* Donor History Display */}\n            {donorHistory && (\n              <div className=\"bg-temple-accent border border-temple-primary/20 rounded-lg p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">\n                      {donorHistory.name}\n                    </h4>\n                    <p className=\"text-sm text-gray-600\">\n                      Previous donations:{\" \"}\n                      <span className=\"font-medium\">\n                        {formatCurrency(donorHistory.totalAmount)}\n                      </span>\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm text-gray-600\">\n                      Last donation:{\" \"}\n                      <span>\n                        {new Date(\n                          donorHistory.lastDonation,\n                        ).toLocaleDateString()}\n                      </span>\n                    </p>\n                    <p className=\"text-sm text-gray-600\">\n                      Total visits: <span>{donorHistory.donationCount}</span>\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm sm:text-base font-medium\">\n                {t(\"community\")} <span className=\"text-red-500\">*</span>\n              </Label>\n              <Select\n                value={form.watch(\"community\") || \"\"}\n                onValueChange={(value) => {\n                  form.setValue(\"community\", value as any);\n                  form.clearErrors(\"community\");\n                }}\n              >\n                <SelectTrigger className=\"text-sm sm:text-base h-11 sm:h-12\">\n                  <SelectValue\n                    placeholder={\n                      language === \"en\"\n                        ? \"Select Kulam\"\n                        : \"குலத்தை தேர்ந்தெடுக்கவும்\"\n                    }\n                  />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"any\">\n                    {language === \"en\" ? \"Any\" : \"எதுவும்\"}\n                  </SelectItem>\n                  <SelectItem value=\"payiran\">{t(\"payiran\")}</SelectItem>\n                  <SelectItem value=\"semban\">{t(\"semban\")}</SelectItem>\n                  <SelectItem value=\"othaalan\">{t(\"othaalan\")}</SelectItem>\n                  <SelectItem value=\"aavan\">{t(\"aavan\")}</SelectItem>\n                  <SelectItem value=\"aadai\">{t(\"aadai\")}</SelectItem>\n                  <SelectItem value=\"vizhiyan\">{t(\"vizhiyan\")}</SelectItem>\n                </SelectContent>\n              </Select>\n              {form.formState.errors.community && (\n                <p className=\"text-xs sm:text-sm text-red-600\">\n                  {form.formState.errors.community.message?.toString()}\n                </p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm sm:text-base font-medium\">\n                {t(\"location\")} <span className=\"text-red-500\">*</span>\n              </Label>\n              <Input\n                placeholder={\n                  language === \"en\" ? \"City, State\" : \"நகரம், மாநிலம்\"\n                }\n                {...form.register(\"location\", {\n                  required: language === \"en\" ? \"Location is required\" : \"இடம் அவசியம்\",\n                  minLength: {\n                    value: 2,\n                    message: language === \"en\" ? \"Location must be at least 2 characters\" : \"இடம் குறைந்தது 2 எழுத்துக்கள் இருக்க வேண்டும்\"\n                  }\n                })}\n                className={`text-sm sm:text-base h-11 sm:h-12 ${form.formState.errors.location ? 'border-red-500' : ''}`}\n              />\n              {form.formState.errors.location && (\n                <p className=\"text-xs sm:text-sm text-red-600\">\n                  {form.formState.errors.location.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm sm:text-base font-medium\">\n                {language === \"en\" ? \"Address\" : \"முகவரி\"}\n              </Label>\n              <Input\n                placeholder={\n                  language === \"en\" ? \"Full address (optional)\" : \"முழு முகவரி (விருப்பம்)\"\n                }\n                {...form.register(\"address\")}\n                className=\"text-sm sm:text-base h-11 sm:h-12\"\n              />\n              {form.formState.errors.address && (\n                <p className=\"text-xs sm:text-sm text-red-600\">\n                  {form.formState.errors.address.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-8\">\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm sm:text-base font-medium\">\n                  {t(\"donationAmount\")} <span className=\"text-red-500\">*</span>\n                </Label>\n                <div className=\"relative\">\n                  <span className=\"absolute left-3 top-3 sm:top-3.5 text-gray-500 text-sm sm:text-base\">\n                    ₹\n                  </span>\n                  <Input\n                    type=\"number\"\n                    placeholder=\"0.00\"\n                    className={`pl-8 text-sm sm:text-base h-11 sm:h-12 ${form.formState.errors.amount ? 'border-red-500' : ''}`}\n                    step=\"0.01\"\n                    min=\"1\"\n                    {...form.register(\"amount\", { \n                      valueAsNumber: true,\n                      required: language === \"en\" ? \"Donation amount is required\" : \"நன்கொடை தொகை அவசியம்\",\n                      min: {\n                        value: 1,\n                        message: language === \"en\" ? \"Amount must be at least ₹1\" : \"தொகை குறைந்தது ₹1 இருக்க வேண்டும்\"\n                      }\n                    })}\n                  />\n                </div>\n                {form.formState.errors.amount && (\n                  <p className=\"text-xs sm:text-sm text-red-600\">\n                    {form.formState.errors.amount.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm sm:text-base font-medium\">\n                  {language === \"en\" ? \"Donation Date\" : \"நன்கொடை தேதி\"} <span className=\"text-red-500\">*</span>\n                </Label>\n                <Input\n                  type=\"date\"\n                  className={`text-sm sm:text-base h-11 sm:h-12 ${form.formState.errors.donationDate ? 'border-red-500' : ''}`}\n                  {...form.register(\"donationDate\", {\n                    required: language === \"en\" ? \"Donation date is required\" : \"நன்கொடை தேதி அவசியம்\"\n                  })}\n                />\n                {form.formState.errors.donationDate && (\n                  <p className=\"text-xs sm:text-sm text-red-600\">\n                    {form.formState.errors.donationDate.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm sm:text-base font-medium\">\n                  {t(\"paymentMode\")} <span className=\"text-red-500\">*</span>\n                </Label>\n                <Select\n                  value={form.watch(\"paymentMode\") || \"\"}\n                  onValueChange={(value) => {\n                    form.setValue(\"paymentMode\", value as any);\n                    form.clearErrors(\"paymentMode\");\n                  }}\n                >\n                  <SelectTrigger className=\"text-sm sm:text-base h-11 sm:h-12\">\n                    <SelectValue\n                      placeholder={\n                        language === \"en\"\n                          ? \"Select Payment Mode\"\n                          : \"கட்டண முறையை தேர்ந்தெடுக்கவும்\"\n                      }\n                    />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"bankTransfer\">\n                      {t(\"bankTransfer\")}\n                    </SelectItem>\n                    <SelectItem value=\"card\">{t(\"card\")}</SelectItem>\n                    <SelectItem value=\"cash\">{t(\"cash\")}</SelectItem>\n                    <SelectItem value=\"cheque\">{t(\"cheque\")}</SelectItem>\n                    <SelectItem value=\"upi\">{t(\"upi\")}</SelectItem>\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.paymentMode && (\n                  <p className=\"text-xs sm:text-sm text-red-600\">\n                    {form.formState.errors.paymentMode.message?.toString()}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <Label className=\"text-sm sm:text-base font-medium\">\n                {t(\"inscriptionRequired\")}\n              </Label>\n              <RadioGroup\n                defaultValue=\"false\"\n                onValueChange={(value) =>\n                  form.setValue(\"inscription\", value === \"true\")\n                }\n                className=\"flex flex-col sm:flex-row sm:space-x-8 space-y-3 sm:space-y-0\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <RadioGroupItem value=\"true\" id=\"inscription-yes\" />\n                  <Label\n                    htmlFor=\"inscription-yes\"\n                    className=\"text-sm sm:text-base font-medium\"\n                  >\n                    {t(\"yes\")}\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <RadioGroupItem value=\"false\" id=\"inscription-no\" />\n                  <Label\n                    htmlFor=\"inscription-no\"\n                    className=\"text-sm sm:text-base font-medium\"\n                  >\n                    {t(\"no\")}\n                  </Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            <div className=\"flex flex-col lg:flex-row gap-4 lg:gap-6 pt-6 border-t border-gray-200\">\n              <Button\n                type=\"submit\"\n                className=\"w-full lg:flex-1 bg-temple-primary hover:bg-temple-primary/90 text-white h-12 sm:h-14 text-base sm:text-lg font-semibold disabled:opacity-50 disabled:cursor-not-allowed\"\n                disabled={createDonationMutation.isPending || receiptError !== \"\"}\n                onClick={(e) => {\n                  // Prevent double-clicks while processing\n                  if (createDonationMutation.isPending) {\n                    e.preventDefault();\n                    return false;\n                  }\n                }}\n              >\n                <Plus className=\"h-5 w-5 mr-2\" />\n                {createDonationMutation.isPending\n                  ? t(\"adding\")\n                  : t(\"addDonation\")}\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                className=\"w-full lg:w-auto lg:px-8 h-12 sm:h-14 text-base sm:text-lg font-semibold disabled:opacity-50 disabled:cursor-not-allowed\"\n                disabled={createDonationMutation.isPending}\n                onClick={(e) => {\n                  // Prevent clicks while form is submitting\n                  if (createDonationMutation.isPending) {\n                    e.preventDefault();\n                    return false;\n                  }\n                  form.reset({\n                    receiptNo: \"\",\n                    name: \"\",\n                    phone: \"\",\n                    community: undefined,\n                    location: \"\",\n                    amount: undefined,\n                    paymentMode: \"cash\",\n                    inscription: false,\n                    donationDate: undefined,\n                  });\n                  setDonorHistory(null);\n                  setReceiptError(\"\");\n                  // Clear any form validation errors\n                  form.clearErrors();\n                }}\n              >\n                {t(\"reset\")}\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n\n      {/* Success Dialog */}\n      <Dialog open={showSuccessDialog} onOpenChange={setShowSuccessDialog}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <div className=\"flex items-center justify-center w-16 h-16 mx-auto mb-4 bg-green-100 rounded-full\">\n              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            </div>\n            <DialogTitle className=\"text-center text-xl font-semibold\">\n              {language === \"en\"\n                ? \"Donation successfully added\"\n                : \"நன்கொடை வெற்றிகரமாக சேர்க்கப்பட்டது\"}\n            </DialogTitle>\n            <DialogDescription className=\"text-center space-y-2\">\n              {successData && (\n                <div className=\"bg-gray-50 rounded-lg p-4 mt-4\">\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"font-medium\">\n                        {language === \"en\" ? \"Receipt Number:\" : \"ரசீது எண்:\"}\n                      </span>\n                      <span className=\"font-mono\">{successData.receiptNo}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"font-medium\">\n                        {language === \"en\"\n                          ? \"Donor Name:\"\n                          : \"நன்கொடையாளர் பெயர்:\"}\n                      </span>\n                      <span>{successData.name}</span>\n                    </div>\n                    {successData.community &&\n                      successData.community !== \"any\" && (\n                        <div className=\"flex justify-between\">\n                          <span className=\"font-medium\">\n                            {language === \"en\" ? \"Kulam:\" : \"குலம்:\"}\n                          </span>\n                          <span>{successData.community}</span>\n                        </div>\n                      )}\n                    <div className=\"flex justify-between\">\n                      <span className=\"font-medium\">\n                        {language === \"en\" ? \"Amount:\" : \"தொகை:\"}\n                      </span>\n                      <span className=\"font-semibold text-green-600\">\n                        {language === \"en\"\n                          ? formatCurrency(successData.amount)\n                          : formatCurrencyTamil(successData.amount)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"font-medium\">\n                        {language === \"en\"\n                          ? \"Payment Mode:\"\n                          : \"பணம் செலுத்தும் முறை:\"}\n                      </span>\n                      <span className=\"capitalize\">\n                        {successData.paymentMode}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex justify-center mt-6\">\n            <Button\n              onClick={() => setShowSuccessDialog(false)}\n              className=\"w-full sm:w-auto\"\n            >\n              {language === \"en\" ? \"Continue\" : \"தொடரவும்\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":34765},"client/src/pages/donor-lookup.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Modal } from \"@/components/ui/modal\";\nimport { formatCurrency, formatDate, formatPhoneNumber } from \"@/lib/utils\";\nimport { formatCurrencyTamil, formatDateTamil } from \"@/lib/i18n\";\nimport { useLanguage, useTranslation } from \"@/contexts/LanguageContext\";\n// Removed TypeScript imports - using JavaScript\n\nexport default function DonorLookup() {\n  const { language } = useLanguage();\n  const t = useTranslation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [communityFilter, setCommunityFilter] = useState(\"all\");\n  const [selectedDonor, setSelectedDonor] = useState<any>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [searchMode, setSearchMode] = useState(\"phone\");\n\n  // Clear search when mode changes\n  const handleModeChange = (newMode: string) => {\n    setSearchMode(newMode);\n    setSearchQuery(\"\");\n  };\n\n  const { data: donors = [], isLoading } = useQuery({\n    queryKey: [\"/api/donors/search\", searchQuery, communityFilter],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (searchQuery) params.append(\"query\", searchQuery);\n      if (communityFilter && communityFilter !== \"all\")\n        params.append(\"community\", communityFilter);\n\n      const response = await fetch(`/api/donors/search?${params}`, {\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch donors\");\n      }\n\n      return response.json();\n    },\n    enabled: (searchMode === \"phone\" ? searchQuery.length === 10 : searchQuery.length >= 3) || communityFilter !== \"all\",\n  });\n\n  const showDonorDetails = (donor: any) => {\n    setSelectedDonor(donor);\n    setIsModalOpen(true);\n  };\n\n  return (\n    <div className=\"w-full max-w-6xl mx-auto space-y-6 lg:space-y-8\">\n      <Card className=\"shadow-lg border-0 sm:border\">\n        <CardContent className=\"p-4 sm:p-6 lg:p-8\">\n          <h2 className=\"text-xl sm:text-2xl font-semibold text-gray-900 mb-6 lg:mb-8\">\n            {t(\"donorLookupTitle\")}\n          </h2>\n\n          {/* Search Mode Selection */}\n          <div className=\"mb-6 p-4 bg-gray-50 rounded-lg border\">\n            <Label className=\"text-sm sm:text-base font-medium mb-3 block\">\n              {language === \"en\" ? \"Search Method\" : \"தேடல் முறை\"}\n            </Label>\n            <RadioGroup\n              value={searchMode}\n              onValueChange={handleModeChange}\n              className=\"flex flex-row gap-6\"\n            >\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"phone\" id=\"phone-mode\" />\n                <Label htmlFor=\"phone-mode\" className=\"text-sm cursor-pointer\">\n                  {language === \"en\"\n                    ? \"Search by Phone Number\"\n                    : \"தொலைபேசி எண் மூலம் தேடு\"}\n                </Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"name\" id=\"name-mode\" />\n                <Label htmlFor=\"name-mode\" className=\"text-sm cursor-pointer\">\n                  {language === \"en\" ? \"Search by Name\" : \"பெயர் மூலம் தேடு\"}\n                </Label>\n              </div>\n            </RadioGroup>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-8 mb-6 lg:mb-8\">\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm sm:text-base font-medium\">\n                {searchMode === \"phone\"\n                  ? language === \"en\"\n                    ? \"Phone Number\"\n                    : \"தொலைபேசி எண்\"\n                  : language === \"en\"\n                    ? \"Donor Name\"\n                    : \"நன்கொடையாளர் பெயர்\"}\n              </Label>\n              <Input\n                type={searchMode === \"phone\" ? \"tel\" : \"text\"}\n                placeholder={\n                  searchMode === \"phone\"\n                    ? language === \"en\"\n                      ? \"Enter phone number (e.g., 9876543210)\"\n                      : \"தொலைபேசி எண்ணை உள்ளிடவும் (எ.கா., 9876543210)\"\n                    : language === \"en\"\n                      ? \"Enter donor name (e.g., Raman Kumar)\"\n                      : \"நன்கொடையாளர் பெயரை உள்ளிடவும் (எ.கா., ராமன் குமார்)\"\n                }\n                value={searchQuery}\n                onChange={(e) => {\n                  const value = e.target.value;\n                  // Validate input based on search mode\n                  if (searchMode === \"phone\") {\n                    // Only allow numbers for phone search, max 10 digits\n                    if (/^\\d*$/.test(value) && value.length <= 10) {\n                      setSearchQuery(value);\n                    }\n                  } else {\n                    // Allow letters, spaces, dots, and common name characters for name search\n                    if (/^[a-zA-Z\\s\\.\\-&]*$/.test(value)) {\n                      setSearchQuery(value);\n                    }\n                  }\n                }}\n                className=\"text-sm sm:text-base border-2 border-temple-primary/30 focus:border-temple-primary h-11 sm:h-12\"\n              />\n              <p className=\"text-xs sm:text-sm text-gray-500\">\n                {searchMode === \"phone\"\n                  ? language === \"en\"\n                    ? \"Enter exactly 10 digits for phone number\"\n                    : \"தொலைபேசி எண்ணுக்கு சரியாக 10 இலக்கங்களை உள்ளிடவும்\"\n                  : language === \"en\"\n                    ? \"Enter at least 3 characters (letters only)\"\n                    : \"குறைந்தபட்சம் 3 எழுத்துகளை உள்ளிடவும் (எழுத்துகள் மட்டும்)\"}\n              </p>\n            </div>\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm sm:text-base font-medium\">\n                {t(\"filterByCommunity\")}\n              </Label>\n              <Select\n                value={communityFilter}\n                onValueChange={setCommunityFilter}\n              >\n                <SelectTrigger className=\"text-sm sm:text-base h-11 sm:h-12\">\n                  <SelectValue placeholder={t(\"allCommunities\")} />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">{t(\"allCommunities\")}</SelectItem>\n                  <SelectItem value=\"payiran\">{t(\"payiran\")}</SelectItem>\n                  <SelectItem value=\"semban\">{t(\"semban\")}</SelectItem>\n                  <SelectItem value=\"othaalan\">{t(\"othaalan\")}</SelectItem>\n                  <SelectItem value=\"aavan\">{t(\"aavan\")}</SelectItem>\n                  <SelectItem value=\"aadai\">{t(\"aadai\")}</SelectItem>\n                  <SelectItem value=\"vizhiyan\">{t(\"vizhiyan\")}</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Search Results */}\n          <div className=\"space-y-4\">\n            {isLoading && (\n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-500\">{t(\"loading\")}</p>\n              </div>\n            )}\n\n            {!isLoading && ((searchMode === \"phone\" && searchQuery.length < 10) || (searchMode === \"name\" && searchQuery.length < 3)) && communityFilter === \"all\" && (\n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-500\">\n                  {searchMode === \"phone\"\n                    ? language === \"en\"\n                      ? \"Enter exactly 10 digits for phone number search\"\n                      : \"தொலைபேசி எண் தேடலுக்கு சரியாக 10 இலக்கங்களை உள்ளிடவும்\"\n                    : t(\"enterAtLeast3Digits\")}\n                </p>\n              </div>\n            )}\n\n            {!isLoading &&\n              ((searchMode === \"phone\" && searchQuery.length === 10) || (searchMode === \"name\" && searchQuery.length >= 3) || communityFilter !== \"all\") &&\n              donors.length === 0 && (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-500\">{t(\"noDonorsFound\")}</p>\n                </div>\n              )}\n\n            {donors.map((donor: any) => (\n              <div\n                key={donor.phone}\n                className=\"border border-gray-200 rounded-lg p-3 sm:p-4 hover:bg-gray-50 cursor-pointer transition-colors\"\n                onClick={() => showDonorDetails(donor)}\n              >\n                <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-start space-y-2 sm:space-y-0\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium text-gray-900 text-sm sm:text-base\">\n                      {donor.name}\n                    </h3>\n                    <p className=\"text-xs sm:text-sm text-gray-600\">\n                      {formatPhoneNumber(donor.phone)}\n                    </p>\n                    <p className=\"text-xs sm:text-sm text-gray-600\">\n                      {donor.location}\n                    </p>\n                    {donor.community && (\n                      <p className=\"text-xs sm:text-sm text-gray-600\">\n                        {t(\"community\")}: {donor.community}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"text-left sm:text-right flex-shrink-0\">\n                    <p className=\"font-medium text-temple-primary text-sm sm:text-base\">\n                      {language === \"ta\"\n                        ? formatCurrencyTamil(donor.totalAmount)\n                        : formatCurrency(donor.totalAmount)}\n                    </p>\n                    <p className=\"text-xs sm:text-sm text-gray-600\">\n                      {donor.donationCount}{\" \"}\n                      {language === \"en\" ? \"donations\" : \"நன்கொடைகள்\"}\n                    </p>\n                    <p className=\"text-xs sm:text-sm text-gray-600\">\n                      {t(\"lastDonation\")}:{\" \"}\n                      {language === \"ta\"\n                        ? formatDateTamil(donor.lastDonation)\n                        : formatDate(donor.lastDonation)}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Donor Details Modal */}\n      <Modal\n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        title={language === \"en\" ? \"Donor Details\" : \"நன்கொடையாளர் விவரங்கள்\"}\n        size=\"xl\"\n      >\n        {selectedDonor && (\n          <div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-medium text-gray-900\">\n                    {selectedDonor.name}\n                  </h4>\n                  <p className=\"text-gray-600\">\n                    {formatPhoneNumber(selectedDonor.phone)}\n                  </p>\n                  <p className=\"text-gray-600\">{selectedDonor.location}</p>\n                  {selectedDonor.community && (\n                    <p className=\"text-gray-600\">\n                      {t(\"community\")}: {selectedDonor.community}\n                    </p>\n                  )}\n                </div>\n              </div>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"bg-temple-accent p-4 rounded-lg text-center\">\n                    <p className=\"text-2xl font-bold text-temple-primary\">\n                      {formatCurrency(selectedDonor.totalAmount)}\n                    </p>\n                    <p className=\"text-sm text-gray-600\">Total Donated</p>\n                  </div>\n                  <div className=\"bg-gray-100 p-4 rounded-lg text-center\">\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {selectedDonor.donationCount}\n                    </p>\n                    <p className=\"text-sm text-gray-600\">Total Visits</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <h4 className=\"font-medium text-gray-900 mb-4\">Donation History</h4>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full text-sm\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-4 py-2 text-left\">Date</th>\n                    <th className=\"px-4 py-2 text-left\">Receipt No.</th>\n                    <th className=\"px-4 py-2 text-left\">Amount</th>\n                    <th className=\"px-4 py-2 text-left\">Payment Mode</th>\n                    <th className=\"px-4 py-2 text-left\">Inscription</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-gray-200\">\n                  {selectedDonor.donations.map((donation: any) => (\n                    <tr key={donation._id || donation.id}>\n                      <td className=\"px-4 py-2\">\n                        {donation.donationDate ? formatDate(donation.donationDate) : formatDate(donation.createdAt)}\n                      </td>\n                      <td className=\"px-4 py-2\">{donation.receiptNo}</td>\n                      <td className=\"px-4 py-2 font-medium text-temple-primary\">\n                        {formatCurrency(donation.amount)}\n                      </td>\n                      <td className=\"px-4 py-2 capitalize\">\n                        {donation.paymentMode}\n                      </td>\n                      <td className=\"px-4 py-2\">\n                        {donation.inscription ? \"Yes\" : \"No\"}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n      </Modal>\n    </div>\n  );\n}\n","size_bytes":14689},"client/src/pages/google-form-integration.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { formatCurrency, formatDateTime } from \"@/lib/utils\";\nimport { useLanguage, useTranslation } from \"@/contexts/LanguageContext\";\nimport { ExternalLink, Copy, RefreshCw, Phone } from \"lucide-react\";\n\nexport default function GoogleFormIntegration() {\n  const { language } = useLanguage();\n  const t = useTranslation();\n  const { toast } = useToast();\n  const [webhookUrl, setWebhookUrl] = useState(\"\");\n  const [formUrl, setFormUrl] = useState(\"\");\n  const [isGeneratingForm, setIsGeneratingForm] = useState(false);\n\n  const googleFormTemplate = `\n🕉️ TEMPLE DONATION FORM - Manual Receipt Entry\n\nPlease copy this template to create your Google Form:\n\nFORM TITLE: Temple Donation Collection Form\n\nFORM DESCRIPTION: \n\"Submit your donation details through this form. Please ensure all required fields are completed accurately. Your donation receipt will be processed manually by our temple administration.\"\n\nFORM FIELDS:\n\n1. Receipt Number (Text - Required)\n   - Question: \"Receipt Number\"\n   - Description: \"Enter the receipt number provided by temple administration (e.g., 1, 2, A001, etc.)\"\n   - Validation: Required\n\n2. Donor Name (Text - Required)\n   - Question: \"Full Name\"\n   - Description: \"Enter your complete name as it should appear on the receipt\"\n   - Validation: Required\n\n3. Phone Number (Text - Required)\n   - Question: \"Mobile/Phone Number\"\n   - Description: \"Enter 10-digit mobile number (e.g., 9876543210)\"\n   - Validation: Required, Regular expression: ^[0-9]{10}$\n\n4. Community/Kulam (Multiple Choice - Required)\n   - Question: \"Community (Kulam)\"\n   - Options:\n     • Any / எதுவும்\n     • Payiran / பயிரான்\n     • Semban / செம்பன்\n     • Othaalan / ஓதாளன் \n     • Aavan / ஆவான்\n     • Aadai / ஆடை\n     • Vizhiyan / விழியன்\n   - Validation: Required\n\n5. Location (Text - Required)\n   - Question: \"City/Village\"\n   - Description: \"Enter your city or village name\"\n   - Validation: Required\n\n6. Donation Amount (Number - Required)\n   - Question: \"Donation Amount (₹)\"\n   - Description: \"Enter donation amount in rupees (numbers only)\"\n   - Validation: Required, Number, Greater than 0\n\n7. Payment Mode (Multiple Choice - Required)\n   - Question: \"Payment Method\"\n   - Options:\n     • Cash\n     • Card (Debit/Credit)\n     • UPI\n     • Bank Transfer\n     • Cheque\n   - Validation: Required\n\n8. Inscription Required (Multiple Choice - Required)\n   - Question: \"Inscription Required?\"\n   - Description: \"Do you require inscription service?\"\n   - Options:\n     • Yes\n     • No\n   - Validation: Required\n\n9. Donation Date (Date - Optional)\n   - Question: \"Donation Date\"\n   - Description: \"Select the date of donation (leave blank for today's date)\"\n   - Type: Date\n4. Set up Apps Script trigger to send data to our webhook\n5. Use the webhook URL: ${window.location.origin}/api/google-form-webhook\n`;\n\n  const generateFormCode = () => {\n    const code = `\n// Google Apps Script Code for Temple Donation Form Integration\n// This script automatically sends form submissions to your temple donation system\n\nfunction onFormSubmit(e) {\n  const responses = e.namedValues;\n  \n  // Extract form data - Field names match the Google Form setup\n  const donationData = {\n    receiptNo: responses['Receipt Number'] ? responses['Receipt Number'][0] : null,\n    name: responses['Full Name'][0],\n    phone: responses['Mobile/Phone Number'][0],\n    community: mapCommunity(responses['Community (Kulam)'][0]),\n    location: responses['City/Village'][0],\n    amount: parseInt(responses['Donation Amount (₹)'][0]),\n    paymentMode: mapPaymentMode(responses['Payment Method'][0]),\n    inscription: responses['Inscription Required?'][0].toLowerCase() === 'yes',\n    donationDate: responses['Donation Date'] ? responses['Donation Date'][0] : null\n  };\n  \n  // Send to your temple website's webhook endpoint\n  const webhookUrl = '${window.location.origin}/api/google-form-webhook';\n  \n  const options = {\n    'method': 'POST',\n    'headers': {\n      'Content-Type': 'application/json',\n    },\n    'payload': JSON.stringify(donationData)\n  };\n  \n  try {\n    const response = UrlFetchApp.fetch(webhookUrl, options);\n    const responseText = response.getContentText();\n    \n    if (response.getResponseCode() === 201) {\n      console.log('✅ Donation submitted successfully to temple system');\n      console.log('Receipt Number:', donationData.receiptNo);\n      console.log('Response:', responseText);\n    } else if (response.getResponseCode() === 400) {\n      console.error('❌ Validation error:', responseText);\n      // You can add email notification here if needed\n    } else {\n      console.error('❌ Server error:', responseText);\n      console.error('Status Code:', response.getResponseCode());\n    }\n  } catch (error) {\n    console.error('❌ Failed to submit donation:', error.toString());\n    console.error('Please check your internet connection and webhook URL');\n  }\n}\n\n// Helper function to map community names to system values\nfunction mapCommunity(community) {\n  const communityMap = {\n    'Any / எதுவும்': 'any',\n    'Payiran / பயிரான்': 'payiran',\n    'Semban / செம்பன்': 'semban',\n    'Othaalan / ஓதாளன்': 'othaalan',\n    'Aavan / ஆவான்': 'aavan',\n    'Aadai / ஆடை': 'aadai',\n    'Vizhiyan / விழியன்': 'vizhiyan'\n  };\n  return communityMap[community] || 'any';\n}\n\n// Helper function to map payment modes to system values\nfunction mapPaymentMode(paymentMode) {\n  const paymentMap = {\n    'Cash': 'cash',\n    'Card (Debit/Credit)': 'card',\n    'UPI': 'upi',\n    'Bank Transfer': 'bank_transfer',\n    'Cheque': 'cheque'\n  };\n  return paymentMap[paymentMode] || 'cash';\n}\n`;\n    return code;\n  };\n\n  const copyToClipboard = (text: string, type: string) => {\n    navigator.clipboard.writeText(text).then(() => {\n      toast({\n        title: \"Copied!\",\n        description: `${type} copied to clipboard`,\n      });\n    });\n  };\n\n  const testWebhook = async () => {\n    try {\n      const testData = {\n        receiptNo: \"TEST001\",\n        name: \"Test Donor\",\n        phone: \"9999999999\",\n        community: \"payiran\",\n        location: \"Test Location\",\n        amount: 1000,\n        paymentMode: \"upi\",\n        inscription: false\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/google-form-webhook\", testData);\n      toast({\n        title: \"Test Successful\",\n        description: \"Webhook is working correctly\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Test Failed\",\n        description: error.message || \"Webhook test failed\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-semibold text-gray-900\">Google Form Integration</h2>\n        <Badge variant=\"outline\" className=\"bg-temple-accent text-temple-primary\">\n          <Phone className=\"h-3 w-3 mr-1\" />\n          Phone Primary Search\n        </Badge>\n      </div>\n\n      {/* Step-by-Step Form Creation Guide */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">📝 Create Your Google Form Now</h3>\n          \n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n            <h4 className=\"font-medium text-blue-800 mb-2\">✅ Google Form Setup Steps</h4>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Button \n                  onClick={() => window.open('https://forms.google.com/create', '_blank')}\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                >\n                  <ExternalLink className=\"h-4 w-4 mr-2\" />\n                  Create Form Now\n                </Button>\n                <span className=\"text-sm text-blue-700\">Click to start creating your form</span>\n              </div>\n              \n              <div className=\"text-sm text-blue-800\">\n                <p><strong>Step 1: Create the Form</strong></p>\n                <p><strong>Title:</strong> Temple Donation Collection Form</p>\n                <p><strong>Description:</strong> Submit your donation details through this form. Please ensure all required fields are completed accurately.</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-6\">\n            <div className=\"border-l-4 border-temple-primary pl-4\">\n              <h4 className=\"font-semibold text-gray-900 mb-2\">Step 1: Form Setup</h4>\n              <div className=\"space-y-2 text-sm\">\n                <p><strong>Title:</strong> Temple Donation Collection Form</p>\n                <p><strong>Description:</strong> Submit your donation details through this form. Please ensure all required fields are completed accurately.</p>\n              </div>\n            </div>\n\n            <div className=\"border-l-4 border-blue-500 pl-4\">\n              <h4 className=\"font-semibold text-gray-900 mb-2\">Step 2: Add These Fields</h4>\n              <div className=\"space-y-3\">\n                <div className=\"bg-gray-50 p-3 rounded\">\n                  <p><strong>Full Name</strong> – Short answer, Required</p>\n                </div>\n                <div className=\"bg-yellow-50 p-3 rounded border border-yellow-200\">\n                  <p><strong>Mobile/Phone Number</strong> – Short answer, Required</p>\n                  <p className=\"text-xs text-gray-600 mt-1\">Use Regular expression for validation: <code>^\\d{10}$</code></p>\n                </div>\n                <div className=\"bg-blue-50 p-3 rounded border border-blue-200\">\n                  <p><strong>Community (Kulam)</strong> – Multiple choice, Required</p>\n                  <p className=\"text-xs text-blue-600 mt-1\">Add community options with Tamil text</p>\n                </div>\n                <div className=\"bg-gray-50 p-3 rounded\">\n                  <p><strong>City/Village</strong> – Short answer, Required</p>\n                </div>\n                <div className=\"bg-green-50 p-3 rounded border border-green-200\">\n                  <p><strong>Donation Amount (₹)</strong> – Number, Required</p>\n                  <p className=\"text-xs text-green-600 mt-1\">Set validation to: Greater than 0</p>\n                </div>\n                <div className=\"bg-purple-50 p-3 rounded border border-purple-200\">\n                  <p><strong>Payment Method</strong> – Multiple choice, Required</p>\n                  <p className=\"text-xs text-purple-600 mt-1\">Add 5 payment options</p>\n                </div>\n                <div className=\"bg-orange-50 p-3 rounded border border-orange-200\">\n                  <p><strong>Inscription Required?</strong> – Multiple choice, Required</p>\n                  <p className=\"text-xs text-orange-600 mt-1\">Options: Yes, No</p>\n                </div>\n                <div className=\"bg-gray-50 p-3 rounded\">\n                  <p><strong>Donation Date</strong> – Date, Optional</p>\n                </div>\n              </div>\n              <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded\">\n                <p className=\"text-sm text-blue-800\"><strong>✅ Once done:</strong> Click \"Send\" → choose the link icon → copy the link to your form.</p>\n              </div>\n            </div>\n\n            <div className=\"border-l-4 border-green-500 pl-4\">\n              <h4 className=\"font-semibold text-gray-900 mb-2\">Step 3: Quick Actions</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"text-center p-4 bg-temple-accent rounded-lg\">\n                  <div className=\"text-2xl font-bold text-temple-primary mb-2\">📋</div>\n                  <h4 className=\"font-medium\">Copy Template</h4>\n                  <p className=\"text-sm text-gray-600\">Get field details below</p>\n                </div>\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-600 mb-2\">⚙️</div>\n                  <h4 className=\"font-medium\">Add Apps Script</h4>\n                  <p className=\"text-sm text-gray-600\">Copy integration code</p>\n                </div>\n                <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-600 mb-2\">✅</div>\n                  <h4 className=\"font-medium\">Test Form</h4>\n                  <p className=\"text-sm text-gray-600\">Verify data flow</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Webhook Information */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Webhook Configuration</h3>\n          <div className=\"space-y-4\">\n            <div>\n              <Label>Webhook URL (Use this in your Apps Script)</Label>\n              <div className=\"flex space-x-2 mt-1\">\n                <Input \n                  value={`${window.location.origin}/api/google-form-webhook`}\n                  readOnly \n                  className=\"bg-gray-50\"\n                />\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => copyToClipboard(`${window.location.origin}/api/google-form-webhook`, \"Webhook URL\")}\n                >\n                  <Copy className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"flex space-x-2\">\n              <Button onClick={testWebhook} variant=\"outline\">\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Test Webhook\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Form Template */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Google Form Template</h3>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => copyToClipboard(googleFormTemplate, \"Form template\")}\n            >\n              <Copy className=\"h-4 w-4 mr-2\" />\n              Copy Template\n            </Button>\n          </div>\n          <Textarea \n            value={googleFormTemplate}\n            readOnly\n            className=\"min-h-[300px] bg-gray-50 text-sm font-mono\"\n          />\n          <div className=\"mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n            <h4 className=\"font-medium text-yellow-800 mb-2\">Important Notes:</h4>\n            <ul className=\"text-sm text-yellow-700 space-y-1\">\n              <li>• Phone number is the primary identifier - ensure it's validated for 10 digits</li>\n              <li>• Existing donors will be automatically detected by phone number</li>\n              <li>• Community and location are optional but recommended for better organization</li>\n              <li>• All payment modes are supported in the system</li>\n            </ul>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Visual Form Creation Guide */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">📋 Field-by-Field Setup Guide</h3>\n          \n          <div className=\"space-y-4\">\n            {/* Field 1 */}\n            <div className=\"border border-gray-200 rounded-lg p-4 bg-white\">\n              <div className=\"flex items-center mb-3\">\n                <div className=\"w-8 h-8 bg-temple-primary text-white rounded-full flex items-center justify-center text-sm font-bold mr-3\">1</div>\n                <h4 className=\"font-semibold text-gray-900\">Receipt Number</h4>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                <div><strong>Type:</strong> Short answer</div>\n                <div><strong>Required:</strong> ✅ Yes</div>\n                <div><strong>Validation:</strong> None</div>\n              </div>\n              <div className=\"mt-2 text-sm text-gray-600\">\n                <strong>Description:</strong> \"Enter the receipt number provided by temple administration (e.g., 1, 2, A001, etc.)\"\n              </div>\n            </div>\n\n            {/* Field 2 */}\n            <div className=\"border border-gray-200 rounded-lg p-4 bg-white\">\n              <div className=\"flex items-center mb-3\">\n                <div className=\"w-8 h-8 bg-temple-primary text-white rounded-full flex items-center justify-center text-sm font-bold mr-3\">2</div>\n                <h4 className=\"font-semibold text-gray-900\">Full Name</h4>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                <div><strong>Type:</strong> Short answer</div>\n                <div><strong>Required:</strong> ✅ Yes</div>\n                <div><strong>Validation:</strong> None</div>\n              </div>\n            </div>\n\n            {/* Field 3 */}\n            <div className=\"border border-gray-200 rounded-lg p-4 bg-white\">\n              <div className=\"flex items-center mb-3\">\n                <div className=\"w-8 h-8 bg-temple-primary text-white rounded-full flex items-center justify-center text-sm font-bold mr-3\">3</div>\n                <h4 className=\"font-semibold text-gray-900\">Mobile/Phone Number</h4>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                <div><strong>Type:</strong> Short answer</div>\n                <div><strong>Required:</strong> ✅ Yes</div>\n                <div><strong>Validation:</strong> Regular expression</div>\n              </div>\n              <div className=\"mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded text-sm\">\n                <strong>Validation Pattern:</strong> <code>^[0-9]{10}$</code><br/>\n                <strong>Error Message:</strong> \"Please enter a valid 10-digit phone number\"\n              </div>\n            </div>\n\n            {/* Field 4 */}\n            <div className=\"border border-gray-200 rounded-lg p-4 bg-white\">\n              <div className=\"flex items-center mb-3\">\n                <div className=\"w-8 h-8 bg-temple-primary text-white rounded-full flex items-center justify-center text-sm font-bold mr-3\">4</div>\n                <h4 className=\"font-semibold text-gray-900\">Community (Kulam)</h4>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                <div><strong>Type:</strong> Multiple choice</div>\n                <div><strong>Required:</strong> ✅ Yes</div>\n                <div><strong>Options:</strong> 7 choices</div>\n              </div>\n              <div className=\"mt-2 p-2 bg-blue-50 border border-blue-200 rounded text-sm\">\n                <strong>Add these options:</strong><br/>\n                • Any / எதுவும்<br/>\n                • Payiran / பயிரான்<br/>\n                • Semban / செம்பன்<br/>\n                • Othaalan / ஓதாளன்<br/>\n                • Aavan / ஆவான்<br/>\n                • Aadai / ஆடை<br/>\n                • Vizhiyan / விழியன்\n              </div>\n            </div>\n\n            {/* Field 5 */}\n            <div className=\"border border-gray-200 rounded-lg p-4 bg-white\">\n              <div className=\"flex items-center mb-3\">\n                <div className=\"w-8 h-8 bg-temple-primary text-white rounded-full flex items-center justify-center text-sm font-bold mr-3\">5</div>\n                <h4 className=\"font-semibold text-gray-900\">City/Village</h4>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                <div><strong>Type:</strong> Short answer</div>\n                <div><strong>Required:</strong> ✅ Yes</div>\n                <div><strong>Validation:</strong> None</div>\n              </div>\n            </div>\n\n            {/* Field 6 */}\n            <div className=\"border border-gray-200 rounded-lg p-4 bg-white\">\n              <div className=\"flex items-center mb-3\">\n                <div className=\"w-8 h-8 bg-temple-primary text-white rounded-full flex items-center justify-center text-sm font-bold mr-3\">6</div>\n                <h4 className=\"font-semibold text-gray-900\">Donation Amount (₹)</h4>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                <div><strong>Type:</strong> Number</div>\n                <div><strong>Required:</strong> ✅ Yes</div>\n                <div><strong>Validation:</strong> Greater than 0</div>\n              </div>\n            </div>\n\n            {/* Field 7 */}\n            <div className=\"border border-gray-200 rounded-lg p-4 bg-white\">\n              <div className=\"flex items-center mb-3\">\n                <div className=\"w-8 h-8 bg-temple-primary text-white rounded-full flex items-center justify-center text-sm font-bold mr-3\">7</div>\n                <h4 className=\"font-semibold text-gray-900\">Payment Method</h4>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                <div><strong>Type:</strong> Multiple choice</div>\n                <div><strong>Required:</strong> ✅ Yes</div>\n                <div><strong>Options:</strong> 5 choices</div>\n              </div>\n              <div className=\"mt-2 p-2 bg-green-50 border border-green-200 rounded text-sm\">\n                <strong>Add these options:</strong><br/>\n                • Cash<br/>\n                • Card (Debit/Credit)<br/>\n                • UPI<br/>\n                • Bank Transfer<br/>\n                • Cheque\n              </div>\n            </div>\n\n            {/* Field 8 */}\n            <div className=\"border border-gray-200 rounded-lg p-4 bg-white\">\n              <div className=\"flex items-center mb-3\">\n                <div className=\"w-8 h-8 bg-temple-primary text-white rounded-full flex items-center justify-center text-sm font-bold mr-3\">8</div>\n                <h4 className=\"font-semibold text-gray-900\">Inscription Required?</h4>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                <div><strong>Type:</strong> Multiple choice</div>\n                <div><strong>Required:</strong> ✅ Yes</div>\n                <div><strong>Options:</strong> 2 choices</div>\n              </div>\n              <div className=\"mt-2 p-2 bg-purple-50 border border-purple-200 rounded text-sm\">\n                <strong>Add these options:</strong><br/>\n                • Yes<br/>\n                • No\n              </div>\n            </div>\n\n            {/* Field 9 */}\n            <div className=\"border border-gray-200 rounded-lg p-4 bg-white\">\n              <div className=\"flex items-center mb-3\">\n                <div className=\"w-8 h-8 bg-gray-400 text-white rounded-full flex items-center justify-center text-sm font-bold mr-3\">9</div>\n                <h4 className=\"font-semibold text-gray-900\">Donation Date</h4>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                <div><strong>Type:</strong> Date</div>\n                <div><strong>Required:</strong> ❌ Optional</div>\n                <div><strong>Validation:</strong> None</div>\n              </div>\n              <div className=\"mt-2 text-sm text-gray-600\">\n                <strong>Description:</strong> \"Select the date of donation (leave blank for today's date)\"\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-6 p-4 bg-green-50 border border-green-200 rounded-lg\">\n            <h4 className=\"font-medium text-green-800 mb-2\">✅ Final Steps After Creating Form:</h4>\n            <ol className=\"text-sm text-green-700 list-decimal list-inside space-y-1\">\n              <li>Click \"Send\" to get the form link</li>\n              <li>Go to the 3-dot menu → Script editor</li>\n              <li>Paste the Apps Script code from below</li>\n              <li>Set up the trigger for form submissions</li>\n              <li>Test the form with sample data</li>\n            </ol>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Apps Script Code */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Apps Script Integration Code</h3>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => copyToClipboard(generateFormCode(), \"Apps Script code\")}\n            >\n              <Copy className=\"h-4 w-4 mr-2\" />\n              Copy Code\n            </Button>\n          </div>\n          <Textarea \n            value={generateFormCode()}\n            readOnly\n            className=\"min-h-[400px] bg-gray-50 text-sm font-mono\"\n          />\n          <div className=\"mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n            <h4 className=\"font-medium text-blue-800 mb-2\">Complete Setup Instructions:</h4>\n            <ol className=\"text-sm text-blue-700 space-y-2 list-decimal list-inside\">\n              <li><strong>Create Google Form:</strong>\n                <ul className=\"ml-4 mt-1 list-disc\">\n                  <li>Go to <a href=\"https://forms.google.com\" target=\"_blank\" className=\"underline\">forms.google.com</a></li>\n                  <li>Click \"+\" to create a new form</li>\n                  <li>Set title: \"Temple Donation Collection Form\"</li>\n                </ul>\n              </li>\n              <li><strong>Add Form Fields:</strong> Use the template above to create each field with exact names and validation</li>\n              <li><strong>Set Up Apps Script:</strong>\n                <ul className=\"ml-4 mt-1 list-disc\">\n                  <li>In your form, click the 3-dot menu → Script editor</li>\n                  <li>Delete default code and paste the Apps Script code above</li>\n                  <li>Save with name \"DonationWebhook\"</li>\n                </ul>\n              </li>\n              <li><strong>Create Trigger:</strong>\n                <ul className=\"ml-4 mt-1 list-disc\">\n                  <li>In Apps Script, click Triggers (clock icon)</li>\n                  <li>Add trigger → Function: onFormSubmit → Event source: From form → Event type: On form submit</li>\n                  <li>Save and authorize permissions</li>\n                </ul>\n              </li>\n              <li><strong>Test Integration:</strong> Submit a test response to verify data appears in your temple system</li>\n            </ol>\n          </div>\n          \n          <div className=\"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\">\n            <h4 className=\"font-medium text-green-800 mb-2\">Important Notes:</h4>\n            <ul className=\"text-sm text-green-700 space-y-1 list-disc list-inside\">\n              <li>Ensure receipt numbers are coordinated with temple administration</li>\n              <li>Test the form before sharing with donors</li>\n              <li>Form responses will automatically sync to your donation system</li>\n              <li>Monitor Apps Script execution logs for any issues</li>\n            </ul>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Benefits */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Integration Benefits</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium text-temple-primary\">Automated Processing</h4>\n              <ul className=\"text-sm text-gray-600 space-y-1\">\n                <li>• Automatic receipt number generation</li>\n                <li>• Real-time donor history detection via phone</li>\n                <li>• Instant dashboard updates</li>\n              </ul>\n            </div>\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium text-temple-primary\">Smart Features</h4>\n              <ul className=\"text-sm text-gray-600 space-y-1\">\n                <li>• Phone number as primary identifier</li>\n                <li>• Automatic donor data prefilling</li>\n                <li>• Collection statistics tracking</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":29181},"client/src/pages/import-data.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"@/contexts/LanguageContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Upload, FileText, Download, AlertCircle, CheckCircle } from \"lucide-react\";\nimport * as XLSX from 'xlsx';\n\ninterface ImportResult {\n  success: boolean;\n  totalRecords: number;\n  successCount: number;\n  failureCount: number;\n  errors: string[];\n}\n\nexport default function ImportData() {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [importResult, setImportResult] = useState<ImportResult | null>(null);\n  const t = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const importMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await fetch('/api/donations/import', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: (result: ImportResult) => {\n      setImportResult(result);\n      \n      if (result.success) {\n        toast({\n          title: t(\"success\"),\n          description: `Successfully imported ${result.successCount} of ${result.totalRecords} donations`,\n        });\n        // Invalidate donations cache to refresh data\n        queryClient.invalidateQueries({ queryKey: [\"/api/donations\"] });\n      } else {\n        toast({\n          title: t(\"error\"),\n          description: `Import completed with errors. ${result.successCount}/${result.totalRecords} records imported.`,\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error) => {\n      console.error('Import error:', error);\n      toast({\n        title: t(\"error\"),\n        description: \"Failed to import data. Please check the file format and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      // Validate file type - accept CSV and Excel files\n      const validExtensions = ['.csv', '.xlsx', '.xls'];\n      const isValidFile = validExtensions.some(ext => file.name.toLowerCase().endsWith(ext));\n      \n      if (!isValidFile) {\n        toast({\n          title: t(\"error\"),\n          description: \"Please select a CSV (.csv) or Excel (.xlsx, .xls) file\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setSelectedFile(file);\n      setImportResult(null);\n    }\n  };\n\n  const handleImport = () => {\n    if (!selectedFile) {\n      toast({\n        title: t(\"error\"),\n        description: \"Please select a file first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    importMutation.mutate(selectedFile);\n  };\n\n  const downloadTemplate = (format: 'csv' | 'excel' = 'csv') => {\n    const headers = [\n      'S.No',\n      'Receipt No',\n      'Name',\n      'Community',\n      'Location',\n      'Address',\n      'Phone',\n      'Amount',\n      'Payment Mode',\n      'Inscription',\n      'Date'\n    ];\n    \n    const sampleData = [\n      [1, 'R001', 'John Doe', 'payiran', 'Chennai', '123 Temple Street', '9876543210', 1000, 'cash', 'No', '30/06/2025'],\n      [2, 'R002', 'Jane Smith', 'chozhan', 'Madurai', '456 Anna Nagar', '8765432109', 2000, 'upi', 'Yes', '29/06/2025'],\n      [3, 'R003', 'Ram Kumar', 'any', 'Trichy', '789 Gandhi Road', '9123456789', 500, 'card', 'No', '28/06/2025']\n    ];\n\n    if (format === 'excel') {\n      // Create Excel file\n      const worksheet = XLSX.utils.aoa_to_sheet([headers, ...sampleData]);\n      const workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, worksheet, 'Donations');\n      \n      // Download Excel file\n      XLSX.writeFile(workbook, 'donation_import_template.xlsx');\n    } else {\n      // Create CSV file\n      const csvContent = [\n        headers.join(','),\n        ...sampleData.map(row => \n          row.map(cell => \n            typeof cell === 'string' && cell.includes(',') \n              ? `\"${cell}\"` \n              : cell\n          ).join(',')\n        )\n      ].join('\\n');\n      \n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8' });\n      const url = window.URL.createObjectURL(blob);\n      \n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'donation_import_template.csv';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">\n            {t(\"importData\")}\n          </h1>\n          <p className=\"text-gray-600 mt-2\">\n            Import donation data from CSV or Excel files. Download the template below for the correct format.\n          </p>\n          \n          {/* Instructions Card */}\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mt-4\">\n            <h3 className=\"font-medium text-blue-900 mb-2\">File Format Requirements:</h3>\n            <ul className=\"text-sm text-blue-800 space-y-1\">\n              <li>• <strong>Required fields:</strong> Name, Phone, Amount</li>\n              <li>• <strong>Phone:</strong> Must be exactly 10 digits</li>\n              <li>• <strong>Amount:</strong> Numbers only (no currency symbols)</li>\n              <li>• <strong>Community:</strong> any, payiran, chozhan, pandiyan, othaalan, vizhiyan, aadai, aavan, odhaalan, semban</li>\n              <li>• <strong>Payment Mode:</strong> cash, card, upi, bankTransfer, cheque</li>\n              <li>• <strong>Inscription:</strong> Yes/No</li>\n              <li>• <strong>Date format:</strong> DD/MM/YYYY (e.g., 30/06/2025) or DD-MM-YYYY (e.g., 30-06-2025)</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Upload Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Upload className=\"h-5 w-5\" />\n              <span>Upload File</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n              <input\n                type=\"file\"\n                accept=\".csv,.xlsx,.xls\"\n                onChange={handleFileSelect}\n                className=\"hidden\"\n                id=\"file-upload\"\n              />\n              <label\n                htmlFor=\"file-upload\"\n                className=\"cursor-pointer flex flex-col items-center space-y-2\"\n              >\n                <FileText className=\"h-12 w-12 text-gray-400\" />\n                <span className=\"text-sm text-gray-600\">\n                  Click to select CSV or Excel file or drag and drop\n                </span>\n              </label>\n            </div>\n\n            {selectedFile && (\n              <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                <div className=\"flex items-center space-x-2\">\n                  <FileText className=\"h-4 w-4 text-gray-500\" />\n                  <span className=\"text-sm font-medium\">{selectedFile.name}</span>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setSelectedFile(null)}\n                >\n                  Remove\n                </Button>\n              </div>\n            )}\n\n            <Button\n              onClick={handleImport}\n              disabled={!selectedFile || importMutation.isPending}\n              className=\"w-full\"\n            >\n              {importMutation.isPending ? \"Importing...\" : \"Import Data\"}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Template Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Download className=\"h-5 w-5\" />\n              <span>Download Templates</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-sm text-gray-600\">\n              Download sample templates with the correct format and headers.\n            </p>\n\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-sm mb-2\">Required Columns:</h4>\n              <ul className=\"text-xs text-gray-600 space-y-1\">\n                <li>• receiptNo (unique receipt number)</li>\n                <li>• name (donor name)</li>\n                <li>• phone (10-digit phone number)</li>\n                <li>• location (donor location)</li>\n                <li>• address (donor address, optional)</li>\n                <li>• community (any, payiran, semban, othaalan, aavan, aadai, vizhiyan)</li>\n                <li>• amount (donation amount as number)</li>\n                <li>• paymentMode (cash, card, upi, bankTransfer, cheque)</li>\n                <li>• inscription (Yes/No)</li>\n                <li>• date (M/D/YYYY format, optional)</li>\n              </ul>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-2\">\n              <Button\n                onClick={(e) => {\n                  e.preventDefault();\n                  downloadTemplate('csv');\n                }}\n                variant=\"outline\"\n                className=\"flex-1\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                CSV Template\n              </Button>\n              <Button\n                onClick={(e) => {\n                  e.preventDefault();\n                  downloadTemplate('excel');\n                }}\n                variant=\"outline\"\n                className=\"flex-1\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Excel Template\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Import Results */}\n      {importResult && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              {importResult.success ? (\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              ) : (\n                <AlertCircle className=\"h-5 w-5 text-orange-600\" />\n              )}\n              <span>Import Results</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {importResult.totalRecords}\n                </div>\n                <div className=\"text-sm text-gray-600\">Total Records</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {importResult.successCount}\n                </div>\n                <div className=\"text-sm text-gray-600\">Successful</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-red-600\">\n                  {importResult.failureCount}\n                </div>\n                <div className=\"text-sm text-gray-600\">Failed</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  {Math.round((importResult.successCount / importResult.totalRecords) * 100)}%\n                </div>\n                <div className=\"text-sm text-gray-600\">Success Rate</div>\n              </div>\n            </div>\n\n            {importResult.errors.length > 0 && (\n              <>\n                <Separator className=\"my-4\" />\n                <div>\n                  <h4 className=\"font-medium text-sm mb-3 text-red-600 flex items-center space-x-2\">\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <span>Detailed Error Report ({importResult.errors.length} errors)</span>\n                  </h4>\n                  <div className=\"max-h-60 overflow-y-auto space-y-2 border rounded-md p-3 bg-gray-50\">\n                    {importResult.errors.map((error, index) => (\n                      <div key={index} className=\"bg-red-50 border-l-4 border-red-400 p-3 rounded\">\n                        <div className=\"text-sm text-red-700 font-medium mb-1\">\n                          {error.split(':')[0]}:\n                        </div>\n                        <div className=\"text-xs text-red-600 pl-2\">\n                          {error.split(':').slice(1).join(':').trim()}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"mt-3 p-3 bg-blue-50 border border-blue-200 rounded\">\n                    <h5 className=\"text-sm font-medium text-blue-900 mb-1\">Common Issues:</h5>\n                    <ul className=\"text-xs text-blue-800 space-y-1\">\n                      <li>• Phone numbers must be exactly 10 digits</li>\n                      <li>• Amount must be a valid number greater than 0</li>\n                      <li>• Payment mode must be: cash, card, upi, bankTransfer, or cheque</li>\n                      <li>• Community must be one of the valid options</li>\n                      <li>• Name and Receipt Number are required fields</li>\n                      <li>• Date must be in DD/MM/YYYY format (e.g., 30/06/2025) or DD-MM-YYYY format</li>\n                      <li>• Excel files: Format date cells as text to avoid serial number conversion</li>\n                    </ul>\n                  </div>\n                </div>\n              </>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":14457},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/fast-loading.tsx":{"content":"import React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\n// Ultra-fast loading component for dashboard\nexport function DashboardSkeleton() {\n  return (\n    <div className=\"space-y-6 animate-pulse\">\n      {/* Header skeleton */}\n      <div className=\"flex justify-between items-center\">\n        <div className=\"h-8 bg-gray-200 rounded w-64\"></div>\n        <div className=\"h-10 bg-gray-200 rounded w-32\"></div>\n      </div>\n      \n      {/* Stats cards skeleton */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4 sm:gap-6\">\n        {[1, 2, 3, 4].map((i) => (\n          <div key={i} className=\"bg-white border rounded-lg p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"h-4 bg-gray-200 rounded w-24 mb-2\"></div>\n                <div className=\"h-8 bg-gray-200 rounded w-16\"></div>\n              </div>\n              <div className=\"h-12 w-12 bg-gray-200 rounded-full\"></div>\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      {/* Charts skeleton */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"bg-white border rounded-lg p-6\">\n          <div className=\"h-6 bg-gray-200 rounded w-48 mb-4\"></div>\n          <div className=\"space-y-3\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"flex items-center justify-between\">\n                <div className=\"h-4 bg-gray-200 rounded w-16\"></div>\n                <div className=\"h-2 bg-gray-200 rounded w-32\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        <div className=\"bg-white border rounded-lg p-6\">\n          <div className=\"h-6 bg-gray-200 rounded w-36 mb-4\"></div>\n          <div className=\"space-y-3\">\n            {[1, 2, 3, 4, 5].map((i) => (\n              <div key={i} className=\"flex items-center justify-between py-2\">\n                <div>\n                  <div className=\"h-4 bg-gray-200 rounded w-24 mb-1\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-16\"></div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"h-4 bg-gray-200 rounded w-16 mb-1\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-12\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Fast loading spinner for instant feedback\nexport function FastSpinner({ className }: { className?: string }) {\n  return (\n    <div className={cn(\"inline-flex items-center\", className)}>\n      <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-gray-300 border-t-temple-primary\"></div>\n      <span className=\"ml-2 text-sm text-gray-600\">Loading...</span>\n    </div>\n  );\n}","size_bytes":2810},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/loading-spinner.tsx":{"content":"import React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface LoadingSpinnerProps {\n  size?: \"sm\" | \"md\" | \"lg\";\n  className?: string;\n}\n\nexport function LoadingSpinner({ size = \"md\", className }: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: \"h-4 w-4\",\n    md: \"h-6 w-6\", \n    lg: \"h-8 w-8\"\n  };\n\n  return (\n    <div \n      className={cn(\n        \"animate-spin rounded-full border-2 border-gray-300 border-t-temple-primary\",\n        sizeClasses[size],\n        className\n      )}\n    />\n  );\n}\n\n// Fast loading skeleton component\nexport function FastSkeleton({ className }: { className?: string }) {\n  return (\n    <div className={cn(\"animate-pulse bg-gray-200 dark:bg-gray-700 rounded\", className)} />\n  );\n}","size_bytes":728},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayName = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { X } from \"lucide-react\";\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string;\n  children: React.ReactNode;\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\";\n}\n\nexport function Modal({ isOpen, onClose, title, children, size = \"lg\" }: ModalProps) {\n  const sizeClasses = {\n    sm: \"max-w-md\",\n    md: \"max-w-lg\",\n    lg: \"max-w-4xl\",\n    xl: \"max-w-6xl\"\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className={`${sizeClasses[size]} w-full mx-4 max-h-[90vh] overflow-y-auto`}>\n        <DialogHeader className=\"flex flex-row items-center justify-between sticky top-0 bg-white border-b pb-4\">\n          <DialogTitle className=\"text-lg font-semibold text-gray-900\">{title}</DialogTitle>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </DialogHeader>\n        <div className=\"pt-4\">\n          {children}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":1145},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/stats-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string;\n  icon: React.ReactNode;\n  iconBgColor?: string;\n  change?: {\n    value: string;\n    positive: boolean;\n  };\n  subtitle?: string;\n  className?: string;\n}\n\nexport function StatsCard({\n  title,\n  value,\n  icon,\n  iconBgColor = \"bg-temple-accent\",\n  change,\n  subtitle,\n  className\n}: StatsCardProps) {\n  return (\n    <Card className={cn(\"\", className)}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-gray-600\">{title}</p>\n            <p className=\"text-2xl font-bold text-gray-900\">{value}</p>\n          </div>\n          <div className={cn(\"p-3 rounded-full\", iconBgColor)}>\n            {icon}\n          </div>\n        </div>\n        {change && (\n          <p className={cn(\n            \"text-sm mt-2\",\n            change.positive ? \"text-green-600\" : \"text-red-600\"\n          )}>\n            <i className={cn(\n              \"fas mr-1\",\n              change.positive ? \"fa-arrow-up\" : \"fa-arrow-down\"\n            )}></i>\n            {change.value}\n          </p>\n        )}\n        {subtitle && (\n          <p className=\"text-sm text-gray-600 mt-2\">{subtitle}</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1372},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"build-simple.js":{"content":"// Simple build script to bypass the problematic esbuild step\nimport { execSync } from 'child_process';\n\ntry {\n  console.log('Building frontend only...');\n  execSync('npx vite build', { stdio: 'inherit', cwd: process.cwd() });\n  console.log('✅ Frontend build successful!');\n  console.log('🎉 Build completed successfully!');\n} catch (error) {\n  console.error('❌ Build failed:', error.message);\n  process.exit(1);\n}","size_bytes":420},"start-server.js":{"content":"#!/usr/bin/env node\n// Simple server starter that bypasses vite config issues\nimport { execSync } from 'child_process';\n\ntry {\n  console.log('Starting temple donation management system...');\n  execSync('NODE_ENV=development tsx server/index-simple.ts', { \n    stdio: 'inherit', \n    cwd: process.cwd() \n  });\n} catch (error) {\n  console.error('Server failed to start:', error.message);\n  process.exit(1);\n}","size_bytes":406},"vite.config.simple.js":{"content":"const { defineConfig } = require(\"vite\");\nconst react = require(\"@vitejs/plugin-react\");\nconst path = require(\"path\");\n\nmodule.exports = defineConfig({\n  plugins: [\n    react(),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});","size_bytes":524},"server/index-simple.ts":{"content":"import express from \"express\";\nimport session from \"express-session\";\nimport compression from \"compression\";\nimport { createServer } from \"http\";\nimport { registerRoutes } from \"./routes\";\nimport path from \"path\";\n\nconst app = express();\n\n// Performance optimizations for fast loading\napp.use(compression()); // Enable gzip compression\napp.use(express.json({ limit: '1mb' })); // Optimize JSON parsing\n\n// Cache static assets for 24 hours for fast loading\napp.use((req, res, next) => {\n  if (req.url.match(/\\.(js|css|png|jpg|jpeg|gif|svg|ico|woff|woff2)$/)) {\n    res.setHeader('Cache-Control', 'public, max-age=86400');\n  }\n  // Enable fast response headers\n  res.setHeader('X-Powered-By', 'MERN-Stack-Express');\n  next();\n});\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration\napp.use((session as any)({\n  secret: process.env.SESSION_SECRET || 'temple-donation-secret-key-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: false, // Set to true in production with HTTPS\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\n// Simple logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const logPath = req.path;\n  \n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (logPath.startsWith(\"/api\")) {\n      const logLine = `${req.method} ${logPath} ${res.statusCode} in ${duration}ms`;\n      console.log(`${new Date().toLocaleTimeString()} [express] ${logLine}`);\n    }\n  });\n  \n  next();\n});\n\n(async () => {\n  // Register PostgreSQL routes\n  registerRoutes(app);\n  \n  const server = createServer(app);\n  \n  // Serve static files from dist/public if available, otherwise use current setup\n  const distPath = path.resolve(process.cwd(), \"dist/public\");\n  \n  try {\n    // Try to serve static files from build directory\n    app.use(express.static(distPath));\n    app.use(\"*\", (_req, res) => {\n      res.sendFile(path.resolve(distPath, \"index.html\"));\n    });\n    console.log(`${new Date().toLocaleTimeString()} [express] ✓ Serving static files from ${distPath}`);\n  } catch (error) {\n    // Fallback to development mode\n    console.log(`${new Date().toLocaleTimeString()} [express] ⚠ Static files not found, running in development mode`);\n    app.use(express.static('public'));\n    app.get(\"*\", (_req, res) => {\n      res.send(`\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <title>Temple Donation System</title>\n          </head>\n          <body>\n            <div id=\"root\">Loading...</div>\n            <script>\n              window.location.href = '/api/health';\n            </script>\n          </body>\n        </html>\n      `);\n    });\n  }\n  \n  const PORT = parseInt(process.env.PORT || '5000', 10);\n  server.listen(PORT, '0.0.0.0', () => {\n    console.log(`${new Date().toLocaleTimeString()} [express] ✓ PostgreSQL Database Connected - Data will be persistent`);\n    console.log(`${new Date().toLocaleTimeString()} [express] serving on localhost:${PORT}`);\n  });\n})();","size_bytes":3032},"server/index-working.ts":{"content":"import express from \"express\";\nimport session from \"express-session\";\nimport compression from \"compression\";\nimport { createServer } from \"http\";\nimport { registerRoutes } from \"./routes\";\nimport path from \"path\";\n\nconst app = express();\n\n// Performance optimizations for fast loading\napp.use(compression()); // Enable gzip compression\napp.use(express.json({ limit: '1mb' })); // Optimize JSON parsing\n\n// Cache static assets for 24 hours for fast loading\napp.use((req, res, next) => {\n  if (req.url.match(/\\.(js|css|png|jpg|jpeg|gif|svg|ico|woff|woff2)$/)) {\n    res.setHeader('Cache-Control', 'public, max-age=86400');\n  }\n  // Enable fast response headers\n  res.setHeader('X-Powered-By', 'MERN-Stack-Express');\n  next();\n});\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration with correct import\napp.use((session as any)({\n  secret: process.env.SESSION_SECRET || 'temple-donation-secret-key-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: false, // Set to true in production with HTTPS\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\n// Serve PWA static files\napp.use(express.static('public'));\n\n// Simple logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const logPath = req.path;\n  \n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (logPath.startsWith(\"/api\")) {\n      const logLine = `${req.method} ${logPath} ${res.statusCode} in ${duration}ms`;\n      console.log(`${new Date().toLocaleTimeString()} [express] ✓ ${logLine}`);\n    }\n  });\n  \n  next();\n});\n\n(async () => {\n  // Register routes\n  registerRoutes(app);\n  \n  // Serve built frontend files\n  const __dirname = path.resolve();\n  app.use(express.static(path.join(__dirname, 'dist')));\n  \n  // SPA fallback route\n  app.get('*', (req, res) => {\n    if (!req.path.startsWith('/api')) {\n      res.sendFile(path.join(__dirname, 'dist', 'index.html'));\n    } else {\n      res.status(404).json({ error: 'API endpoint not found' });\n    }\n  });\n\n  const PORT = parseInt(process.env.PORT || \"5000\", 10);\n  \n  const server = createServer(app);\n  \n  server.listen(PORT, \"0.0.0.0\", () => {\n    console.log(`${new Date().toLocaleTimeString()} [express] ✓ Server running on http://localhost:${PORT}`);\n    console.log(`${new Date().toLocaleTimeString()} [express] ✓ Serving static files from ${path.join(__dirname, 'dist')}`);\n    console.log(`${new Date().toLocaleTimeString()} [express] ✓ PostgreSQL database connected`);\n    console.log(`${new Date().toLocaleTimeString()} [express] ✓ Temple Donation Management System ready`);\n  });\n})().catch(console.error);","size_bytes":2674},"home/runner/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(\"/home/runner/workspace\", \"client\", \"src\"),\n      \"@shared\": path.resolve(\"/home/runner/workspace\", \"shared\"),\n      \"@assets\": path.resolve(\"/home/runner/workspace\", \"attached_assets\"),\n    },\n  },\n  root: path.resolve(\"/home/runner/workspace\", \"client\"),\n  build: {\n    outDir: path.resolve(\"/home/runner/workspace\", \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});","size_bytes":995},"server/types/vite-config.d.ts":{"content":"declare module '../../vite.config' {\n  import { UserConfig } from 'vite';\n  const config: UserConfig;\n  export default config;\n}","size_bytes":128},"BUILD_FIX_GUIDE.md":{"content":"# Build Command Fix Guide\n\n## 🚨 \"Build is Missing\" Error Solution\n\n`npm run build` command \"build is missing\" error வந்தா இந்த solutions try பண்ணவும்:\n\n## 🔧 Solution 1: Package.json Verification\n\n### Check if package.json exists:\n```bash\n# Project root directory ல் இருக்கா check பண்ணவும்\nls -la package.json\n\n# File should exist with build script\n```\n\n### Verify build script:\n```bash\n# package.json ல் scripts section check பண்ணவும்\n{\n  \"scripts\": {\n    \"dev\": \"NODE_ENV=development tsx server/index.ts\",\n    \"build\": \"vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\",\n    \"start\": \"NODE_ENV=production node dist/index.js\"\n  }\n}\n```\n\n## 🔧 Solution 2: Dependencies Installation\n\n### Complete Installation:\n```bash\n# Clear cache and reinstall\nrm -rf node_modules\nrm package-lock.json\nnpm cache clean --force\nnpm install\n\n# Verify installation\nnpm list --depth=0\n```\n\n## 🔧 Solution 3: Alternative Build Commands\n\n### If build script missing, use these:\n\n#### Option A: Frontend Only Build\n```bash\n# Build frontend assets\nnpx vite build\n```\n\n#### Option B: Backend Only Build  \n```bash\n# Build backend server\nnpx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\n```\n\n#### Option C: Complete Manual Build\n```bash\n# Build both frontend and backend\nnpx vite build && npx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\n```\n\n## 🔧 Solution 4: Development Without Build\n\n### Direct Development Mode:\n```bash\n# Skip build, run development server directly\nnpm run dev\n\n# This starts the application without building\n# Access: http://localhost:5000\n```\n\n## 🔧 Solution 5: Missing Dependencies\n\n### Install Build Dependencies:\n```bash\n# Essential build tools\nnpm install --save-dev vite esbuild typescript\n\n# Frontend dependencies\nnpm install --save-dev @vitejs/plugin-react\n\n# Verify installation\nnpm list vite esbuild typescript\n```\n\n## 🔧 Solution 6: Node.js Version Check\n\n### Version Compatibility:\n```bash\n# Check Node.js version\nnode --version\n\n# Should be 18+ for this project\n# If older version, update Node.js\n```\n\n## 🔧 Solution 7: Manual Package.json Fix\n\n### If scripts section missing, add this:\n```json\n{\n  \"name\": \"temple-donation-system\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"NODE_ENV=development tsx server/index.ts\",\n    \"build\": \"vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\",\n    \"start\": \"NODE_ENV=production node dist/index.js\",\n    \"db:push\": \"drizzle-kit push\"\n  }\n}\n```\n\n## 🎯 Quick Fix Commands\n\n### Try these in order:\n\n#### Step 1: Basic Fix\n```bash\ncd project-directory\nnpm install\nnpm run build\n```\n\n#### Step 2: Clean Install\n```bash\nrm -rf node_modules package-lock.json\nnpm install\nnpm run build\n```\n\n#### Step 3: Manual Build\n```bash\nnpx vite build\nnpx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\n```\n\n#### Step 4: Development Mode (Skip Build)\n```bash\nnpm run dev\n# Access http://localhost:5000\n```\n\n## 🔍 Troubleshooting\n\n### Common Errors & Solutions:\n\n#### Error: \"vite: command not found\"\n```bash\nSolution: npm install --save-dev vite\n```\n\n#### Error: \"esbuild: command not found\"  \n```bash\nSolution: npm install --save-dev esbuild\n```\n\n#### Error: \"tsx: command not found\"\n```bash\nSolution: npm install --save-dev tsx\n```\n\n#### Error: Permission denied\n```bash\n# Windows:\nnpm run build\n\n# Mac/Linux:\nsudo npm run build\n```\n\n## 🚀 Alternative Deployment Methods\n\n### If Build Still Fails:\n\n#### Option 1: Deploy Source Code\n```bash\n# Many platforms can build automatically\n# Upload source code without building locally\n# Platform handles build process\n```\n\n#### Option 2: Use Development Mode\n```bash\n# Run in development mode\nnpm run dev\n# Still fully functional\n```\n\n#### Option 3: Pre-built Assets\n```bash\n# If you have working Replit version:\n# Copy dist/ folder from Replit\n# Skip local build process\n```\n\n## 📊 Verification Steps\n\n### After Build Success:\n```bash\n✅ dist/ folder created\n✅ dist/public/ contains frontend files\n✅ dist/index.js contains backend code\n✅ No error messages in terminal\n✅ npm start works without errors\n```\n\n## 🎯 Recommended Approach\n\n### For Local Development:\n```bash\n1. npm install\n2. npm run dev (skip build for development)\n3. Access http://localhost:5000\n4. All features work without building\n```\n\n### For Production Deployment:\n```bash\n1. Platform handles build automatically\n2. No need for local build\n3. Upload source code to hosting platform\n4. Platform runs npm run build\n```\n\n## 💡 Pro Tips\n\n### Development Workflow:\n- Use `npm run dev` for local testing\n- Build only needed for production deployment\n- Most hosting platforms auto-build\n- Development mode has all features\n\n### If Nothing Works:\n- Contact for support with specific error messages\n- Share terminal output for diagnosis\n- Consider using development mode\n- Platform deployment auto-handles build\n\n**Development mode fully functional without build process!**","size_bytes":5232},"BUILD_SCRIPT_FIX.md":{"content":"# Build Script Missing Error - Complete Fix\n\n## 🚨 Error: Missing script: \"build\"\n\nThis error occurs when the downloaded package.json doesn't have the build script. Here's the complete fix:\n\n## 🔧 Solution 1: Fix package.json Scripts\n\nAdd this to your package.json file in the \"scripts\" section:\n\n```json\n{\n  \"name\": \"rest-express\",\n  \"version\": \"1.0.0\", \n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"NODE_ENV=development tsx server/index.ts\",\n    \"build\": \"vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\",\n    \"start\": \"NODE_ENV=production node dist/index.js\",\n    \"check\": \"tsc\",\n    \"db:push\": \"drizzle-kit push\"\n  }\n}\n```\n\n## 🔧 Solution 2: Quick Fix Commands\n\n### If package.json is corrupted or incomplete:\n\n```bash\n# Navigate to project directory\ncd your-project-folder\n\n# Create/fix package.json scripts section\nnpm pkg set scripts.dev=\"NODE_ENV=development tsx server/index.ts\"\nnpm pkg set scripts.build=\"vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\"\nnpm pkg set scripts.start=\"NODE_ENV=production node dist/index.js\"\nnpm pkg set scripts.check=\"tsc\"\nnpm pkg set scripts.db:push=\"drizzle-kit push\"\n\n# Verify scripts added\nnpm run\n```\n\n## 🔧 Solution 3: Manual Build Without Script\n\n### Run build commands directly:\n\n```bash\n# Install required build tools\nnpm install --save-dev vite esbuild tsx typescript\n\n# Build frontend\nnpx vite build\n\n# Build backend  \nnpx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\n\n# Verify build\nls -la dist/\n```\n\n## 🔧 Solution 4: Skip Build - Use Development Mode\n\n### Best approach for local testing:\n\n```bash\n# Install dependencies\nnpm install\n\n# Run development mode (no build needed)\nnpm run dev\n\n# Access application\n# Open: http://localhost:5000\n```\n\n## 🔧 Solution 5: Complete package.json Template\n\n### If package.json is completely missing or broken:\n\nCreate new package.json file:\n\n```json\n{\n  \"name\": \"temple-donation-system\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"dev\": \"NODE_ENV=development tsx server/index.ts\",\n    \"build\": \"vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\",\n    \"start\": \"NODE_ENV=production node dist/index.js\",\n    \"check\": \"tsc\",\n    \"db:push\": \"drizzle-kit push\"\n  },\n  \"dependencies\": {\n    \"@hookform/resolvers\": \"^3.10.0\",\n    \"@neondatabase/serverless\": \"^0.10.4\",\n    \"@radix-ui/react-accordion\": \"^1.2.4\",\n    \"@radix-ui/react-alert-dialog\": \"^1.1.7\",\n    \"@radix-ui/react-avatar\": \"^1.1.4\",\n    \"@radix-ui/react-checkbox\": \"^1.1.5\",\n    \"@radix-ui/react-dialog\": \"^1.1.7\",\n    \"@radix-ui/react-dropdown-menu\": \"^2.1.7\",\n    \"@radix-ui/react-label\": \"^2.1.3\",\n    \"@radix-ui/react-popover\": \"^1.1.7\",\n    \"@radix-ui/react-select\": \"^2.1.7\",\n    \"@radix-ui/react-separator\": \"^1.1.3\",\n    \"@radix-ui/react-slot\": \"^1.2.0\",\n    \"@radix-ui/react-switch\": \"^1.1.4\",\n    \"@radix-ui/react-tabs\": \"^1.1.4\",\n    \"@radix-ui/react-toast\": \"^1.2.7\",\n    \"@radix-ui/react-tooltip\": \"^1.2.0\",\n    \"@tanstack/react-query\": \"^5.60.5\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"compression\": \"^1.8.1\",\n    \"csv-parser\": \"^3.2.0\",\n    \"date-fns\": \"^3.6.0\",\n    \"drizzle-orm\": \"^0.39.3\",\n    \"drizzle-zod\": \"^0.7.0\",\n    \"express\": \"^4.21.2\",\n    \"express-session\": \"^1.18.1\",\n    \"framer-motion\": \"^11.13.1\",\n    \"lucide-react\": \"^0.453.0\",\n    \"multer\": \"^2.0.1\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-hook-form\": \"^7.55.0\",\n    \"recharts\": \"^2.15.2\",\n    \"tailwind-merge\": \"^2.6.0\",\n    \"wouter\": \"^3.3.5\",\n    \"xlsx\": \"^0.18.5\",\n    \"zod\": \"^3.24.2\"\n  },\n  \"devDependencies\": {\n    \"@types/express\": \"4.17.21\",\n    \"@types/node\": \"20.16.11\",\n    \"@types/react\": \"^18.3.11\",\n    \"@types/react-dom\": \"^18.3.1\",\n    \"@vitejs/plugin-react\": \"^4.3.2\",\n    \"drizzle-kit\": \"^0.30.4\",\n    \"esbuild\": \"^0.25.0\",\n    \"tailwindcss\": \"^3.4.17\",\n    \"tsx\": \"^4.19.1\",\n    \"typescript\": \"5.6.3\",\n    \"vite\": \"^5.4.14\"\n  }\n}\n```\n\n## 🎯 Recommended Steps:\n\n### Step 1: Quick Check\n```bash\n# Check if package.json exists and has scripts\ncat package.json | grep -A 10 '\"scripts\"'\n```\n\n### Step 2: Add Missing Build Script\n```bash\n# Add build script to existing package.json\nnpm pkg set scripts.build=\"vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\"\n```\n\n### Step 3: Install Dependencies\n```bash\nnpm install\n```\n\n### Step 4: Test Build\n```bash\nnpm run build\n```\n\n### Step 5: Alternative (Development Mode)\n```bash\n# If build still fails, use development mode\nnpm run dev\n# Access: http://localhost:5000\n```\n\n## 🔍 Verification Commands:\n\n```bash\n# Check all available scripts\nnpm run\n\n# Should show:\n# dev, build, start, check, db:push\n\n# Test each command\nnpm run dev    # Development server\nnpm run build  # Build production files\nnpm run start  # Start production server\n```\n\n## 💡 Important Notes:\n\n1. **Development Mode Works Without Build**: `npm run dev` is fully functional\n2. **Build Only Needed for Production**: Local testing doesn't require build\n3. **Platform Auto-Build**: Most hosting platforms run build automatically\n4. **Manual Build Commands**: Can build without npm script if needed\n\n## 🚨 If Nothing Works:\n\n### Use development mode for local testing:\n```bash\nnpm install\nnpm run dev\n# Fully functional at http://localhost:5000\n```\n\n### Deploy source code directly:\n- Upload to Railway/Vercel without building\n- Platform handles build process automatically\n- No need for local build\n\n**Development mode is the best solution for local testing!**","size_bytes":5733},"COMPLETE_WINDOWS_SETUP.md":{"content":"# Complete Windows Setup Guide\n\n## 🎯 Step-by-Step Windows Local Setup\n\nThe db:push script exists but dependencies need to be properly installed.\n\n## 📝 Step 1: Create .env File First\n\n```cmd\ncd C:\\Users\\harin\\OneDrive\\Desktop\\sivanDonation\\TempleDonation\nnotepad .env\n```\n\n**Add this content to .env file:**\n```\nDATABASE_URL=postgresql://neondb_owner:npg_TPc37yNrkbZF@ep-fragrant-forest-adfudasj-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require\nSESSION_SECRET=temple-donation-secret-key-12345678901234567890abcdefghijk\nNODE_ENV=development\nPORT=5000\n```\n\nSave as `.env` (select \"All Files\" in Notepad)\n\n## 🔧 Step 2: Clean Install Dependencies\n\n```cmd\n# Remove existing installations\nrmdir /s /q node_modules\ndel package-lock.json\n\n# Clear npm cache\nnpm cache clean --force\n\n# Fresh installation\nnpm install\n```\n\n## 🗄️ Step 3: Setup Database Schema\n\n```cmd\n# This should work now after npm install\nnpm run db:push\n```\n\n**Expected output:**\n```\nEverything is in sync ✓\n```\n\n## 🚀 Step 4: Start Application\n\n```cmd\nnpm run dev\n```\n\n**Expected output:**\n```\nserving on localhost:5000\n```\n\n## 🌐 Step 5: Access Application\n\nOpen browser: **http://localhost:5000**\n\n## 🔍 Troubleshooting Commands\n\n### Check if dependencies installed:\n```cmd\nnpm list drizzle-kit\nnpm list tsx\n```\n\n### Check if .env file is correct:\n```cmd\ntype .env\n```\n\n### Verify project structure:\n```cmd\ndir /b\n```\n\nShould show: client, server, shared, package.json, .env\n\n## ⚡ Quick Commands (Copy-Paste All):\n\n```cmd\ncd C:\\Users\\harin\\OneDrive\\Desktop\\sivanDonation\\TempleDonation\nrmdir /s /q node_modules\ndel package-lock.json\nnpm cache clean --force\nnpm install\nnpm run db:push\nnpm run dev\n```\n\n## ✅ Success Indicators:\n\n1. **npm install** completes without errors\n2. **npm run db:push** shows \"Everything is in sync\"\n3. **npm run dev** shows \"serving on localhost:5000\"\n4. **http://localhost:5000** loads the temple donation system\n5. Login page displays in English/Tamil\n\n## 🚨 Common Issues:\n\n### Issue 1: Still \"Missing script db:push\"\n```cmd\n# Check if package.json exists\ntype package.json | findstr \"db:push\"\n\n# Should show: \"db:push\": \"drizzle-kit push\"\n```\n\n### Issue 2: drizzle-kit not found\n```cmd\n# Install drizzle-kit specifically\nnpm install --save-dev drizzle-kit\nnpm run db:push\n```\n\n### Issue 3: Node.js version\n```cmd\n# Check version (should be 18+)\nnode --version\n\n# Update if needed from: https://nodejs.org/\n```\n\n### Issue 4: .env file issues\n```cmd\n# Check file exists\ndir .env\n\n# Check content\ntype .env\n\n# Should show DATABASE_URL starting with postgresql://\n```\n\n## 🔧 Alternative: Skip Database Setup\n\nIf db:push keeps failing, you can still run the app:\n\n```cmd\n# Start app without db:push\nnpm run dev\n\n# The app will create tables automatically on first run\n```\n\n## 📞 Need Help?\n\nIf any step fails, share the exact error message and which step it failed on.\n\nThe most common issue is .env file not created properly or dependencies not installed completely.","size_bytes":2994},"CREATE_ENV_FILE.md":{"content":"# Create .env File for Windows\n\n## 🚨 DATABASE_URL Error - .env File Missing or Incorrect\n\nThe application can't find the DATABASE_URL. The .env file either doesn't exist or isn't formatted correctly.\n\n## 📝 Step-by-Step .env File Creation\n\n### Method 1: Command Prompt (Recommended)\n```cmd\ncd C:\\Users\\harin\\OneDrive\\Desktop\\sivanDonation\\TempleDonation\n\n# Create .env file with content\necho DATABASE_URL=postgresql://neondb_owner:npg_TPc37yNrkbZF@ep-fragrant-forest-adfudasj-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require > .env\necho SESSION_SECRET=temple-donation-secret-key-12345678901234567890abcdefghijk >> .env\necho NODE_ENV=development >> .env\necho PORT=5000 >> .env\n\n# Verify file created\ntype .env\n```\n\n### Method 2: Notepad (Manual)\n```cmd\ncd C:\\Users\\harin\\OneDrive\\Desktop\\sivanDonation\\TempleDonation\nnotepad .env\n```\n\n**Copy-paste this EXACT content:**\n```\nDATABASE_URL=postgresql://neondb_owner:npg_TPc37yNrkbZF@ep-fragrant-forest-adfudasj-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require\nSESSION_SECRET=temple-donation-secret-key-12345678901234567890abcdefghijk\nNODE_ENV=development\nPORT=5000\n```\n\n**Important:** Save as `.env` (not .env.txt) - select \"All Files\" in save dialog.\n\n### Method 3: PowerShell\n```powershell\ncd C:\\Users\\harin\\OneDrive\\Desktop\\sivanDonation\\TempleDonation\n\n# Create .env file\n@\"\nDATABASE_URL=postgresql://neondb_owner:npg_TPc37yNrkbZF@ep-fragrant-forest-adfudasj-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require\nSESSION_SECRET=temple-donation-secret-key-12345678901234567890abcdefghijk\nNODE_ENV=development\nPORT=5000\n\"@ | Out-File -FilePath .env -Encoding utf8\n\n# Verify file\nGet-Content .env\n```\n\n## 🔍 Verify .env File Created Correctly\n\n```cmd\n# Check if file exists\ndir .env\n\n# Check file content\ntype .env\n\n# Should show:\n# DATABASE_URL=postgresql://neondb_owner:npg_TPc37yNrkbZF@...\n# SESSION_SECRET=temple-donation-secret-key-...\n# NODE_ENV=development\n# PORT=5000\n```\n\n## 🚀 After Creating .env File\n\n```cmd\n# Start the application\nnpx tsx server/index.ts\n\n# Or use npm script\nnpm run dev\n```\n\n## ✅ Expected Success Output\n\n```\nPostgreSQL Database Connected - Data will be persistent\nServing static files from dist/public\nserving on localhost:5000\n```\n\n## 🚨 Common Issues\n\n### Issue 1: File created as .env.txt\n- In Notepad: File Type → \"All Files\"\n- File name: `.env` (with the dot at beginning)\n\n### Issue 2: Hidden file extensions\n```cmd\n# Show file extensions in Windows\ndir /a\n\n# Should show .env (not .env.txt)\n```\n\n### Issue 3: Wrong file location\n```cmd\n# Make sure you're in correct directory\ncd C:\\Users\\harin\\OneDrive\\Desktop\\sivanDonation\\TempleDonation\npwd\n```\n\n### Issue 4: Special characters in path\n- Move project to simpler path like C:\\temple-donation\n- Avoid spaces and special characters in folder names\n\n## 🎯 Complete Setup Commands\n\n```cmd\n# Navigate to project\ncd C:\\Users\\harin\\OneDrive\\Desktop\\sivanDonation\\TempleDonation\n\n# Create .env file\necho DATABASE_URL=postgresql://neondb_owner:npg_TPc37yNrkbZF@ep-fragrant-forest-adfudasj-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require > .env\necho SESSION_SECRET=temple-donation-secret-key-12345678901234567890abcdefghijk >> .env\necho NODE_ENV=development >> .env\necho PORT=5000 >> .env\n\n# Verify content\ntype .env\n\n# Install dependencies\nnpm install\n\n# Start application\nnpx tsx server/index.ts\n```\n\n## 📱 Test Application\n\n1. Application starts without DATABASE_URL error\n2. Open browser: http://localhost:5000\n3. Temple donation system loads\n4. Login page displays in English/Tamil","size_bytes":3565},"DATABASE_SETUP_GUIDE.md":{"content":"# Database Setup Guide - Temple Donation System\n\n## 📊 Database Requirements\n\nஇந்த Temple Donation System க்கு **PostgreSQL database** தேவை. Code download பண்ணின பிறகு database setup பண்ண வேண்டும்.\n\n## 🎯 Database Setup Options:\n\n### **Option 1: Railway.app (Easiest)**\n```bash\n✅ Database Included - Extra setup தேவையில்லை\n✅ Automatic Connection - Environment variables auto-set\n✅ Free Tier - Monthly $5 credit\n✅ Backup Included - Automatic backups\n\nProcess:\n1. Railway.app ல் project deploy பண்ணவும்\n2. \"Add PostgreSQL\" service click பண்ணவும்\n3. DATABASE_URL automatically set ஆகும்\n4. Tables automatically create ஆகும்\n```\n\n### **Option 2: Neon Database (Free)**\n```bash\n✅ Free Forever Plan - 0.5GB storage\n✅ Serverless PostgreSQL \n✅ Easy Setup\n✅ Good Performance\n\nSteps:\n1. https://neon.tech ல் account create பண்ணவும்\n2. New project create பண்ணவும்\n3. Connection string copy பண்ணவும்\n4. .env file ல் add பண்ணவும்\n\nConnection String Format:\nDATABASE_URL=postgresql://username:password@ep-xyz.us-east-1.aws.neon.tech/neondb?sslmode=require\n```\n\n### **Option 3: Supabase (Free)**\n```bash\n✅ Free Tier - 500MB storage\n✅ PostgreSQL + Dashboard\n✅ Real-time features\n✅ Easy Management\n\nSteps:\n1. https://supabase.com ல் account create பண்ணவும்\n2. New project create பண்ணவும்\n3. Settings > Database ல் connection string எடுங்க\n4. .env file ல் add பண்ணவும்\n\nConnection String Format:\nDATABASE_URL=postgresql://postgres.xyz:password@aws-0-region.pooler.supabase.com:5432/postgres\n```\n\n### **Option 4: Render Database**\n```bash\n✅ Free PostgreSQL service\n✅ Good for small projects\n✅ Easy integration\n\nSteps:\n1. https://render.com ல் account create பண்ணவும்\n2. New PostgreSQL service create பண்ணவும்\n3. Connection details copy பண்ணவும்\n4. Web service ல் connect பண்ணவும்\n```\n\n## 📋 Database Tables\n\nஇந்த application ல் **2 main tables** இருக்கு:\n\n### **1. Donations Table**\n```sql\n- id (Primary Key)\n- receiptNo (Unique Receipt Number)\n- name (Donor Name)\n- phone (10-digit Phone Number)\n- community (Kulam/Community)\n- location (Location)\n- address (Address - Optional)\n- amount (Donation Amount)\n- paymentMode (cash/card/upi/bankTransfer/cheque)\n- inscription (Boolean - Inscription Required)\n- donationDate (Donation Date)\n- createdAt (Timestamp)\n```\n\n### **2. Receipt Sequences Table**\n```sql\n- id (Primary Key)\n- year (Year)\n- lastReceiptNumber (Last Receipt Number for Year)\n- updatedAt (Timestamp)\n```\n\n## 🔧 Code Download பின்பு Database Setup:\n\n### **Step 1: Environment Variables**\n```bash\n# .env file create பண்ணவும்\ncp .env.example .env\n\n# Edit .env file:\nDATABASE_URL=your-database-connection-string\nSESSION_SECRET=your-32-character-secret-key\nNODE_ENV=production\n```\n\n### **Step 2: Database Connection Test**\n```bash\n# Dependencies install பண்ணவும்\nnpm install\n\n# Database connection test பண்ணவும்\nnpm run db:push\n```\n\n### **Step 3: Tables Creation**\n```bash\n# Application first run ல் tables automatically create ஆகும்\n# Or manually run:\nnpm run db:push\n\n# Success message:\n✓ PostgreSQL Database Connected - Data will be persistent\n```\n\n## 🚀 Deployment Platform Specific:\n\n### **Railway.app**\n```bash\nDATABASE_URL: Automatically set when PostgreSQL service added\nSESSION_SECRET: Manual ஆ add பண்ண வேண்டும்\nTables: Auto-create on first API call\n```\n\n### **Vercel + External Database**\n```bash\nDATABASE_URL: Neon/Supabase connection string\nSESSION_SECRET: Add in environment variables\nTables: Run npm run db:push after deployment\n```\n\n### **Render.com**\n```bash\nDATABASE_URL: Render PostgreSQL connection string\nSESSION_SECRET: Add in environment variables\nTables: Auto-create during build process\n```\n\n## 🔍 Database Verification:\n\n### **After Setup Check:**\n```bash\n1. Application successfully starts\n2. Login page loads\n3. Donation form works\n4. Dashboard displays data\n5. No database connection errors in logs\n```\n\n### **Common Connection Strings:**\n```bash\n# Local PostgreSQL\nDATABASE_URL=postgresql://username:password@localhost:5432/temple_donations\n\n# Neon (Cloud)\nDATABASE_URL=postgresql://username:password@ep-xyz.us-east-1.aws.neon.tech/neondb?sslmode=require\n\n# Supabase (Cloud)\nDATABASE_URL=postgresql://postgres.xyz:password@aws-0-region.pooler.supabase.com:5432/postgres\n\n# Railway (Auto-generated)\nDATABASE_URL=postgresql://postgres:password@roundhouse.proxy.rlwy.net:12345/railway\n```\n\n## 📊 Data Migration (Optional):\n\n### **Existing Data Import:**\n```bash\n1. Current database ல் CSV export பண்ணவும்\n2. New database setup பண்ணவும்\n3. Application ل் CSV import feature use பண்ணவும்\n4. Data verify பண்ணவும்\n```\n\n## 💰 Cost Comparison:\n\n| Platform | Storage | Price | Features |\n|----------|---------|-------|----------|\n| Railway | 1GB | Free $5/month | Database + Hosting |\n| Neon | 0.5GB | Free Forever | Serverless PostgreSQL |\n| Supabase | 500MB | Free Tier | PostgreSQL + Dashboard |\n| Render | 1GB | Free Tier | PostgreSQL Service |\n\n## 🎯 Recommended Approach:\n\n### **For Beginners:**\n**Railway.app** - Database + hosting included, single setup\n\n### **For Free Usage:**\n**Vercel + Neon** - Completely free, good performance\n\n### **For Advanced Users:**\n**Render + Dedicated Database** - More control, scaling options\n\n## 🚨 Important Notes:\n\n1. **Connection String Security:** Never commit DATABASE_URL to git\n2. **SSL Required:** Most cloud databases require SSL connections\n3. **Connection Limits:** Free tiers have connection limits\n4. **Backup Strategy:** Regular backups recommended for production\n5. **Data Persistence:** All data stored permanently in PostgreSQL\n\n## 📞 Troubleshooting:\n\n### **Connection Errors:**\n```bash\nError: DATABASE_URL must be set\nSolution: Check environment variables\n\nError: Connection timeout\nSolution: Verify database server running\n\nError: Authentication failed\nSolution: Check username/password in connection string\n```\n\n### **Table Creation Issues:**\n```bash\nError: relation \"donations\" does not exist\nSolution: Run npm run db:push to create tables\n\nError: permission denied\nSolution: Check database user permissions\n```\n\n**Database setup simple ஆ இருக்கு! Platform choose பண்ணி connection string add பண்ணினால் போதும்.**","size_bytes":6754},"DEPLOYMENT_GUIDE.md":{"content":"# Temple Donation Management System - Deployment Guide\n\n## இந்த Application ஐ வேறு Platform ல் Host பண்ணுவது\n\n### 1. Code Download பண்ணுவது\n\n#### Replit இல் இருந்து:\n1. Replit dashboard ல் போங்க\n2. \"Export as ZIP\" option click பண்ணவும்\n3. ZIP file download ஆகும்\n\n#### GitHub Repository ஆக:\n```bash\ngit clone [your-repository-url]\ncd temple-donation-system\n```\n\n### 2. Local Setup (Testing கற்காக)\n\n```bash\n# Dependencies install பண்ணவும்\nnpm install\n\n# Environment file create பண்ணவும்\ncp .env.example .env\n\n# Database setup பண்ணவும்\nnpm run db:push\n\n# Development server start பண்ணவும்\nnpm run dev\n```\n\n### 3. Environment Variables Setup\n\n`.env` file create பண்ணி இதை add பண்ணவும்:\n\n```env\n# Database Connection (Required)\nDATABASE_URL=postgresql://username:password@host:port/database_name\n\n# Session Secret (Required)\nSESSION_SECRET=your-super-secret-session-key-minimum-32-characters-long\n\n# Node Environment\nNODE_ENV=production\n\n# Port (Optional - Platform assigns automatically)\nPORT=5000\n```\n\n### 4. Database Options\n\n#### A. Neon Database (Recommended - Free Tier Available)\n1. https://neon.tech ல் போய் account create பண்ணவும்\n2. New project create பண்ணவும்\n3. Connection string copy பண்ணவும்\n```\nDATABASE_URL=postgresql://username:password@ep-xyz.us-east-1.aws.neon.tech/neondb?sslmode=require\n```\n\n#### B. Supabase (Free PostgreSQL)\n1. https://supabase.com ல் account create பண்ணவும்\n2. New project create பண்ணவும்\n3. Settings > Database ல் connection string எடுங்க\n```\nDATABASE_URL=postgresql://postgres.xyz:password@aws-0-region.pooler.supabase.com:5432/postgres\n```\n\n#### C. Railway (Database + Hosting Together)\n1. https://railway.app ல் account create பண்ணவும்\n2. PostgreSQL service add பண்ணவும்\n3. Variables tab ல் DATABASE_URL கிடைக்கும்\n\n### 5. Popular Hosting Platforms\n\n#### A. Vercel (Recommended for Beginners)\n\n**Steps:**\n1. GitHub repository ல் code push பண்ணவும்\n2. https://vercel.com ல் போய் account create பண்ணவும்\n3. \"Import Git Repository\" click பண்ணவும்\n4. Environment Variables add பண்ணவும்:\n   - `DATABASE_URL`\n   - `SESSION_SECRET`\n   - `NODE_ENV=production`\n5. Deploy button click பண்ணவும்\n\n**Build Settings:**\n- Build Command: `npm run build`\n- Output Directory: `dist/public`\n- Install Command: `npm install`\n\n#### B. Railway (Database + Hosting)\n\n**Steps:**\n1. https://railway.app ல் account create பண்ணவும்\n2. \"New Project\" > \"Deploy from GitHub repo\"\n3. Repository select பண்ணவும்\n4. PostgreSQL service add பண்ணவும்\n5. Environment variables automatically set ஆகும்\n6. Deploy ஆகும்\n\n**Advantages:**\n- Database included\n- Very simple setup\n- Good free tier\n\n#### C. Render (Simple Deployment)\n\n**Steps:**\n1. https://render.com ல் account create பண்ணவும்\n2. \"New Web Service\" create பண்ணவும்\n3. GitHub repository connect பண்ணவும்\n4. Build Command: `npm run build`\n5. Start Command: `npm run start`\n6. Environment variables add பண்ணவும்\n\n#### D. DigitalOcean App Platform\n\n**Steps:**\n1. DigitalOcean account create பண்ணவும்\n2. \"Apps\" section ல் போங்க\n3. GitHub repository import பண்ணவும்\n4. Database component add பண்ணவும்\n5. Environment variables configure பண்ணவும்\n\n### 6. Build Commands\n\n```bash\n# Development\nnpm run dev\n\n# Production build\nnpm run build\n\n# Start production server\nnpm start\n\n# Database migration\nnpm run db:push\n```\n\n### 7. Database Tables\n\nApplication start ஆகும்போது இந்த tables automatically create ஆகும்:\n\n- `donations` - All donation records\n- `receiptSequences` - Receipt number tracking\n\n### 8. Post-Deployment Steps\n\n1. **Database Migration:**\n   ```bash\n   npm run db:push\n   ```\n\n2. **Test the Application:**\n   - Login page working ஆகுதா check பண்ணவும்\n   - Donation form submit ஆகுதா test பண்ணவும்\n   - Dashboard loading ஆகுதா verify பண்ணவும்\n\n3. **Admin Setup:**\n   - Default admin credentials: `admin / admin123`\n   - First login பண்ணின பிறகு password change பண்ணவும்\n\n### 9. Domain Setup (Optional)\n\nMost platforms free subdomain கொடுக்கும்:\n- Vercel: `your-app.vercel.app`\n- Railway: `your-app.railway.app`\n- Render: `your-app.onrender.com`\n\nCustom domain add பண்ண platforms ல் settings ல் option இருக்கும்.\n\n### 10. Troubleshooting\n\n#### Common Issues:\n\n**Database Connection Error:**\n- DATABASE_URL correct ஆ இருக்கா check பண்ணவும்\n- Database accessible ஆ இருக்கா test பண்ணவும்\n\n**Build Failures:**\n- Node.js version compatibility check பண்ணவும் (18+ required)\n- Dependencies properly installed ஆ இருக்கா verify பண்ணவும்\n\n**Environment Variables:**\n- All required variables set ஆகி இருக்கா confirm பண்ணவும்\n- Values properly escaped ஆ இருக்கா check பண்ணவும்\n\n### 11. Recommended Platform For You\n\n**Beginners:** Railway - Database included, simple setup\n**Advanced:** Vercel + Neon Database - Best performance\n**Enterprise:** DigitalOcean/AWS - Full control\n\nஎந்த platform select பண்ணினாலும் இந்த guide follow பண்ணா successfully deploy பண்ணலாம்!\n\n### Support\n\nIssues இருந்தா:\n1. Platform specific documentation check பண்ணவும்\n2. Database connection test பண்ணவும்\n3. Build logs check பண்ணவும்\n4. Environment variables verify பண்ணவும்","size_bytes":6249},"FINAL_WINDOWS_SOLUTION.md":{"content":"# Final Windows Solution - Temple Donation System\n\n## 🚨 tsx Command Not Found\n\nThe tsx package needs to be run with npx. Here's the corrected approach:\n\n## 🔧 Working Solutions for Windows\n\n### Solution 1: dotenv-cli with npx\n```cmd\ndotenv -e .env npx tsx server/index.ts\n```\n\n### Solution 2: PowerShell environment variables (Simplest)\n```powershell\n$env:DATABASE_URL=\"postgresql://neondb_owner:npg_TPc37yNrkbZF@ep-fragrant-forest-adfudasj-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require\"\n$env:SESSION_SECRET=\"temple-donation-secret-key-12345678901234567890abcdefghijk\"\n$env:NODE_ENV=\"development\"\n$env:PORT=\"5000\"\nnpx tsx server/index.ts\n```\n\n### Solution 3: Command Prompt with set commands\n```cmd\nset \"DATABASE_URL=postgresql://neondb_owner:npg_TPc37yNrkbZF@ep-fragrant-forest-adfudasj-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require\"\nset \"SESSION_SECRET=temple-donation-secret-key-12345678901234567890abcdefghijk\"\nset \"NODE_ENV=development\"\nset \"PORT=5000\"\nnpx tsx server/index.ts\n```\n\n### Solution 4: All-in-one PowerShell command\n```powershell\n$env:DATABASE_URL=\"postgresql://neondb_owner:npg_TPc37yNrkbZF@ep-fragrant-forest-adfudasj-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require\"; $env:SESSION_SECRET=\"temple-donation-secret-key-12345678901234567890abcdefghijk\"; $env:NODE_ENV=\"development\"; $env:PORT=\"5000\"; npx tsx server/index.ts\n```\n\n## ⚡ Recommended Quick Fix\n\n**Use PowerShell** (copy-paste this entire block):\n```powershell\n$env:DATABASE_URL=\"postgresql://neondb_owner:npg_TPc37yNrkbZF@ep-fragrant-forest-adfudasj-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require\"\n$env:SESSION_SECRET=\"temple-donation-secret-key-12345678901234567890abcdefghijk\"\n$env:NODE_ENV=\"development\"\n$env:PORT=\"5000\"\nnpx tsx server/index.ts\n```\n\n## ✅ Expected Success Output\n```\nPostgreSQL Database Connected - Data will be persistent\nServing static files from dist/public\nserving on localhost:5000\n```\n\n## 🌐 Access Application\nOpen browser: **http://localhost:5000**\n\n## 🔑 Login Credentials\n- Username: admin\n- Password: admin123\n\n## 📱 Features Available\n- Bilingual interface (English/Tamil)\n- Dashboard analytics\n- Donation form with receipts\n- Donor lookup\n- Data import (CSV/Excel)\n- Admin settings\n\nYour temple donation management system will be fully functional once started with any of these methods.","size_bytes":2356},"FIX_PACKAGE_JSON.md":{"content":"# Fix Missing Scripts in package.json\n\n## 🚨 Missing \"start\" Script Error\n\nThe downloaded package.json is missing essential scripts. Here's how to fix it:\n\n## 🔧 Solution 1: Add Missing Scripts\n\n### Using npm commands (Windows):\n```cmd\nnpm pkg set scripts.dev=\"NODE_ENV=development tsx server/index.ts\"\nnpm pkg set scripts.start=\"NODE_ENV=production node dist/index.js\"\nnpm pkg set scripts.build=\"vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\"\nnpm pkg set scripts.check=\"tsc\"\nnpm pkg set scripts.db:push=\"drizzle-kit push\"\n```\n\n### Verify scripts added:\n```cmd\nnpm run\n```\n\n## 🔧 Solution 2: Manual package.json Edit\n\n### Open package.json in Notepad and add scripts section:\n\n```json\n{\n  \"name\": \"temple-donation-system\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"NODE_ENV=development tsx server/index.ts\",\n    \"start\": \"NODE_ENV=production node dist/index.js\", \n    \"build\": \"vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\",\n    \"check\": \"tsc\",\n    \"db:push\": \"drizzle-kit push\"\n  }\n}\n```\n\n## 🔧 Solution 3: Use Development Mode Instead\n\n### Skip start script, use development mode:\n```cmd\nnpm run dev\n```\n\nThis starts the application in development mode - fully functional for local testing.\n\n## 🎯 Recommended Commands for Windows:\n\n### Step 1: Fix Scripts\n```cmd\nnpm pkg set scripts.dev=\"NODE_ENV=development tsx server/index.ts\"\nnpm pkg set scripts.start=\"NODE_ENV=production node dist/index.js\"\nnpm pkg set scripts.build=\"vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\"\n```\n\n### Step 2: Install Dependencies\n```cmd\nnpm install\n```\n\n### Step 3: Start Application\n```cmd\nnpm run dev\n```\n\n### Step 4: Access Application\nOpen browser: http://localhost:5000\n\n## ✅ Success Indicators:\n- npm run shows all scripts\n- npm run dev starts without errors\n- Application loads at localhost:5000\n- Login page displays correctly","size_bytes":2048},"LOCAL_ERROR_TROUBLESHOOTING.md":{"content":"# Local Setup Error Troubleshooting Guide\n\n## 🚨 Common Local Development Errors & Solutions\n\n## Error 1: Missing Dependencies\n\n### Symptoms:\n```\nError: Cannot find module 'express'\nError: Cannot find module 'react'\nModule not found errors\n```\n\n### Solution:\n```bash\n# Complete clean install\nrm -rf node_modules\nrm package-lock.json\nnpm cache clear --force\nnpm install\n\n# If still failing, install individually:\nnpm install express react react-dom\nnpm install --save-dev vite typescript tsx\n```\n\n## Error 2: Node.js Version Issues\n\n### Symptoms:\n```\nError: Unsupported engine\nNode version compatibility issues\n```\n\n### Solution:\n```bash\n# Check Node.js version\nnode --version\n\n# Should be 18.0.0 or higher\n# Download latest from: https://nodejs.org/\n# Or use nvm:\nnvm install 18\nnvm use 18\n```\n\n## Error 3: Environment Variables Missing\n\n### Symptoms:\n```\nError: DATABASE_URL must be set\nEnvironment variable undefined\n```\n\n### Solution:\n```bash\n# Create .env file in project root\ntouch .env\n\n# Add these variables:\nDATABASE_URL=postgresql://your-neon-connection-string\nSESSION_SECRET=your-32-character-secret-key\nNODE_ENV=development\nPORT=5000\n```\n\n## Error 4: Database Connection Failed\n\n### Symptoms:\n```\nError: Connection timeout\nError: Authentication failed\nDatabase connection refused\n```\n\n### Solution:\n```bash\n# Verify Neon database connection string\n# Format should be:\nDATABASE_URL=postgresql://username:password@ep-xyz.us-east-1.aws.neon.tech/neondb?sslmode=require\n\n# Test connection:\nnpm run db:push\n```\n\n## Error 5: Port Already in Use\n\n### Symptoms:\n```\nError: EADDRINUSE :::5000\nPort 5000 already in use\n```\n\n### Solution:\n```bash\n# Find and kill process using port 5000\n# Windows:\nnetstat -ano | findstr :5000\ntaskkill /PID <PID> /F\n\n# Mac/Linux:\nlsof -ti:5000 | xargs kill -9\n\n# Or change port in .env:\nPORT=3000\n```\n\n## Error 6: TypeScript Compilation Errors\n\n### Symptoms:\n```\nTSError: Cannot find module\nType checking errors\n```\n\n### Solution:\n```bash\n# Install TypeScript properly\nnpm install --save-dev typescript @types/node @types/react @types/react-dom\n\n# Skip type checking for development:\nnpm run dev --skipTypeCheck\n```\n\n## Error 7: Vite Build Errors\n\n### Symptoms:\n```\nVite build failed\nModule resolution errors\n```\n\n### Solution:\n```bash\n# Install Vite and plugins\nnpm install --save-dev vite @vitejs/plugin-react\n\n# Clear Vite cache\nrm -rf node_modules/.vite\nnpm run dev\n```\n\n## Error 8: Permission Errors\n\n### Symptoms:\n```\nEACCES: permission denied\nCannot write to directory\n```\n\n### Solution:\n```bash\n# Fix npm permissions (Mac/Linux):\nsudo chown -R $(whoami) ~/.npm\nsudo chown -R $(whoami) /usr/local/lib/node_modules\n\n# Windows: Run terminal as Administrator\n```\n\n## Error 9: SSL/Certificate Errors\n\n### Symptoms:\n```\nSSL certificate problem\nCERT_UNTRUSTED errors\n```\n\n### Solution:\n```bash\n# Disable SSL verification (temporary):\nnpm config set strict-ssl false\n\n# Or update npm certificates:\nnpm install --update-ca-certificates\n```\n\n## Error 10: React/Frontend Errors\n\n### Symptoms:\n```\nReact is not defined\nJSX transform errors\n```\n\n### Solution:\n```bash\n# Install React properly\nnpm install react react-dom\nnpm install --save-dev @types/react @types/react-dom\n\n# Verify vite.config.ts has React plugin\n```\n\n## 🔧 Universal Fix Commands\n\n### Complete Reset (Try First):\n```bash\n# Navigate to project directory\ncd your-project-folder\n\n# Complete clean installation\nrm -rf node_modules\nrm package-lock.json\nrm -rf dist\nrm -rf .next\nnpm cache clear --force\n\n# Fresh install\nnpm install\n\n# Try development mode\nnpm run dev\n```\n\n### Minimal Working Setup:\n```bash\n# Essential files check\nls -la package.json  # Should exist\nls -la .env          # Should exist with DATABASE_URL\n\n# Essential dependencies\nnpm install express react react-dom\nnpm install --save-dev vite tsx typescript\n\n# Start development\nnpm run dev\n```\n\n## 🎯 Step-by-Step Troubleshooting\n\n### Step 1: Environment Check\n```bash\n# Check Node.js version\nnode --version  # Should be 18+\n\n# Check npm version  \nnpm --version   # Should be 8+\n\n# Check project structure\nls -la          # Should see package.json, client/, server/\n```\n\n### Step 2: Dependencies Verification\n```bash\n# Check if package.json exists\ncat package.json\n\n# Install all dependencies\nnpm install\n\n# Check installation success\nnpm list --depth=0\n```\n\n### Step 3: Environment Variables\n```bash\n# Check .env file\ncat .env\n\n# Should contain:\n# DATABASE_URL=postgresql://...\n# SESSION_SECRET=...\n# NODE_ENV=development\n```\n\n### Step 4: Database Test\n```bash\n# Test database connection\nnpm run db:push\n\n# Should see: \"Everything is in sync\"\n```\n\n### Step 5: Start Application\n```bash\n# Development mode\nnpm run dev\n\n# Should see: \"serving on localhost:5000\"\n# Open: http://localhost:5000\n```\n\n## 🚨 Emergency Fallback\n\n### If Everything Fails:\n\n#### Option 1: Simplified Development\n```bash\n# Skip complex setup, use basic Node.js\nnode server/index-simple.js\n\n# Or create basic server:\nconst express = require('express');\nconst app = express();\napp.listen(3000, () => console.log('Server running on 3000'));\n```\n\n#### Option 2: Use Replit Development\n```bash\n# Continue development in Replit\n# Export when ready for deployment\n# Skip local development entirely\n```\n\n#### Option 3: Online IDE\n```bash\n# Use CodeSandbox, StackBlitz, or Gitpod\n# Import project directly\n# Develop in browser environment\n```\n\n## 📞 Getting Specific Help\n\n### Provide These Details:\n1. **Error Message**: Exact error text\n2. **Operating System**: Windows/Mac/Linux\n3. **Node.js Version**: `node --version`\n4. **NPM Version**: `npm --version`\n5. **Command Executed**: What command failed\n6. **Project Structure**: `ls -la` output\n\n### Common Error Patterns:\n\n#### Module Not Found:\n```bash\nSolution: npm install <missing-module>\n```\n\n#### Permission Denied:\n```bash\nSolution: Check file permissions, run as admin\n```\n\n#### Port in Use:\n```bash\nSolution: Change port or kill existing process\n```\n\n#### Database Connection:\n```bash\nSolution: Verify connection string format\n```\n\n## ✅ Success Indicators\n\n### When Everything Works:\n```bash\n✅ npm install completes without errors\n✅ npm run dev starts successfully  \n✅ \"serving on localhost:5000\" message appears\n✅ Browser loads http://localhost:5000\n✅ Login page displays correctly\n✅ No console errors in browser\n✅ Database connection successful\n```\n\n**If you're still getting errors, share the specific error message and I'll provide targeted solution!**","size_bytes":6470},"LOCAL_HOST_SETUP.md":{"content":"# Local Host Setup Guide - Temple Donation System\n\n## 💻 Local Development Setup\n\nCode download பண்ணி உங்கள் computer ل் run பண்ணுவதற்கான steps:\n\n## 🔧 Prerequisites\n\n### Required Software:\n```bash\n1. Node.js (Version 18 or higher)\n   Download: https://nodejs.org/\n\n2. Git (Optional - for version control)\n   Download: https://git-scm.com/\n\n3. Code Editor (VS Code recommended)\n   Download: https://code.visualstudio.com/\n```\n\n## 📥 Setup Process\n\n### Step 1: Code Download & Extract\n```bash\n# Replit ல் இருந்து ZIP download பண்ணவும்\n# Extract to desired folder\nunzip temple-donation-system.zip\ncd temple-donation-system\n```\n\n### Step 2: Dependencies Installation\n```bash\n# Terminal/Command Prompt open பண்ணவும்\n# Project folder ல் navigate பண்ணவும்\ncd path/to/temple-donation-system\n\n# Install all dependencies\nnpm install\n\n# Wait for installation to complete\n# Should see \"added XXX packages\" message\n```\n\n### Step 3: Environment Variables Setup\n```bash\n# Create .env file\ncp .env.example .env\n\n# Edit .env file with your database details:\nDATABASE_URL=your-neon-database-connection-string\nSESSION_SECRET=your-32-character-secret-key\nNODE_ENV=development\nPORT=5000\n```\n\n### Step 4: Database Connection\n```bash\n# Using your Neon database connection string:\nDATABASE_URL=postgresql://username:password@ep-xyz.us-east-1.aws.neon.tech/neondb?sslmode=require\n\n# Test database connection\nnpm run db:push\n\n# Should see: \"✓ Everything is in sync\"\n```\n\n### Step 5: Build Application\n```bash\n# Build frontend assets\nnpm run build\n\n# Should create dist/public folder with compiled files\n```\n\n### Step 6: Start Local Server\n```bash\n# Development mode (with auto-reload)\nnpm run dev\n\n# Or production mode\nnpm start\n\n# Server will start on http://localhost:5000\n```\n\n## 🌐 Access Application\n\n### Open in Browser:\n```bash\nURL: http://localhost:5000\nDefault Login: admin / admin123\n\n# Test pages:\n- Login: http://localhost:5000\n- Dashboard: http://localhost:5000/dashboard\n- Donation Form: http://localhost:5000/\n- Admin Panel: http://localhost:5000/admin\n```\n\n## 🔍 Verification Steps\n\n### Check if Everything Works:\n```bash\n✅ Server starts without errors\n✅ Database connection successful\n✅ Login page loads\n✅ Admin login works\n✅ Donation form submission\n✅ Dashboard shows data\n✅ All pages responsive\n```\n\n## 📊 Development Commands\n\n### Available Scripts:\n```bash\n# Development server (auto-reload)\nnpm run dev\n\n# Production build\nnpm run build\n\n# Start production server\nnpm start\n\n# Type checking\nnpm run check\n\n# Database migration\nnpm run db:push\n```\n\n## 🛠️ Development Workflow\n\n### Making Changes:\n```bash\n1. Edit files in client/src/ (Frontend)\n2. Edit files in server/ (Backend)\n3. Changes auto-reload in development mode\n4. Test changes in browser\n5. Build for production when ready\n```\n\n### File Structure:\n```\ntemple-donation-system/\n├── client/src/          # React frontend\n├── server/              # Express backend\n├── shared/              # Shared schemas\n├── dist/                # Built files\n├── package.json         # Dependencies\n└── .env                 # Environment variables\n```\n\n## 🚨 Common Issues & Solutions\n\n### Port Already in Use:\n```bash\nError: EADDRINUSE: address already in use :::5000\nSolution: \n- Close other applications using port 5000\n- Or change PORT in .env file to 3000 or 8000\n```\n\n### Database Connection Error:\n```bash\nError: DATABASE_URL must be set\nSolution:\n- Check .env file exists\n- Verify DATABASE_URL is correct\n- Test Neon database connection\n```\n\n### Build Errors:\n```bash\nError: Module not found\nSolution:\n- Delete node_modules folder\n- Run: npm install\n- Try: npm run build again\n```\n\n### Dependencies Issues:\n```bash\nError: Cannot resolve dependency\nSolution:\n- Clear cache: npm cache clean --force\n- Delete package-lock.json\n- Run: npm install\n```\n\n## 🔄 Hot Reload Development\n\n### Development Mode Features:\n```bash\n- Automatic server restart on backend changes\n- Frontend hot reload on React changes\n- Error overlay for debugging\n- Source maps for debugging\n- TypeScript type checking\n```\n\n## 📱 Mobile Testing (Local)\n\n### Test on Mobile Device:\n```bash\n1. Ensure computer and mobile on same WiFi\n2. Find computer IP address:\n   - Windows: ipconfig\n   - Mac/Linux: ifconfig\n3. Access from mobile: http://192.168.1.xxx:5000\n4. Test touch interface and responsiveness\n```\n\n## 🔐 Local Database Options\n\n### Option 1: Use Neon (Recommended)\n```bash\n# Continue using your Neon database\nDATABASE_URL=postgresql://...neon.tech/...\n# Data syncs between local and production\n```\n\n### Option 2: Local PostgreSQL\n```bash\n# Install PostgreSQL locally\n# Create local database\n# Use: DATABASE_URL=postgresql://localhost:5432/temple_donations\n# Separate from production data\n```\n\n## 📊 Performance Monitoring\n\n### Development Tools:\n```bash\n# Browser DevTools:\n- Network tab for API calls\n- Console for errors\n- Application tab for storage\n\n# Server Logs:\n- API response times\n- Database query logs\n- Error tracking\n```\n\n## 🎯 Production vs Development\n\n### Key Differences:\n```bash\nDevelopment (npm run dev):\n- Hot reload enabled\n- Detailed error messages\n- Source maps for debugging\n- NODE_ENV=development\n\nProduction (npm start):\n- Optimized builds\n- Compressed assets\n- Error logging only\n- NODE_ENV=production\n```\n\n## 📞 Troubleshooting\n\n### Common Commands:\n```bash\n# Clean installation\nrm -rf node_modules package-lock.json\nnpm install\n\n# Force rebuild\nnpm run build --force\n\n# Check Node.js version\nnode --version  # Should be 18+\n\n# Check npm version\nnpm --version\n\n# View logs\nnpm run dev --verbose\n```\n\n### Getting Help:\n```bash\n1. Check terminal logs for specific errors\n2. Verify .env file configuration\n3. Test database connection separately\n4. Check browser console for frontend errors\n5. Ensure all dependencies installed correctly\n```\n\n## 🎉 Success Checklist\n\n✅ Node.js installed (version 18+)  \n✅ Project dependencies installed  \n✅ Environment variables configured  \n✅ Database connected successfully  \n✅ Application builds without errors  \n✅ Server starts on localhost:5000  \n✅ Login page accessible  \n✅ Admin functions working  \n✅ Donation form submitting  \n✅ Dashboard displaying data  \n\n**Local development environment ready!**","size_bytes":6412},"NETLIFY_DEPLOYMENT.md":{"content":"# Netlify Deployment Guide - Temple Donation System\n\n## 🚀 Netlify ல் Deploy பண்ணுவது\n\n### ⚠️ Important Note:\nNetlify primarily hosts **static sites and serverless functions**. இந்த Temple Donation System full-stack application ஆ இருக்கு (Express.js backend + React frontend), so Netlify ல் direct ஆ host பண்ண முடியாது.\n\n## 🔄 Alternative Solutions:\n\n### 1. **Railway.app (Recommended)**\nFull-stack applications க்கு best choice:\n```bash\n# Steps:\n1. https://railway.app ல் account create பண்ணவும்\n2. \"Deploy from GitHub repo\" select பண்ணவும்\n3. PostgreSQL database add பண்ணவும்\n4. Auto-deploy ஆகிடும்\n```\n\n### 2. **Vercel (Full-stack Support)**\n```bash\n# Steps:\n1. GitHub repository push பண்ணவும்\n2. https://vercel.com ல் import பண்ணவும்\n3. Environment variables add பண்ணவும்\n4. Deploy ஆகிடும்\n```\n\n### 3. **Render.com**\n```bash\n# Steps:\n1. https://render.com ல் account create பண்ணவும்\n2. Web Service create பண்ணவும்\n3. PostgreSQL database add பண்ணவும்\n4. Deploy ஆகிடும்\n```\n\n## 📱 If You Still Want Netlify:\n\n### Option A: Split Architecture\n**Frontend (Netlify) + Backend (Railway/Render)**\n\n#### Frontend Deployment (Netlify):\n```bash\n# Build frontend only\nnpm run build\n\n# Upload dist/public folder to Netlify\n# Configure API calls to point to external backend\n```\n\n#### Backend Deployment (Railway):\n```bash\n# Deploy Express.js server separately\n# Get backend URL (e.g., https://your-app.railway.app)\n```\n\n### Option B: Netlify Functions (Limited)\nConvert Express routes to Netlify Functions - **மிக complex process!**\n\n## 🎯 Recommended Path:\n\n### **Use Railway.app instead of Netlify:**\n\n#### Download Code பண்ணின பிறகு:\n\n1. **GitHub Repository Create:**\n```bash\ncd temple-donation-system\ngit init\ngit add .\ngit commit -m \"Initial commit\"\ngit branch -M main\ngit remote add origin https://github.com/yourusername/temple-donation.git\ngit push -u origin main\n```\n\n2. **Railway Deployment:**\n```bash\n# Railway.app ல் போங்க\n# \"Deploy from GitHub repo\" click பண்ணவும்\n# Repository select பண்ணவும்\n# PostgreSQL service add பண்ணவும்\n# Environment variables:\nSESSION_SECRET=your-secret-key\nNODE_ENV=production\n```\n\n3. **Database Setup:**\n```bash\n# Railway automatically DATABASE_URL set பண்ணும்\n# Tables automatically create ஆகும் first run ல்\n```\n\n## 📋 Files You Need:\n\n### **Download பண்ணின பிறகு இந்த files check பண்ணவும்:**\n\n1. **package.json** - Dependencies மற்றும் scripts\n2. **server/index.ts** - Main server file\n3. **client/src/** - Frontend files\n4. **shared/schema.ts** - Database schema\n5. **.env.example** - Environment variables template\n\n### **Required Environment Variables:**\n```env\nDATABASE_URL=postgresql://username:password@host:port/database\nSESSION_SECRET=minimum-32-character-secret-key\nNODE_ENV=production\n```\n\n## 🛠️ Step-by-Step After Download:\n\n### 1. **Extract மற்றும் Setup:**\n```bash\n# ZIP file extract பண்ணவும்\nunzip temple-donation-system.zip\ncd temple-donation-system\n\n# Dependencies install பண்ணவும்\nnpm install\n```\n\n### 2. **Environment Setup:**\n```bash\n# .env file create பண்ணவும்\ncp .env.example .env\n\n# Edit .env file:\nnano .env\n# Add your DATABASE_URL மற்றும் SESSION_SECRET\n```\n\n### 3. **Local Test:**\n```bash\n# Build பண்ணவும்\nnpm run build\n\n# Local ல் test பண்ணவும்\nnpm start\n\n# http://localhost:5000 ல் check பண்ணவும்\n```\n\n### 4. **Deploy to Railway:**\n```bash\n# GitHub ல் push பண்ணவும்\ngit init\ngit add .\ngit commit -m \"Deploy temple donation system\"\ngit push origin main\n\n# Railway.app ல்:\n# - Repository import பண்ணவும்\n# - PostgreSQL add பண்ணவும்\n# - Deploy ஆகிடும்\n```\n\n## 🎯 Why Not Netlify for This Project:\n\n1. **Backend Server Required:** Express.js server continuous ஆ run ஆக வேண்டும்\n2. **Database Connections:** PostgreSQL persistent connection தேவை\n3. **Session Management:** Server-side sessions use பண்றோம்\n4. **File Processing:** CSV imports மற்றும் data processing\n\n**Railway/Vercel/Render better choice இந்த project க்கு!**\n\n## 📞 Next Steps:\n\n1. **Download code** from Replit\n2. **Choose platform:** Railway (recommended)\n3. **Follow deployment guide** \n4. **Test application**\n\nRailway.app deployment guide வேணுமா step-by-step ஆ?","size_bytes":4862},"POST_DATABASE_SETUP.md":{"content":"# Post Database Setup - Next Steps\n\n## 🎉 Neon Database Connected - Next Actions\n\n### ✅ Database Connection Complete\nNeon database successfully connected! Now follow these steps:\n\n## 🔧 Step 1: Environment Variables Setup\n\n### Create .env file:\n```bash\n# Copy template\ncp .env.example .env\n\n# Edit .env file with your Neon connection:\nDATABASE_URL=postgresql://username:password@ep-xyz.us-east-1.aws.neon.tech/neondb?sslmode=require\nSESSION_SECRET=your-32-character-secret-key-here\nNODE_ENV=production\n```\n\n### Generate Session Secret:\n```bash\n# Use online generator or create random string:\n# Minimum 32 characters required\nSESSION_SECRET=abcd1234efgh5678ijkl9012mnop3456\n```\n\n## 🚀 Step 2: Deploy Application\n\n### Option A: Vercel + Neon (Free)\n```bash\n1. GitHub repository create பண்ணவும்:\n   git init\n   git add .\n   git commit -m \"Temple donation system\"\n   git push origin main\n\n2. Vercel.com ல் import பண்ணவும்\n3. Environment variables add பண்ணவும்:\n   - DATABASE_URL (your Neon connection)\n   - SESSION_SECRET\n   - NODE_ENV=production\n4. Deploy button click பண்ணவும்\n```\n\n### Option B: Railway + Neon\n```bash\n1. Railway.app ல் \"Deploy from GitHub repo\"\n2. Repository select பண்ணவும்\n3. Environment variables add பண்ணவும்:\n   - DATABASE_URL (your Neon connection)  \n   - SESSION_SECRET\n4. Deploy ஆகிடும்\n```\n\n### Option C: Render + Neon\n```bash\n1. Render.com ல் Web Service create பண்ணவும்\n2. GitHub repository connect பண்ணவும்\n3. Build Command: npm run build\n4. Start Command: npm start\n5. Environment variables add பண்ணவும்\n```\n\n## 📊 Step 3: Database Tables Creation\n\n### After First Deployment:\n```bash\n# Tables automatically create ஆகும் first API call ல்\n# Or manually trigger:\ncurl -X GET https://your-app-url.com/api/auth/status\n\n# Success confirmation:\n✓ PostgreSQL Database Connected - Data will be persistent\n```\n\n## 🔍 Step 4: Application Testing\n\n### Test Checklist:\n```bash\n✅ Application URL accessible\n✅ Login page loads properly\n✅ Admin login works (admin/admin123)\n✅ Donation form submission\n✅ Dashboard data display\n✅ Database connection stable\n```\n\n## 🛠️ Step 5: Initial Configuration\n\n### Admin Setup:\n```bash\n1. Login with: admin / admin123\n2. Admin Panel ல் போங்க\n3. Password change பண்ணவும்\n4. New admin users add பண்ணவும் (optional)\n```\n\n### Data Import (Optional):\n```bash\n1. Existing donation data இருந்தா CSV export பண்ணவும்\n2. Import Data page ல் upload பண்ணவும்\n3. Data mapping verify பண்ணவும்\n4. Import complete பண்ணவும்\n```\n\n## 🌐 Step 6: Domain & Access\n\n### Application URLs:\n```bash\n# Vercel deployment:\nhttps://your-app-name.vercel.app\n\n# Railway deployment:\nhttps://your-app-name.railway.app\n\n# Render deployment:\nhttps://your-app-name.onrender.com\n```\n\n### Custom Domain (Optional):\n```bash\n# Most platforms support custom domain:\n1. Domain provider ல் DNS settings update பண்ணவும்\n2. Platform settings ல் custom domain add பண்ணவும்\n3. SSL automatically enabled ஆகும்\n```\n\n## 🔐 Step 7: Security Setup\n\n### Production Security:\n```bash\n1. Strong admin passwords set பண்ணவום்\n2. SESSION_SECRET properly configured\n3. HTTPS enabled (automatic in most platforms)\n4. Database credentials secure\n5. Environment variables not exposed\n```\n\n## 📱 Step 8: Mobile Testing\n\n### Responsive Check:\n```bash\n1. Mobile browser ல் open பண்ணவும்\n2. Touch-friendly interface verify பண்ணவும்\n3. Forms properly working\n4. Navigation smooth ஆ இருக்கா check பண்ணவும்\n```\n\n## 🔄 Step 9: Backup Strategy\n\n### Data Backup:\n```bash\n# Neon automatic backups:\n- Point-in-time recovery available\n- Manual backups via dashboard\n\n# Application-level backup:\n- Regular CSV exports\n- Database dump schedules\n```\n\n## 📊 Step 10: Performance Monitoring\n\n### Monitor Application:\n```bash\n1. Response times check பண்ணவும்\n2. Database query performance\n3. Error logs monitoring\n4. User activity tracking\n```\n\n## 🚨 Common Issues & Solutions:\n\n### Database Connection Errors:\n```bash\nError: Connection timeout\nSolution: Check Neon database status, verify connection string\n\nError: SSL required\nSolution: Add ?sslmode=require to connection string\n```\n\n### Deployment Issues:\n```bash\nError: Build failed\nSolution: Check package.json scripts, verify dependencies\n\nError: Environment variables missing\nSolution: Confirm DATABASE_URL and SESSION_SECRET set\n```\n\n## 📞 Support Resources:\n\n### Platform Documentation:\n- **Vercel:** https://vercel.com/docs\n- **Railway:** https://docs.railway.app\n- **Render:** https://render.com/docs\n- **Neon:** https://neon.tech/docs\n\n### Application Support:\n- Check deployment logs for errors\n- Verify environment variables\n- Test database connection\n- Monitor application performance\n\n## 🎯 Success Criteria:\n\n✅ Application deployed and accessible  \n✅ Database connected and tables created  \n✅ Admin login working  \n✅ Donation form functional  \n✅ Dashboard displaying data  \n✅ Mobile responsive  \n✅ Security configured  \n✅ Backup strategy in place  \n\n**Deployment successful!** Application ready for production use.\n\n## 🔄 Next Steps Summary:\n\n1. **Environment Variables** - DATABASE_URL + SESSION_SECRET\n2. **Deploy Platform** - Choose Vercel/Railway/Render\n3. **Test Application** - All features working\n4. **Admin Setup** - Change default password\n5. **Data Migration** - Import existing data (optional)\n6. **Go Live** - Share application URL\n\n**Template ready! Choose deployment platform and proceed.**","size_bytes":5866},"QUICK_DEPLOY.md":{"content":"# Quick Deployment Guide - Tamil Temple Donation System\n\n## விரைவான Deployment Guide\n\n### 🚀 Railway.app (மிக எளிது - Database Included)\n\n#### Setup Steps:\n1. **Railway Account:** https://railway.app ல் போய் GitHub account உபயோகித்து login பண்ணவும்\n2. **New Project:** \"Deploy from GitHub repo\" select பண்ணவும்\n3. **Repository Connect:** உங்கள் GitHub repository select பண்ணவும்\n4. **Database Add:** \"Add PostgreSQL\" button click பண்ணவும்\n5. **Auto Deploy:** Railway automatically deploy பண்ணும்\n\n#### Environment Variables (Auto-set):\n- `DATABASE_URL` - Railway automatically set பண்ணும்\n- `SESSION_SECRET` - Manual ஆ add பண்ண வேண்டும்\n\n**Session Secret Generate பண்ணுவது:**\n```bash\n# Linux/Mac\nopenssl rand -base64 32\n\n# Online generator\n# https://generate-secret.now.sh/32\n```\n\n#### Cost: **Free tier - Monthly $5 credit**\n\n---\n\n### 🌟 Vercel (Frontend) + Neon (Database)\n\n#### Neon Database Setup:\n1. https://neon.tech ல் account create பண்ணவும்\n2. New project create பண்ணவும்\n3. Connection string copy பண்ணவும்\n\n#### Vercel Deployment:\n1. https://vercel.com ல் GitHub account உபயோகித்து login பண்ணவும்\n2. \"Import Git Repository\" click பண்ணவும்\n3. Repository select பண்ணவும்\n4. Environment Variables add பண்ணவும்:\n   ```\n   DATABASE_URL=postgresql://...neon.tech/...\n   SESSION_SECRET=your-32-character-secret\n   NODE_ENV=production\n   ```\n5. Deploy button click பண்ணவும்\n\n#### Cost: **Completely Free**\n\n---\n\n### 🐳 Render.com\n\n#### Setup Steps:\n1. https://render.com ল் account create பண்ணவும்\n2. \"New Web Service\" create பண்ணவும்\n3. GitHub repository connect பண்ணவும்\n4. Settings:\n   - **Build Command:** `npm run build`\n   - **Start Command:** `npm start`\n5. PostgreSQL service add பண்ணவும் (separate)\n6. Environment variables add பண்ணவும்\n\n#### Cost: **Free tier available**\n\n---\n\n## ⚡ எந்த Platform Best?\n\n### **Beginners க்கு:** Railway\n- Database included\n- Automatic setup\n- Simple deployment\n\n### **Free கற்காக:** Vercel + Neon\n- Completely free\n- Good performance\n- Reliable\n\n### **Advanced Users:** Render/DigitalOcean\n- More control\n- Scaling options\n\n---\n\n## 🔧 After Deployment\n\n### 1. Database Tables Create:\n```bash\nnpm run db:push\n```\n\n### 2. Test Application:\n- Login page: `admin / admin123`\n- Donation form working\n- Dashboard loading\n\n### 3. Change Admin Password:\nFirst login பண்ணின பிறகு Admin Panel ல் password change பண்ணவும்\n\n---\n\n## 📱 URLs After Deployment:\n\n- **Railway:** `https://your-app-name.railway.app`\n- **Vercel:** `https://your-app-name.vercel.app`\n- **Render:** `https://your-app-name.onrender.com`\n\n---\n\n## 🆘 Common Issues:\n\n### Database Connection Error:\n```\nError: DATABASE_URL must be set\n```\n**Solution:** Environment variables ல் DATABASE_URL add பண்ணவும்\n\n### Build Failure:\n```\nnpm ERR! missing script: build\n```\n**Solution:** package.json ல் scripts section check பண்ணவும்\n\n### Session Error:\n```\nSession secret required\n```\n**Solution:** SESSION_SECRET environment variable add பண்ணவும்\n\n---\n\n## 📞 Need Help?\n1. Platform documentation check பண்ணவும்\n2. Environment variables verify பண்ணவும்\n3. Database connection test பண்ணவும்\n4. Build logs check பண்ணவும்\n\n**Most recommended:** Railway.app - One-click deployment with database included!","size_bytes":3848},"RAILWAY_STEP_BY_STEP.md":{"content":"# Railway.app Complete Deployment Guide\n\n## 🚀 Temple Donation System - Railway Deployment\n\n### ⚡ Railway.app என்றால் என்ன?\nRailway.app full-stack applications host பண்ணுவதற்கான platform. Database + Backend + Frontend எல்லாமே ஒரே இடத்தில் deploy பண்ணலாம்.\n\n## 📥 Code Download பண்ணின பிறகு Steps:\n\n### 1. **Replit ல் இருந்து Download:**\n```bash\n# Replit dashboard ல்:\n# 1. \"Export as ZIP\" click பண்ணவும்\n# 2. ZIP file download ஆகும்\n# 3. Extract பண்ணவும்\n```\n\n### 2. **Local Setup:**\n```bash\n# Folder extract பண்ணவும்\nunzip temple-donation-system.zip\ncd temple-donation-system\n\n# Dependencies check பண்ணவும்\nnpm install\n\n# Environment file create பண்ணவும்\ncp .env.example .env\n```\n\n### 3. **GitHub Repository Create:**\n```bash\n# Git initialize பண்ணவும்\ngit init\ngit add .\ngit commit -m \"Temple donation system - initial commit\"\n\n# GitHub ல் new repository create பண்ணவும்\n# Repository URL copy பண்ணவும்\n\n# Remote add பண்ணவும்\ngit remote add origin https://github.com/yourusername/temple-donation.git\ngit branch -M main\ngit push -u origin main\n```\n\n### 4. **Railway Account Setup:**\n```bash\n# Steps:\n1. https://railway.app ல் போய்\n2. \"Login with GitHub\" click பண்ணவும்\n3. GitHub account உபயோகித்து login பண்ணவும்\n4. Account verify பண்ணவும்\n```\n\n### 5. **Project Deploy பண்ணுவது:**\n\n#### A. New Project Create:\n```bash\n1. Railway dashboard ல் \"New Project\" click பண்ணவும்\n2. \"Deploy from GitHub repo\" select பண்ணவும்\n3. உங்கள் repository (temple-donation) select பண்ணவும்\n4. \"Deploy Now\" click பண்ணவும்\n```\n\n#### B. Database Add பண்ணுவது:\n```bash\n1. Project dashboard ல் \"Add Service\" click பண்ணவும்\n2. \"PostgreSQL\" select பண்ணவும்\n3. Database automatically create ஆகும்\n4. Connection string automatically set ஆகும்\n```\n\n#### C. Environment Variables:\n```bash\n1. Web Service settings ல் போங்க\n2. \"Variables\" tab click பண்ணவும்\n3. Add these variables:\n\nSESSION_SECRET=your-super-secret-key-minimum-32-characters-long\nNODE_ENV=production\n\n# DATABASE_URL automatically set ஆகும் PostgreSQL service connect ஆனப்போ\n```\n\n### 6. **Build Configuration:**\n\nRailway automatically detect பண்ணும், but confirm பண்ணவும்:\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\",\n    \"start\": \"NODE_ENV=production node dist/index.js\"\n  }\n}\n```\n\n### 7. **Database Tables Setup:**\n\nFirst deployment பின்பு:\n```bash\n# Railway console ல் run பண்ணவும்:\nnpm run db:push\n\n# Or automatically create ஆகும் first API call ல்\n```\n\n### 8. **Domain & SSL:**\n\n```bash\n# Railway automatically provide பண்ணும்:\n- Custom domain: https://your-app-name.railway.app\n- SSL certificate: Automatic\n- HTTPS redirect: Enabled\n```\n\n### 9. **Testing Deployment:**\n\n```bash\n1. Railway dashboard ல் \"View Logs\" check பண்ணவும்\n2. Application URL click பண்ணவும்\n3. Login page load ஆகுதா check பண்ணவும்\n4. Test donation entry\n5. Admin panel access பண்ணவும்\n```\n\n## 💰 Railway Pricing:\n\n### **Free Tier:**\n- $5 monthly credit\n- 500 hours execution time\n- 1GB RAM\n- 1GB storage\n\n### **Pro Plan:** $20/month\n- Unlimited usage\n- Priority support\n- Custom domains\n\n## 🔧 Post-Deployment Configuration:\n\n### 1. **Admin Credentials:**\n```bash\n# Default credentials:\nUsername: admin\nPassword: admin123\n\n# First login பின்பு Admin Panel ல் password change பண்ணவும்\n```\n\n### 2. **Data Migration (Optional):**\n```bash\n# Existing data இருந்தா:\n# CSV export பண்ணி import feature use பண்ணவும்\n```\n\n### 3. **Backup Setup:**\n```bash\n# Railway PostgreSQL automatic backups provide பண்ணும்\n# Manual backup: Database > Backups section\n```\n\n## 🚨 Common Issues & Solutions:\n\n### **Build Failure:**\n```bash\nError: Module not found\nSolution: Check package.json dependencies complete ஆ இருக்கா\n```\n\n### **Database Connection Error:**\n```bash\nError: DATABASE_URL not set\nSolution: PostgreSQL service properly connected ஆ இருக்கா check பண்ணவும்\n```\n\n### **Port Issues:**\n```bash\nError: Port already in use\nSolution: Railway automatically port assign பண்ணும், manual port set பண்ண வேண்டாம்\n```\n\n## 📱 Mobile Access:\n\nRailway deployment mobile-friendly ஆ இருக்கும்:\n- Responsive design\n- Touch-friendly interface\n- Fast loading\n\n## 🔄 Updates & Maintenance:\n\n### **Code Updates:**\n```bash\n# Local changes பண்ணி:\ngit add .\ngit commit -m \"Updated features\"\ngit push origin main\n\n# Railway automatic re-deploy பண்ணும்\n```\n\n### **Database Updates:**\n```bash\n# Schema changes பண்ணினா:\nnpm run db:push\n```\n\n## 🎯 Success Checklist:\n\n✅ Code downloaded from Replit  \n✅ GitHub repository created  \n✅ Railway account setup  \n✅ Project deployed  \n✅ Database connected  \n✅ Environment variables set  \n✅ Application accessible  \n✅ Admin login working  \n✅ Donation form functional  \n✅ Dashboard loading  \n\n## 📞 Support:\n\n**Railway Issues:** \n- Railway documentation\n- Discord community\n- Support tickets\n\n**Application Issues:**\n- Check logs in Railway dashboard\n- Verify environment variables\n- Test database connection\n\n**Railway.app மிக easy platform! Follow these steps ஆ application successfully deploy ஆகிடும்.**","size_bytes":6084},"START_APPLICATION.md":{"content":"# Start Temple Donation Application\n\n## ✅ .env File Created Successfully\n\nYour .env file is correctly configured with:\n- Neon PostgreSQL database connection\n- Session secret for authentication\n- Development environment settings\n- Port configuration\n\n## 🚀 Start the Application\n\n```cmd\ncd C:\\Users\\harin\\OneDrive\\Desktop\\sivanDonation\\TempleDonation\nnpx tsx server/index.ts\n```\n\n## ✅ Expected Success Output\n\n```\nPostgreSQL Database Connected - Data will be persistent\nServing static files from dist/public\nserving on localhost:5000\n```\n\n## 🌐 Access Your Application\n\nOpen your browser and go to: **http://localhost:5000**\n\nYou should see:\n- Temple Donation Management System login page\n- Language toggle (English/Tamil)\n- Admin login form\n\n## 🔑 Default Admin Credentials\n\n- **Username:** admin\n- **Password:** admin123\n\n## 📱 Application Features\n\nOnce logged in, you'll have access to:\n- **Dashboard:** Real-time donation statistics\n- **Donation Form:** Add new donations with receipt generation\n- **Donor Lookup:** Search donors by phone number\n- **Data Import:** Upload CSV/Excel files\n- **Settings:** Manage admin accounts\n- **Google Forms Integration:** Connect external donation forms\n\n## 🎯 Success Indicators\n\n1. ✅ Application starts without DATABASE_URL error\n2. ✅ Browser loads http://localhost:5000\n3. ✅ Login page displays properly\n4. ✅ Can switch between English and Tamil\n5. ✅ Admin login works with default credentials\n6. ✅ Dashboard shows donation statistics\n7. ✅ All features accessible from navigation\n\n## 🚨 If Issues Occur\n\n### Database Connection Issues:\n```cmd\n# Test database connection\nnpx drizzle-kit push\n```\n\n### Port Already in Use:\n```cmd\n# Kill existing process\ntaskkill /F /IM node.exe\n# Or change PORT in .env to 3000\n```\n\n### Static Files Not Loading:\n- The app serves from dist/public folder\n- CSS and JS files should load automatically\n\n## 🔧 Development Commands\n\n```cmd\n# Start development server\nnpx tsx server/index.ts\n\n# Build for production\nnpm run build\n\n# Database operations\nnpm run db:push\n\n# Type checking\nnpm run check\n```\n\n## 📝 Local Development Notes\n\n- Hot reload: Restart manually when making changes\n- Logs: Check terminal for error messages\n- Database: Uses your Neon PostgreSQL database\n- Session: Stays logged in during development\n- Files: Static assets served from dist/public\n\nYour temple donation management system is now running locally on Windows!","size_bytes":2446},"WINDOWS_COMMANDS.md":{"content":"# Windows Commands for Temple Donation System\n\n## 🪟 Windows PowerShell Commands\n\n### Clean Installation (Windows):\n```powershell\n# Remove node_modules folder\nRemove-Item -Recurse -Force node_modules -ErrorAction SilentlyContinue\n\n# Remove package-lock.json\nRemove-Item package-lock.json -ErrorAction SilentlyContinue\n\n# Clear npm cache\nnpm cache clean --force\n\n# Install dependencies\nnpm install\n```\n\n### Alternative Windows Commands:\n```cmd\n# Using Command Prompt (cmd):\nrmdir /s /q node_modules\ndel package-lock.json\nnpm cache clean --force\nnpm install\n```\n\n### Or Simple PowerShell:\n```powershell\n# Delete folders/files if they exist\nif (Test-Path node_modules) { Remove-Item -Recurse -Force node_modules }\nif (Test-Path package-lock.json) { Remove-Item package-lock.json }\nnpm cache clean --force\nnpm install\n```\n\n## 🔧 Step-by-Step Windows Setup:\n\n### Step 1: Clean Project\n```powershell\n# Navigate to project folder\ncd C:\\path\\to\\your\\temple-donation-system\n\n# Clean installation\nRemove-Item -Recurse -Force node_modules -ErrorAction SilentlyContinue\nRemove-Item package-lock.json -ErrorAction SilentlyContinue\nnpm cache clean --force\n```\n\n### Step 2: Install Dependencies\n```powershell\nnpm install\n```\n\n### Step 3: Create Environment File\n```powershell\n# Copy template\nCopy-Item .env.example .env\n\n# Edit .env file manually or use:\nnotepad .env\n```\n\n### Step 4: Add Environment Variables\n```\nDATABASE_URL=your-neon-connection-string\nSESSION_SECRET=your-32-character-secret-key\nNODE_ENV=development\nPORT=5000\n```\n\n### Step 5: Start Development Server\n```powershell\nnpm run dev\n```\n\n## 🚨 Windows Common Issues:\n\n### Issue 1: PowerShell Execution Policy\n```powershell\n# Fix execution policy error:\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n```\n\n### Issue 2: Node.js Not Found\n```powershell\n# Check if Node.js installed:\nnode --version\nnpm --version\n\n# If not found, download from: https://nodejs.org/\n```\n\n### Issue 3: Permission Errors\n```powershell\n# Run PowerShell as Administrator\n# Right-click PowerShell → Run as Administrator\n```\n\n### Issue 4: Path Issues\n```powershell\n# Check current directory:\nGet-Location\n\n# Navigate to project:\ncd \"C:\\Users\\YourName\\Downloads\\temple-donation-system\"\n```\n\n## 🎯 Quick Windows Setup Commands:\n\n```powershell\n# Complete setup in PowerShell:\nif (Test-Path node_modules) { Remove-Item -Recurse -Force node_modules }\nif (Test-Path package-lock.json) { Remove-Item package-lock.json }\nnpm cache clean --force\nnpm install\nCopy-Item .env.example .env -ErrorAction SilentlyContinue\nnpm run dev\n```\n\n## ⚡ Alternative: Use Command Prompt (cmd)\n\n### Open Command Prompt and run:\n```cmd\ncd C:\\path\\to\\your\\project\nrmdir /s /q node_modules\ndel package-lock.json\nnpm cache clean --force\nnpm install\ncopy .env.example .env\nnpm run dev\n```\n\n## 📝 Windows Environment File Setup:\n\n### Create .env file manually:\n1. Open Notepad\n2. Add these lines:\n```\nDATABASE_URL=postgresql://username:password@ep-xyz.us-east-1.aws.neon.tech/neondb?sslmode=require\nSESSION_SECRET=abcd1234efgh5678ijkl9012mnop3456qrst7890\nNODE_ENV=development\nPORT=5000\n```\n3. Save as `.env` (not .env.txt)\n4. Make sure \"All Files\" is selected in save dialog\n\n## 🔧 Windows-Specific Troubleshooting:\n\n### Fix Long Path Issues:\n```powershell\n# Enable long paths in Windows:\nNew-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name \"LongPathsEnabled\" -Value 1 -PropertyType DWORD -Force\n```\n\n### Fix npm permissions:\n```powershell\n# Set npm prefix to user directory:\nnpm config set prefix \"%USERPROFILE%\\npm-global\"\n```\n\n### Check Windows Version:\n```powershell\n# Check Windows version (should be Windows 10/11):\nsysteminfo | findstr \"OS Name\"\n```","size_bytes":3713},"WINDOWS_ENV_SOLUTIONS.md":{"content":"# Windows Environment Variable Solutions\n\n## 🚨 Problem: .env File Not Loading\n\nThe .env file exists but Node.js isn't reading it automatically on Windows.\n\n## 🔧 Solution 1: Use dotenv Package (Recommended)\n\n```cmd\n# Install dotenv\nnpm install dotenv\n\n# Start with dotenv\nnpx dotenv-cli tsx server/index.ts\n```\n\n## 🔧 Solution 2: Set Environment Variables Manually\n\n### PowerShell:\n```powershell\n$env:DATABASE_URL=\"postgresql://neondb_owner:npg_TPc37yNrkbZF@ep-fragrant-forest-adfudasj-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require\"\n$env:SESSION_SECRET=\"temple-donation-secret-key-12345678901234567890abcdefghijk\"\n$env:NODE_ENV=\"development\"\n$env:PORT=\"5000\"\nnpx tsx server/index.ts\n```\n\n### Command Prompt:\n```cmd\nset DATABASE_URL=postgresql://neondb_owner:npg_TPc37yNrkbZF@ep-fragrant-forest-adfudasj-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require\nset SESSION_SECRET=temple-donation-secret-key-12345678901234567890abcdefghijk\nset NODE_ENV=development\nset PORT=5000\nnpx tsx server/index.ts\n```\n\n## 🔧 Solution 3: Use Windows Startup Script\n\nI created `start-windows.js` that loads .env file:\n\n```cmd\nnode start-windows.js\n```\n\n## 🔧 Solution 4: Install dotenv-cli\n\n```cmd\n# Install dotenv-cli globally\nnpm install -g dotenv-cli\n\n# Run with dotenv-cli\ndotenv -e .env tsx server/index.ts\n```\n\n## 🔧 Solution 5: One-Line PowerShell Command\n\n```powershell\nGet-Content .env | ForEach-Object { if($_ -match '^([^=]+)=(.*)$'){ [Environment]::SetEnvironmentVariable($matches[1], $matches[2], 'Process') } }; npx tsx server/index.ts\n```\n\n## ⚡ Quick Fix Commands (Try in Order)\n\n### Try 1: Install and use dotenv-cli\n```cmd\nnpm install -g dotenv-cli\ndotenv -e .env tsx server/index.ts\n```\n\n### Try 2: Manual environment variables (PowerShell)\n```powershell\n$env:DATABASE_URL=\"postgresql://neondb_owner:npg_TPc37yNrkbZF@ep-fragrant-forest-adfudasj-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require\"\nnpx tsx server/index.ts\n```\n\n### Try 3: Use Windows startup script\n```cmd\nnode start-windows.js\n```\n\n### Try 4: Command Prompt with set commands\n```cmd\nset DATABASE_URL=postgresql://neondb_owner:npg_TPc37yNrkbZF@ep-fragrant-forest-adfudasj-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require\nnpx tsx server/index.ts\n```\n\n## ✅ Expected Success Output\n\nAny of these methods should produce:\n```\n✅ Environment variables loaded\n✅ DATABASE_URL found\n🚀 Starting Temple Donation System...\nPostgreSQL Database Connected - Data will be persistent\nserving on localhost:5000\n```\n\n## 🎯 Recommended Approach\n\n**Use dotenv-cli** - it's the most reliable for Windows:\n\n1. Install: `npm install -g dotenv-cli`\n2. Run: `dotenv -e .env tsx server/index.ts`\n3. Access: http://localhost:5000\n\nThis ensures .env file is properly loaded on Windows systems.","size_bytes":2786},"WINDOWS_LOCAL_SETUP.md":{"content":"# Windows Local Setup - Complete Guide\n\n## 🚨 DATABASE_URL Error Fix\n\nThe error shows you need to create a .env file with database connection details.\n\n## 📝 Step 1: Create .env File\n\n### Option A: PowerShell Command\n```powershell\nCopy-Item .env.example .env\n```\n\n### Option B: Manual Creation\n1. Open Notepad\n2. Create new file\n3. Add the content below\n4. Save as `.env` (not .env.txt)\n\n## 🔗 Step 2: Get Your Neon Database URL\n\n### From Your Replit Project:\n1. Go to your Replit project\n2. Click on \"Secrets\" tab (lock icon)\n3. Copy the `DATABASE_URL` value\n4. It looks like: `postgresql://username:password@ep-xyz.us-east-1.aws.neon.tech/neondb?sslmode=require`\n\n### Or Create New Neon Database:\n1. Go to https://neon.tech\n2. Sign up/Login\n3. Create new project\n4. Copy connection string\n\n## 📄 Step 3: Add to .env File\n\nCreate `.env` file with this content:\n```\nDATABASE_URL=postgresql://your-username:your-password@ep-xyz.us-east-1.aws.neon.tech/neondb?sslmode=require\nSESSION_SECRET=abcd1234efgh5678ijkl9012mnop3456qrst7890uvwx\nNODE_ENV=development\nPORT=5000\n```\n\n**Replace the DATABASE_URL with your actual Neon connection string!**\n\n## 🚀 Step 4: Complete Windows Setup\n\n```cmd\n# 1. Create .env file (manual or copy from .env.example)\n\n# 2. Install dependencies\nnpm install\n\n# 3. Push database schema\nnpm run db:push\n\n# 4. Start development server\nnpm run dev\n\n# 5. Open browser: http://localhost:5000\n```\n\n## 🔧 Alternative: Use Development Database\n\nIf you don't have Neon database, you can use a local PostgreSQL:\n\n### Install PostgreSQL on Windows:\n1. Download from: https://www.postgresql.org/download/windows/\n2. Install with default settings\n3. Remember the password you set\n4. Use this in .env:\n```\nDATABASE_URL=postgresql://postgres:your-password@localhost:5432/temple_donations\n```\n\n## 🎯 Quick Fix Commands (Windows)\n\n```cmd\n# Navigate to project\ncd C:\\Users\\harin\\OneDrive\\Desktop\\sivanDonation\\TempleDonation\n\n# Copy environment template\ncopy .env.example .env\n\n# Edit .env file with your database URL\nnotepad .env\n\n# Install and run\nnpm install\nnpm run db:push\nnpm run dev\n```\n\n## ✅ Expected Results\n\nAfter fixing .env file:\n- `npm run db:push` succeeds\n- `npm run dev` starts without errors\n- Browser shows: \"serving on localhost:5000\"\n- http://localhost:5000 loads the login page\n\n## 🔍 Verify Setup\n\n```cmd\n# Check if .env exists\ndir .env\n\n# Check database connection\nnpm run db:push\n\n# Should show: \"Everything is in sync\"\n```\n\n## 🚨 Common Issues\n\n### Issue 1: .env.txt instead of .env\n- Make sure file is saved as `.env` not `.env.txt`\n- In Notepad: File Type → \"All Files\"\n\n### Issue 2: Wrong DATABASE_URL format\n- Must start with `postgresql://`\n- Must include username, password, host, database name\n- Must end with `?sslmode=require` for Neon\n\n### Issue 3: Permission errors\n- Run Command Prompt as Administrator\n- Or use PowerShell as Administrator\n\n## 📞 Need Database URL?\n\nIf you need a new database:\n1. **Neon (Recommended)**: https://neon.tech - Free PostgreSQL\n2. **Supabase**: https://supabase.com - Free PostgreSQL \n3. **Local PostgreSQL**: Install on Windows\n\nThe app needs PostgreSQL database to work. Get the connection string and add to .env file.","size_bytes":3216},"WINDOWS_NODE_ENV_FIX.md":{"content":"# Windows NODE_ENV Fix\n\n## 🚨 Problem: Windows PowerShell NODE_ENV Error\n\nWindows doesn't recognize `NODE_ENV=development` syntax from Linux/Mac.\n\n## 🔧 Solution 1: Use Command Prompt (cmd) Instead\n\n### Close PowerShell and open Command Prompt:\n1. Press **Windows + R**\n2. Type `cmd` and press Enter\n3. Navigate to project:\n\n```cmd\ncd C:\\Users\\harin\\OneDrive\\Desktop\\sivanDonation\\TempleDonation\nnpm run dev\n```\n\n## 🔧 Solution 2: Use cross-env (Already Installed)\n\nThe project has `cross-env` package. Update package.json scripts manually:\n\n### Open package.json in Notepad:\n```cmd\nnotepad package.json\n```\n\n### Find the scripts section and change:\n```json\n\"scripts\": {\n  \"dev\": \"cross-env NODE_ENV=development tsx server/index.ts\",\n  \"start\": \"cross-env NODE_ENV=production node dist/index.js\",\n  \"build\": \"vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\",\n  \"check\": \"tsc\",\n  \"db:push\": \"drizzle-kit push\"\n}\n```\n\n### Then run:\n```cmd\nnpm run dev\n```\n\n## 🔧 Solution 3: Run Direct Command\n\nSkip npm script, run tsx directly:\n\n```cmd\nnpx tsx server/index.ts\n```\n\n## 🔧 Solution 4: Set Environment Variable First\n\n```cmd\n# Set environment variable in Windows\nset NODE_ENV=development\n\n# Then run\nnpx tsx server/index.ts\n```\n\n## 🔧 Solution 5: PowerShell Environment Variable\n\n```powershell\n# In PowerShell\n$env:NODE_ENV=\"development\"\nnpx tsx server/index.ts\n```\n\n## ⚡ Quick Commands (Try These):\n\n### Option A: Command Prompt (Recommended)\n```cmd\ncd C:\\Users\\harin\\OneDrive\\Desktop\\sivanDonation\\TempleDonation\nnpm run dev\n```\n\n### Option B: Direct tsx command\n```cmd\ncd C:\\Users\\harin\\OneDrive\\Desktop\\sivanDonation\\TempleDonation\nnpx tsx server/index.ts\n```\n\n### Option C: PowerShell with environment variable\n```powershell\ncd C:\\Users\\harin\\OneDrive\\Desktop\\sivanDonation\\TempleDonation\n$env:NODE_ENV=\"development\"\nnpx tsx server/index.ts\n```\n\n## ✅ Expected Success Output:\n\n```\nPostgreSQL Database Connected - Data will be persistent\nServing static files from dist/public\nserving on localhost:5000\n```\n\n## 🌐 Access Application:\n\nOpen browser: **http://localhost:5000**\n\n## 📝 Notes:\n\n- Command Prompt (cmd) works better than PowerShell for Node.js projects\n- cross-env package handles environment variables across platforms\n- Direct tsx command bypasses npm script issues\n- The application will work regardless of NODE_ENV setting","size_bytes":2417},"WINDOWS_PRODUCTION_START.md":{"content":"# Windows Production Startup Guide\n\n## Problem\nThe `npm start` command fails on Windows because it uses Unix-style environment variable syntax:\n```\n'NODE_ENV' is not recognized as an internal or external command\n```\n\n## Quick Start (Recommended)\n\n### Step 1: Build the Project\n```bash\nnpm run build\n```\n\n### Step 2: Start Production Server\n**Option A: Using JavaScript Startup Script**\n```bash\nnode start-production.js\n```\n\n**Option B: Using Batch File**\n```bash\nstart-production.bat\n```\n\n## Alternative Solutions\n\n### Option 3: Use cross-env\n```bash\nnpx cross-env NODE_ENV=production node dist/index.js\n```\n\n### Option 4: Command Prompt\n```bash\nset NODE_ENV=production && node dist/index.js\n```\n\n### Option 5: PowerShell\n```powershell\n$env:NODE_ENV=\"production\"; node dist/index.js\n```\n\n## Verification\nOnce started successfully, you'll see:\n```\n✓ PostgreSQL Database Connected - Data will be persistent\n✓ Serving static files from /path/to/dist/public\nserving on localhost:5000\n```\n\nAccess the application at: **http://localhost:5000**\n\n## Build Output\n- **Frontend**: `dist/public/` (69KB CSS, 883KB JS)\n- **Backend**: `dist/index.js` (50KB bundled server)\n- **Static Assets**: Served with proper caching headers\n\n## Production Features\n- ✅ Optimized static file serving\n- ✅ Database connection with environment variables\n- ✅ Session management and authentication\n- ✅ All API endpoints functional\n- ✅ Date range filtering working\n- ✅ CSV export functionality\n\n## Troubleshooting\n- Ensure `.env` file exists with DATABASE_URL\n- Verify Node.js version is compatible\n- Check that port 5000 is available\n- Confirm PostgreSQL database is accessible","size_bytes":1662},"start-production.js":{"content":"// Production startup script for Windows compatibility\nprocess.env.NODE_ENV = 'production';\n\n// Start the production server\nrequire('./dist/index.js');","size_bytes":151},"start-windows.js":{"content":"// Windows startup script for Temple Donation System\n// This script loads .env file and starts the server\n\nimport { config } from 'dotenv';\nimport { spawn } from 'child_process';\nimport { fileURLToPath } from 'url';\nimport { dirname, join } from 'path';\n\n// Load environment variables from .env file\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Load .env file\nconfig({ path: join(__dirname, '.env') });\n\n// Verify DATABASE_URL is loaded\nif (!process.env.DATABASE_URL) {\n  console.error('❌ DATABASE_URL not found in .env file');\n  console.log('Current working directory:', process.cwd());\n  console.log('Looking for .env at:', join(__dirname, '.env'));\n  process.exit(1);\n}\n\nconsole.log('✅ Environment variables loaded');\nconsole.log('✅ DATABASE_URL found');\nconsole.log('🚀 Starting Temple Donation System...');\n\n// Start the server\nconst server = spawn('npx', ['tsx', 'server/index.ts'], {\n  stdio: 'inherit',\n  shell: true,\n  env: {\n    ...process.env,\n    NODE_ENV: 'development'\n  }\n});\n\nserver.on('error', (err) => {\n  console.error('Failed to start server:', err);\n});\n\nserver.on('close', (code) => {\n  console.log(`Server process exited with code ${code}`);\n});","size_bytes":1225},"server/index.js":{"content":"import express from 'express';\nimport session from 'express-session';\nimport compression from 'compression';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { registerRoutes } from './routes.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst app = express();\nconst PORT = parseInt(process.env.PORT || '5000', 10);\n\n// Middleware\napp.use(compression());\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Session configuration\napp.use(session({\n  secret: process.env.SESSION_SECRET || 'temple-donation-secret-key-2025',\n  resave: false,\n  saveUninitialized: false,\n  cookie: { \n    secure: false, // Set to true in production with HTTPS\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\n// Register API routes\nregisterRoutes(app);\n\n// Serve static files\nconst distPath = path.join(__dirname, '..', 'dist', 'public');\napp.use(express.static(distPath, {\n  maxAge: '1d',\n  etag: true\n}));\n\nconsole.log(`[express] ✓ Serving static files from ${distPath}`);\n\n// SPA fallback\napp.get('*', (req, res) => {\n  res.sendFile(path.join(distPath, 'index.html'));\n});\n\n// Start server\napp.listen(PORT, '0.0.0.0', () => {\n  console.log(`[express] serving on localhost:${PORT}`);\n});","size_bytes":1329}}}